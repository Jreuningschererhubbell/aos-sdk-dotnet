//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace GridNet.OneM2M.Types
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ty", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ResourceType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        AccessControlPolicy = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        AE = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Container = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        ContentInstance = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        CSEBase = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Delivery = 6,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        EventConfig = 7,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        ExecInstance = 8,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Group = 9,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        LocationPolicy = 10,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        M2MServiceSubscriptionProfile = 11,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        MgmtCmd = 12,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        MgmtObj = 13,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Node = 14,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        PollingChannel = 15,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        RemoteCSE = 16,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Request = 17,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("18")]
        Schedule = 18,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("19")]
        ServiceSubscribedAppRule = 19,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        ServiceSubscribedNode = 20,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        StatsCollect = 21,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        StatsConfig = 22,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        Subscription = 23,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        SemanticDescriptor = 24,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        NotificationTargetMgmtPolicyRef = 25,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("26")]
        NotificationTargetPolicy = 26,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("27")]
        PolicyDeletionRules = 27,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("28")]
        FlexContainer = 28,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("29")]
        TimeSeries = 29,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("30")]
        TimeSeriesInstance = 30,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("31")]
        Role = 31,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("32")]
        Token = 32,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("33")]
        TrafficPattern = 33,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("34")]
        DynamicAuthorizationConsultation = 34,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10001")]
        AccessControlPolicyAnnc = 10001,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10002")]
        AEAnnc = 10002,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10003")]
        ContainerAnnc = 10003,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10004")]
        ContentInstanceAnnc = 10004,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10009")]
        GroupAnnc = 10009,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10010")]
        LocationPolicyAnnc = 10010,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10013")]
        MgmtObjAnnc = 10013,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10014")]
        NodeAnnc = 10014,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10016")]
        RemoteCSEAnnc = 10016,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10018")]
        ScheduleAnnc = 10018,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10024")]
        SemanticDescriptorAnnc = 10024,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10028")]
        FlexContainerAnnc = 10028,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10029")]
        TimeSeriesAnnc = 10029,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10030")]
        TimeSeriesInstanceAnnc = 10030,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10033")]
        TrafficPatternAnnc = 10033,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10034")]
        DynamicAuthorizationConsultationAnnc = 10034,
    }
    
    /// <summary>
    /// <para>Used for cseType attribute of &lt;CSEBase&gt; resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for cseType attribute of &lt;CSEBase&gt; resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cseTypeID", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum CseTypeID
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        InCse = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        MnCse = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        AsnCse = 3,
    }
    
    /// <summary>
    /// <para>Used for locationSource attribute of &lt;locationPolicy&gt; resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for locationSource attribute of &lt;locationPolicy&gt; resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("los", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum LocationSource
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        NetworkBased = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        DeviceBased = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        SharingBased = 3,
    }
    
    /// <summary>
    /// <para>Used for ec parameter in request and eventCat attribute of &lt;delivery&gt; resource and cmdh
    ///				policy resource types.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for ec parameter in request and eventCat attribute of &lt;delivery&gt; resou" +
        "rce and cmdh policy resource types.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stdEventCats", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum StdEventCats
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Immediate = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        BestEffort = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Latest = 4,
    }
    
    /// <summary>
    /// <para>Used for Operation parameter in request and operation attribute in &lt;request&gt; resource as well as resource as well as operationMonitor</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for Operation parameter in request and operation attribute in &lt;request&gt" +
        "; resource as well as resource as well as operationMonitor")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("op", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum Operation
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Create = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Retrieve = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Update = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Delete = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Notify = 5,
    }
    
    /// <summary>
    /// <para>Used for rt parameter in request and operation attribute in &lt;request&gt; resource</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for rt parameter in request and operation attribute in &lt;request&gt; resou" +
        "rce")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rt", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ResponseType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        NonBlockingRequestSynch = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        NonBlockingRequestAsynch = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        BlockingRequest = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        FlexBlocking = 4,
    }
    
    /// <summary>
    /// <para>Used for Result Content parameter in request.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for Result Content parameter in request.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rcn", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ResultContent
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Nothing = 0,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Attributes = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        HierarchicalAddress = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        HierarchicalAddressPlusAttributes = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        AttributesPlusChildResources = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        AttributesPlusChildResourceReferences = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        ChildResourceReferences = 6,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        OriginalResource = 7,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        ChildResources = 8,
    }
    
    /// <summary>
    /// <para>Used in &lt;request&gt;</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used in &lt;request&gt;")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("discResType", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum DiscResType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Structured = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Unstructured = 2,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rsc", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ResponseStatusCode
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1000")]
        Accepted = 1000,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2000")]
        OK = 2000,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2001")]
        Created = 2001,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2002")]
        Deleted = 2002,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2004")]
        Updated = 2004,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4000")]
        BadRequest = 4000,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4004")]
        NotFound = 4004,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4005")]
        OperationNotAllowed = 4005,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4008")]
        RequestTimeout = 4008,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4101")]
        SubscriptionCreatorHasNoPrivilege = 4101,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4102")]
        ContentsUnacceptable = 4102,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4103")]
        OriginatorHasNoPrivilege = 4103,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4104")]
        GroupRequestIdentifierExists = 4104,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4105")]
        Conflict = 4105,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4106")]
        OriginatorHasNotRegistered = 4106,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4107")]
        SecurityAssociationRequired = 4107,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4108")]
        InvalidChildResourceType = 4108,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4109")]
        NoMembers = 4109,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4110")]
        GroupMemberTypeInconsistent = 4110,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4111")]
        EsprimUnsupportedOption = 4111,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4112")]
        EsprimUnknownKeyId = 4112,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4113")]
        GesprimUnknownOrigRandId = 4113,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4114")]
        EsprimUnknownRecvRandId = 4114,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4115")]
        GesprimBadMac = 4115,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5000")]
        InternalServerError = 5000,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5001")]
        NotImplemented = 5001,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5103")]
        TargetNotReachable = 5103,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5105")]
        ReceiverHasNoPrivilege = 5105,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5106")]
        AlreadyExists = 5106,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5203")]
        TargetNotSubscribable = 5203,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5204")]
        SubscriptionVerificationInitiationFailed = 5204,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5205")]
        SubscriptionHostHasNoPrivilege = 5205,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5206")]
        NonBlockingRequestNotSupported = 5206,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5207")]
        NotAcceptable = 5207,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5208")]
        DiscoveryDeniedByIpe = 5208,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5209")]
        GroupMembersNotResponded = 5209,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5210")]
        EsprimDecryptionError = 5210,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5211")]
        EsprimEncryptionError = 5211,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5212")]
        SparqlUpdateError = 5212,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6003")]
        ExternalObjectNotReachable = 6003,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6005")]
        ExternalObjectNotFound = 6005,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6010")]
        MaxNumberOfMemberExceeded = 6010,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6020")]
        MgmtSessionCannotBeEstablished = 6020,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6021")]
        MgmtSessionEstablishmentTimeout = 6021,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6022")]
        InvalidCmdtype = 6022,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6023")]
        InvalidArguments = 6023,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6024")]
        InsufficientArguments = 6024,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6025")]
        MGMT__CONVERSION_ERROR = 6025,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6026")]
        MGMT__CANCELLATION_FAILED = 6026,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6028")]
        AlreadyComplete = 6028,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6029")]
        MgmtCommandNotCancellable = 6029,
    }
    
    /// <summary>
    /// <para>Used for request Status in the &lt;request&gt; resource</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for request Status in the &lt;request&gt; resource")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rs", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum RequestStatus
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Completed = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Failed = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Pending = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Forwarded = 4,
    }
    
    /// <summary>
    /// <para>Used for memberType attribute in &lt;group&gt; resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for memberType attribute in &lt;group&gt; resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mt", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum MemberType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Mixed = 0,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        AccessControlPolicy = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        AE = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Container = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        ContentInstance = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        CSEBase = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Delivery = 6,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        EventConfig = 7,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        ExecInstance = 8,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Group = 9,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        LocationPolicy = 10,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        M2MServiceSubscription = 11,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        MgmtCmd = 12,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        MgmtObj = 13,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Node = 14,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        PollingChannel = 15,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        RemoteCSE = 16,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Request = 17,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("18")]
        Schedule = 18,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("19")]
        ServiceSubscribedAppRule = 19,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        ServiceSubscribedNode = 20,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        StatsCollect = 21,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        StatsConfig = 22,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        Subscription = 23,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        SemanticDescriptor = 24,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        NotificationTargetMgmtPolicyRef = 25,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("26")]
        NotificationTargetPolicy = 26,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("27")]
        PolicyDeletionRules = 27,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("28")]
        FlexContainer = 28,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("29")]
        TimeSeries = 29,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("30")]
        TimeSeriesInstance = 30,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("31")]
        Role = 31,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("32")]
        Token = 32,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("33")]
        TrafficPattern = 33,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("34")]
        DynamicAuthorizationConsultation = 34,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10001")]
        AccessControlPolicyAnnc = 10001,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10002")]
        AEAnnc = 10002,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10003")]
        ContainerAnnc = 10003,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10004")]
        ContentInstanceAnnc = 10004,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10009")]
        GroupAnnc = 10009,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10010")]
        LocationPolicyAnnc = 10010,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10013")]
        MgmtObjAnnc = 10013,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10014")]
        NodeAnnc = 10014,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10016")]
        RemoteCSEAnnc = 10016,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10018")]
        ScheduleAnnc = 10018,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10024")]
        SemanticDescriptorAnnc = 10024,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10028")]
        FlexContainerAnnc = 10028,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10029")]
        TimeSeriesAnnc = 10029,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10030")]
        TimeSeriesInstanceAnnc = 10030,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10033")]
        TrafficPatternAnnc = 10033,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10034")]
        DynamicAuthorizationConsultationAnnc = 10034,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("20001")]
        Oldest = 20001,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("20002")]
        Latest = 20002,
    }
    
    /// <summary>
    /// <para>Used for consistencyStrategy attribute in &lt;group&gt; resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for consistencyStrategy attribute in &lt;group&gt; resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("csy", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ConsistencyStrategy
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        AbandonMember = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        AbandonGroup = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        SetMixed = 3,
    }
    
    /// <summary>
    /// <para>Used for cmdType attribute in &lt;mgmtCmd&gt; resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for cmdType attribute in &lt;mgmtCmd&gt; resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cmt", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum CmdType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Reset = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Reboot = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Upload = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Download = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        SoftwareInstall = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        SoftwareUninstall = 6,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        SoftwareUpdate = 7,
    }
    
    /// <summary>
    /// <para>Used for execModeType attribute in &lt;mgmtCmd&gt; and &lt;execInstance&gt; resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for execModeType attribute in &lt;mgmtCmd&gt; and &lt;execInstance&gt; resou" +
        "rce.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("execModeType", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ExecModeType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        ImmediateOnce = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        ImmediateRepeat = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        RandomOnce = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        RandomRepeat = 4,
    }
    
    /// <summary>
    /// <para>Used for execStatusType attribute in &lt;execInstance&gt; resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for execStatusType attribute in &lt;execInstance&gt; resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("execStatusType", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ExecStatusType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Initiated = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Pending = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Finished = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Cancelling = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Cancelled = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        StatusNonCancellable = 6,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("execResultType", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ExecResultType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        StatusRequestUnsupported = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        StatusRequestDenied = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        StatusCancellationDenied = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        StatusInternalError = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        StatusInvalidArguments = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        StatusResourcesExceeded = 6,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        StatusFileTransferFailed = 7,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        StatusFileTransferServerAuthenticationFailure = 8,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        StatusUnsupportedProtocol = 9,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        StatusUploadFailed = 10,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        StatusFileTransferFailedMulticastGroupUnableJoin = 11,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        StatusFileTransferFailedServerContactFailed = 12,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        StatusFileTransferFailedFileAccessFailed = 13,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        StatusFileTransferFailedDownloadIncomplete = 14,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        StatusFileTransferFailedFileCorrupted = 15,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        StatusFileTransferFileAuthenticationFailure = 16,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("19")]
        StatusFileTransferWindowExceeded = 19,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        StatusInvalidUuidFormat = 20,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        StatusUnknownExecutionEnvironment = 21,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        StatusDisabledExecutionEnvironment = 22,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        StatusExecutionEnvironmentMismatch = 23,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        StatusDuplicateDeploymentUnit = 24,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        StatusSystemResourcesExceeded = 25,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("26")]
        StatusUnknownDeploymentUnit = 26,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("27")]
        StatusInvalidDeploymentUnitState = 27,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("28")]
        StatusInvalidDeploymentUnitUpdateDowngradeDisallowed = 28,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("29")]
        StatusInvalidDeploymentUnitUpdateUpgradeDisallowed = 29,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("30")]
        StatusInvalidDeploymentUnitUpdateVersionExists = 30,
    }
    
    /// <summary>
    /// <para>This is used for pendingNotification attribute in &lt;subscription&gt; resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("This is used for pendingNotification attribute in &lt;subscription&gt; resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pn", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum PendingNotification
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        SendLatest = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        SendAllPending = 2,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("nct", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum NotificationContentType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        AllAttributes = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        ModifiedAttributes = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        ResourceID = 3,
    }
    
    /// <summary>
    /// <para>Used in the notificationEventType element of eventNotificationCriteria attribute of subscription resource 
    ///				and in the Notification data object</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used in the notificationEventType element of eventNotificationCriteria attribute " +
        "of subscription resource and in the Notification data object")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("net", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum NotificationEventType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        UpdateResource = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        DeleteResource = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        CreateChild = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        DeleteChild = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        RetrieveContainer = 5,
    }
    
    /// <summary>
    /// <para>This is used for [software], [firmware] resources.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("This is used for [software], [firmware] resources.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sus", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum Status
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Successful = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Failure = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        InProcess = 3,
    }
    
    /// <summary>
    /// <para>This is used for [battery] resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("This is used for [battery] resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bts", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum BatteryStatus
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Normal = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Charging = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        ChargingComplete = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Damaged = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        LowBattery = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        NotInstalled = 6,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Unknown = 7,
    }
    
    /// <summary>
    /// <para>This is used for mgmtObj resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("This is used for mgmtObj resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mgd", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum MgmtDefinition
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Unspecified = 0,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1001")]
        Firmware = 1001,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1002")]
        Software = 1002,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1003")]
        Memory = 1003,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1004")]
        AreaNwkInfo = 1004,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1005")]
        AreaNwkDeviceInfo = 1005,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1006")]
        Battery = 1006,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1007")]
        DeviceInfo = 1007,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1008")]
        DeviceCapability = 1008,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1009")]
        Reboot = 1009,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1010")]
        EventLog = 1010,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1011")]
        CmdhPolicy = 1011,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1012")]
        ActiveCmdhPolicy = 1012,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1013")]
        CmdhDefaults = 1013,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1014")]
        CmdhDefEcValue = 1014,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1015")]
        CmdhEcDefParamValues = 1015,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1016")]
        CmdhLimits = 1016,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1017")]
        CmdhNetworkAccessRules = 1017,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1018")]
        CmdhNwAccessRule = 1018,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1019")]
        CmdhBuffer = 1019,
    }
    
    /// <summary>
    /// <para>Used for the logTypeId attribute of [eventLog] Management Resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for the logTypeId attribute of [eventLog] Management Resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lgt", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum LogTypeId
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        System = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Security = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Event = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Trace = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Panic = 5,
    }
    
    /// <summary>
    /// <para>Used for the logStatus attribute of [eventLog] Management Resource.</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for the logStatus attribute of [eventLog] Management Resource.")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lgst", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum LogStatus
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Started = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Stopped = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Unknown = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        NotPresent = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Error = 5,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("evt", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum EventType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        DataOperation = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        StorageBased = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        TimerBased = 3,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("statsRuleStatusType", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum StatsRuleStatusType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Active = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Inactive = 2,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("statModelType", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum StatModelType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        EventBased = 1,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("encodingType", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum EncodingType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Plain = 0,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Base64String = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Base64Binary = 2,
    }
    
    /// <summary>
    /// <para>Shall be considered for access control policy check by the CSE</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Shall be considered for access control policy check by the CSE")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("acop", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum AccessControlOperations
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1 = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2 = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3 = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4 = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5 = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6 = 6,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7 = 7,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8 = 8,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9 = 9,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10 = 10,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11 = 11,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12 = 12,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13 = 13,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14 = 14,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Item15 = 15,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Item16 = 16,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Item17 = 17,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("18")]
        Item18 = 18,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("19")]
        Item19 = 19,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        Item20 = 20,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Item21 = 21,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        Item22 = 22,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        Item23 = 23,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        Item24 = 24,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        Item25 = 25,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("26")]
        Item26 = 26,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("27")]
        Item27 = 27,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("28")]
        Item28 = 28,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("29")]
        Item29 = 29,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("30")]
        Item30 = 30,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("31")]
        Item31 = 31,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("32")]
        Item32 = 32,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("33")]
        Item33 = 33,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("34")]
        Item34 = 34,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("35")]
        Item35 = 35,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("36")]
        Item36 = 36,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("37")]
        Item37 = 37,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("38")]
        Item38 = 38,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("39")]
        Item39 = 39,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("40")]
        Item40 = 40,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        Item41 = 41,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("42")]
        Item42 = 42,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("43")]
        Item43 = 43,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("44")]
        Item44 = 44,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("45")]
        Item45 = 45,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("46")]
        Item46 = 46,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("47")]
        Item47 = 47,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("48")]
        Item48 = 48,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("49")]
        Item49 = 49,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50 = 50,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("51")]
        Item51 = 51,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("52")]
        Item52 = 52,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("53")]
        Item53 = 53,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("54")]
        Item54 = 54,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("55")]
        Item55 = 55,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("56")]
        Item56 = 56,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("57")]
        Item57 = 57,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("58")]
        Item58 = 58,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("59")]
        Item59 = 59,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("60")]
        Item60 = 60,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("61")]
        Item61 = 61,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("62")]
        Item62 = 62,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("63")]
        Item63 = 63,
    }
    
    /// <summary>
    /// <para>Used in filterCriteria</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used in filterCriteria")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fu", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum FilterUsage
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Discovery = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        ConditionalRetrieval = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        OnDemandDiscovery = 3,
    }
    
    /// <summary>
    /// <para>Used in filterCriteria</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used in filterCriteria")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notificationTargetPolicyAction", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum NotificationTargetPolicyAction
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Accept = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Reject = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Authorize = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Inform = 4,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-enumerationTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("logicalOperator", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum LogicalOperator
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        AND = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        OR = 2,
    }
    
    /// <summary>
    /// <para>Used for direction attribute of allJoynApp resource</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for direction attribute of allJoynApp resource")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("allJoynDirection", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum AllJoynDirection
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        AlljoynToOnem2m = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Onem2mToAlljoyn = 2,
    }
    
    /// <summary>
    /// <para>Used for contentFilterSyntax element in Filter Criteria primitive parameter</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for contentFilterSyntax element in Filter Criteria primitive parameter")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cfs", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ContentFilterSyntax
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        JsonPathSyntax = 1,
    }
    
    /// <summary>
    /// <para>Used in m2m:contentInfo</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used in m2m:contentInfo")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("contentSecurity", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ContentSecurity
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        None = 0,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        JweCompact = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Jwe = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        JweBase64 = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Xml = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        XmlBase64 = 5,
    }
    
    /// <summary>
    /// <para>Used for m2m:e2eSecInfo and other security features in TS-0003</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for m2m:e2eSecInfo and other security features in TS-0003")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("suid", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum Suid
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        PreProvisionedSymmetricKeyIntendedToBeSharedWithAMef = 10,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        PreProvisionedSymmetricKeyIntendedToBeSharedWithAMaf = 11,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        PreProvisionedSymmetricKeyIntendedForUseInASecurityAssociatedEstablishmentFrameworkLeftparenthesissaefrightparenthesis = 12,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        PreProvisionedSymmetricKeyIntendedForUseInEndToEndSecurityOfPrimitivesLeftparenthesisesprimrightparenthesis = 13,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        PreProvisionedSymmetricKeyIntendedForUseWithAuthenticatedEncryptionInTheEncryptionOnlyOrNestedSignThenEncryptEndToEndSecurityOfDataLeftparenthesisesdatarightparenthesisDataClasses = 14,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        PreProvisionedSymmetricKeyIntendedForUseInSignatureOnlyEsdataSecurityClass = 15,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        SymmetricKeycommaProvisionedViaARemoteSecurityProvisioningFrameworkLeftparenthesisrspfrightparenthesiscommaAndIntendedToBeSharedWithAMaf = 21,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("22")]
        SymmetricKeycommaProvisionedViaARspfcommaAndIntendedForUseInASaef = 22,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("23")]
        SymmetricKeycommaProvisionedViaARspfcommaAndIntendedForUseInEsprim = 23,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        SymmetricKeycommaProvisionedViaARspfcommaAndIntendedForUseWithAuthenticatedEncryptionInTheEncryptionOnlyOrNestedSignThenEncryptEsdatarightparenthesisDataClasses = 24,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("25")]
        SymmetricKeycommaProvisionedViaARspfcommaAndIntendedForUseInSignatureOnlyEsdataSecurityClass = 25,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("32")]
        MafDistributedSymmetricKeyIntendedForUseInASaef = 32,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("33")]
        MafDistributedSymmetricKeyIntendedForUseInEsprim = 33,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("34")]
        MafDistributedSymmetricKeyIntendedForUseWithAuthenticatedEncryptionInTheEncryptionOnlyOrNestedSignThenEncryptEsdataDataClasses = 34,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("35")]
        MafDistributedSymmetricKeyIntendedForUseInSignatureOnlyEsdataSecurityClass = 35,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("40")]
        CertificateIntendedToBeSharedWithAMef = 40,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        CertificateIntendedToBeSharedWithAMaf = 41,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("42")]
        CertificateIntendedForUseInASecurityAssociatedEstablishmentFrameworkLeftparenthesissaefrightparenthesis = 42,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("43")]
        CertificateIntendedForUseInEndToEndSecurityOfPrimitivesLeftparenthesisesprimrightparenthesis = 43,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("44")]
        CertificateIntendedForUseWithAuthenticatedEncryptionInTheEncryptionOnlyOrNestedSignThenEncryptEndToEndSecurityOfDataLeftparenthesisesdatarightparenthesisDataClasses = 44,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("45")]
        CertificateIntendedForUseInSignatureOnlyEsdataSecurityClass = 45,
    }
    
    /// <summary>
    /// <para>Used in m2msec:receiverESPrimRandObject and m2m:originatorESPrimRandObject</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used in m2msec:receiverESPrimRandObject and m2m:originatorESPrimRandObject")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("esk", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum EsprimKeyGenAlgID
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        HmacSha256 = 1,
    }
    
    /// <summary>
    /// <para>Used in m2m:receiveEr2ERandObject and m2msec:originatorESPrimRandObject</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used in m2m:receiveEr2ERandObject and m2msec:originatorESPrimRandObject")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("esprimProtocolAndAlgID", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum EsprimProtocolAndAlgID
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        A128GCM = 10,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        A192GCM = 11,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        A256GCM = 12,
    }
    
    /// <summary>
    /// <para>Used for periodicIndicator attribute of trafficPattern resource</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for periodicIndicator attribute of trafficPattern resource")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pri", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum PeriodicIndicator
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Periodic = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        OnDemand = 2,
    }
    
    /// <summary>
    /// <para>Used for periodicIndicator attribute of trafficPattern resource</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for periodicIndicator attribute of trafficPattern resource")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sti", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum StationaryIndication
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Stationary = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Mobile = 2,
    }
    
    /// <summary>
    /// <para>Used for periodicIndicator attribute of trafficPattern resource</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used for periodicIndicator attribute of trafficPattern resource")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cnst", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum ContentStatus
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        PartialContent = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        FullContent = 2,
    }
    
    /// <summary>
    /// <para>Used in the networkAction element in the backOffParameters</para>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-enumerationTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Used in the networkAction element in the backOffParameters")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("nwa", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum NetworkAction
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        CellularRegistration = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        CellularAttach = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        CellularPdpctxact = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        CellularSms = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Default = 5,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("permittedMediaTypes", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum PermittedMediaTypes
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("application/xml")]
        Xml,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("application/json")]
        Json,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("application/cbor")]
        Cbor,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dmd", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dmd")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeliveryMetaData
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tcop")]
        [System.Xml.Serialization.XmlElementAttribute("tcop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool TracingOption { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tcin")]
        [System.Xml.Serialization.XmlElementAttribute("tcin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> TracingInfo { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TracingInfo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TracingInfo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TracingInfoSpecified => (this.TracingInfo.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("arq", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("arq")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AggregatedRequest
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("req")]
        [System.Xml.Serialization.XmlElementAttribute("req", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AggregatedRequestRequest> Request { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AggregatedRequestRequest", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("AggregatedRequestRequest")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AggregatedRequestRequest
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("op", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.Operation OperationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Operation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Operation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OperationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("op")]
        public System.Nullable<GridNet.OneM2M.Types.Operation> Operation
        {
            get
            {
                return this.OperationValueSpecified ? this.OperationValue : default(GridNet.OneM2M.Types.Operation?);
            }
            set
            {
                this.OperationValue = value.GetValueOrDefault();
                this.OperationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("to")]
        [System.Xml.Serialization.XmlElementAttribute("to", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string To { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fr")]
        [System.Xml.Serialization.XmlElementAttribute("fr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string From { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rqi")]
        [System.Xml.Serialization.XmlElementAttribute("rqi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string RequestIdentifier { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pc")]
        [System.Xml.Serialization.XmlElementAttribute("pc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PrimitiveContent PrimitiveContent { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mi")]
        [System.Xml.Serialization.XmlElementAttribute("mi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public MetaInformation MetaInformation { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pc", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("pc")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ResponseContent))]
    public partial class PrimitiveContent
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute(null)]
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Collections.Generic.ICollection<System.Xml.XmlElement> Any { get; set; } = System.Array.Empty<System.Xml.XmlElement>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Any-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnySpecified => (this.Any.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mi", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("mi")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetaInformation
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResourceType ResourceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResourceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResourceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResourceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ty")]
        public System.Nullable<GridNet.OneM2M.Types.ResourceType> ResourceType
        {
            get
            {
                return this.ResourceTypeValueSpecified ? this.ResourceTypeValue : default(GridNet.OneM2M.Types.ResourceType?);
            }
            set
            {
                this.ResourceTypeValue = value.GetValueOrDefault();
                this.ResourceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nm")]
        [System.Xml.Serialization.XmlElementAttribute("nm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string Name { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ot", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset OriginatingTimestampValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OriginatingTimestamp-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginatingTimestamp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OriginatingTimestampValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ot")]
        public System.Nullable<System.DateTimeOffset> OriginatingTimestamp
        {
            get
            {
                return this.OriginatingTimestampValueSpecified ? this.OriginatingTimestampValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.OriginatingTimestampValue = value.GetValueOrDefault();
                this.OriginatingTimestampValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rqet")]
        [System.Xml.Serialization.XmlElementAttribute("rqet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RequestExpirationTimestamp { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rset")]
        [System.Xml.Serialization.XmlElementAttribute("rset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ResultExpirationTimestamp { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("oet")]
        [System.Xml.Serialization.XmlElementAttribute("oet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OperationExecutionTime { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rt")]
        [System.Xml.Serialization.XmlElementAttribute("rt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ResponseTypeInfo ResponseType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rp")]
        [System.Xml.Serialization.XmlElementAttribute("rp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ResultPersistence { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rcn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResultContent ResultContentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResultContent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResultContent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResultContentValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rcn")]
        public System.Nullable<GridNet.OneM2M.Types.ResultContent> ResultContent
        {
            get
            {
                return this.ResultContentValueSpecified ? this.ResultContentValue : default(GridNet.OneM2M.Types.ResultContent?);
            }
            set
            {
                this.ResultContentValue = value.GetValueOrDefault();
                this.ResultContentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ec")]
        [System.Xml.Serialization.XmlElementAttribute("ec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EventCategory { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("da", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DeliveryAggregationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeliveryAggregation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeliveryAggregation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeliveryAggregationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("da")]
        public System.Nullable<bool> DeliveryAggregation
        {
            get
            {
                return this.DeliveryAggregationValueSpecified ? this.DeliveryAggregationValue : default(bool?);
            }
            set
            {
                this.DeliveryAggregationValue = value.GetValueOrDefault();
                this.DeliveryAggregationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gid")]
        [System.Xml.Serialization.XmlElementAttribute("gid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string GroupRequestIdentifier { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fc")]
        [System.Xml.Serialization.XmlElementAttribute("fc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FilterCriteria FilterCriteria { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("drt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.DiscResType DiscoveryResultTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DiscoveryResultType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DiscoveryResultType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DiscoveryResultTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("drt")]
        public System.Nullable<GridNet.OneM2M.Types.DiscResType> DiscoveryResultType
        {
            get
            {
                return this.DiscoveryResultTypeValueSpecified ? this.DiscoveryResultTypeValue : default(GridNet.OneM2M.Types.DiscResType?);
            }
            set
            {
                this.DiscoveryResultTypeValue = value.GetValueOrDefault();
                this.DiscoveryResultTypeValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("responseTypeInfo", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("responseTypeInfo")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResponseTypeInfo
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rtv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResponseType ResponseTypeValueValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResponseTypeValue-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResponseTypeValue property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResponseTypeValueValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rtv")]
        public System.Nullable<GridNet.OneM2M.Types.ResponseType> ResponseTypeValue
        {
            get
            {
                return this.ResponseTypeValueValueSpecified ? this.ResponseTypeValueValue : default(GridNet.OneM2M.Types.ResponseType?);
            }
            set
            {
                this.ResponseTypeValueValue = value.GetValueOrDefault();
                this.ResponseTypeValueValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nu")]
        [System.Xml.Serialization.XmlElementAttribute("nu", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> NotificationURI { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fc", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("fc")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FilterCriteria
    {
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("crb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset CreatedBeforeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CreatedBefore-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedBefore property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CreatedBeforeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("crb")]
        public System.Nullable<System.DateTimeOffset> CreatedBefore
        {
            get
            {
                return this.CreatedBeforeValueSpecified ? this.CreatedBeforeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.CreatedBeforeValue = value.GetValueOrDefault();
                this.CreatedBeforeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cra", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset CreatedAfterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CreatedAfter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedAfter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CreatedAfterValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cra")]
        public System.Nullable<System.DateTimeOffset> CreatedAfter
        {
            get
            {
                return this.CreatedAfterValueSpecified ? this.CreatedAfterValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.CreatedAfterValue = value.GetValueOrDefault();
                this.CreatedAfterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ModifiedSinceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ModifiedSince-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ModifiedSince property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ModifiedSinceValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ms")]
        public System.Nullable<System.DateTimeOffset> ModifiedSince
        {
            get
            {
                return this.ModifiedSinceValueSpecified ? this.ModifiedSinceValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ModifiedSinceValue = value.GetValueOrDefault();
                this.ModifiedSinceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("us", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset UnmodifiedSinceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UnmodifiedSince-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnmodifiedSince property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool UnmodifiedSinceValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("us")]
        public System.Nullable<System.DateTimeOffset> UnmodifiedSince
        {
            get
            {
                return this.UnmodifiedSinceValueSpecified ? this.UnmodifiedSinceValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.UnmodifiedSinceValue = value.GetValueOrDefault();
                this.UnmodifiedSinceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTagSmallerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StateTagSmaller-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateTagSmaller property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StateTagSmallerValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sts")]
        public System.Nullable<long> StateTagSmaller
        {
            get
            {
                return this.StateTagSmallerValueSpecified ? this.StateTagSmallerValue : default(long?);
            }
            set
            {
                this.StateTagSmallerValue = value.GetValueOrDefault();
                this.StateTagSmallerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("stb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTagBiggerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StateTagBigger-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateTagBigger property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StateTagBiggerValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stb")]
        public System.Nullable<long> StateTagBigger
        {
            get
            {
                return this.StateTagBiggerValueSpecified ? this.StateTagBiggerValue : default(long?);
            }
            set
            {
                this.StateTagBiggerValue = value.GetValueOrDefault();
                this.StateTagBiggerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpireBeforeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExpireBefore-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpireBefore property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExpireBeforeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exb")]
        public System.Nullable<System.DateTimeOffset> ExpireBefore
        {
            get
            {
                return this.ExpireBeforeValueSpecified ? this.ExpireBeforeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ExpireBeforeValue = value.GetValueOrDefault();
                this.ExpireBeforeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpireAfterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExpireAfter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpireAfter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExpireAfterValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exa")]
        public System.Nullable<System.DateTimeOffset> ExpireAfter
        {
            get
            {
                return this.ExpireAfterValueSpecified ? this.ExpireAfterValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ExpireAfterValue = value.GetValueOrDefault();
                this.ExpireAfterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lbl")]
        [System.Xml.Serialization.XmlElementAttribute("lbl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public System.Collections.Generic.ICollection<string> Labels { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Labels-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Labels collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LabelsSpecified => (this.Labels.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ty")]
        [System.Xml.Serialization.XmlElementAttribute("ty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ResourceType> ResourceType { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ResourceType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResourceType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ResourceType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResourceTypeSpecified => (this.ResourceType.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sza", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SizeAboveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SizeAbove-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SizeAbove property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SizeAboveValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sza")]
        public System.Nullable<long> SizeAbove
        {
            get
            {
                return this.SizeAboveValueSpecified ? this.SizeAboveValue : default(long?);
            }
            set
            {
                this.SizeAboveValue = value.GetValueOrDefault();
                this.SizeAboveValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("szb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SizeBelowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SizeBelow-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SizeBelow property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SizeBelowValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("szb")]
        public System.Nullable<long> SizeBelow
        {
            get
            {
                return this.SizeBelowValueSpecified ? this.SizeBelowValue : default(long?);
            }
            set
            {
                this.SizeBelowValue = value.GetValueOrDefault();
                this.SizeBelowValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: [\w/!#$^_.+&\-]+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[\\w/!#$^_.+&\\-]+")]
        [Newtonsoft.Json.JsonPropertyAttribute("cty")]
        [System.Xml.Serialization.XmlElementAttribute("cty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> ContentType { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContentType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentTypeSpecified => (this.ContentType.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("atr")]
        [System.Xml.Serialization.XmlElementAttribute("atr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<Attribute> Attribute { get; set; } = System.Array.Empty<Attribute>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Attribute-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Attribute collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AttributeSpecified => (this.Attribute.Count != 0);
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("fu", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.FilterUsage FilterUsageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FilterUsage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FilterUsage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool FilterUsageValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fu")]
        public System.Nullable<GridNet.OneM2M.Types.FilterUsage> FilterUsage
        {
            get
            {
                return this.FilterUsageValueSpecified ? this.FilterUsageValue : default(GridNet.OneM2M.Types.FilterUsage?);
            }
            set
            {
                this.FilterUsageValue = value.GetValueOrDefault();
                this.FilterUsageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lim", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long LimitValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Limit-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Limit property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LimitValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lim")]
        public System.Nullable<long> Limit
        {
            get
            {
                return this.LimitValueSpecified ? this.LimitValue : default(long?);
            }
            set
            {
                this.LimitValue = value.GetValueOrDefault();
                this.LimitValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smf")]
        [System.Xml.Serialization.XmlElementAttribute("smf", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> SemanticsFilter { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticsFilter-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticsFilter collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticsFilterSpecified => (this.SemanticsFilter.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("fo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool FilterOperationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FilterOperation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FilterOperation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool FilterOperationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fo")]
        public System.Nullable<bool> FilterOperation
        {
            get
            {
                return this.FilterOperationValueSpecified ? this.FilterOperationValue : default(bool?);
            }
            set
            {
                this.FilterOperationValue = value.GetValueOrDefault();
                this.FilterOperationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cfs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ContentFilterSyntax ContentFilterSyntaxValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentFilterSyntax-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContentFilterSyntax property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentFilterSyntaxValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cfs")]
        public System.Nullable<GridNet.OneM2M.Types.ContentFilterSyntax> ContentFilterSyntax
        {
            get
            {
                return this.ContentFilterSyntaxValueSpecified ? this.ContentFilterSyntaxValue : default(GridNet.OneM2M.Types.ContentFilterSyntax?);
            }
            set
            {
                this.ContentFilterSyntaxValue = value.GetValueOrDefault();
                this.ContentFilterSyntaxValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cfq")]
        [System.Xml.Serialization.XmlElementAttribute("cfq", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ContentFilterQuery { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lvl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long LevelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Level-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Level property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LevelValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lvl")]
        public System.Nullable<long> Level
        {
            get
            {
                return this.LevelValueSpecified ? this.LevelValue : default(long?);
            }
            set
            {
                this.LevelValue = value.GetValueOrDefault();
                this.LevelValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ofst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long OffsetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Offset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Offset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OffsetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ofst")]
        public System.Nullable<long> Offset
        {
            get
            {
                return this.OffsetValueSpecified ? this.OffsetValue : default(long?);
            }
            set
            {
                this.OffsetValue = value.GetValueOrDefault();
                this.OffsetValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("atr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("atr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Attribute
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nm")]
        [System.Xml.Serialization.XmlElementAttribute("nm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string Name { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("val")]
        [System.Xml.Serialization.XmlElementAttribute("val", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object Value { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("scheduleEntries", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("scheduleEntries")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleEntries
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: (([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*)).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*))")]
        [Newtonsoft.Json.JsonPropertyAttribute("sce")]
        [System.Xml.Serialization.XmlElementAttribute("sce", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> ScheduleEntry { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("actionStatus", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("actionStatus")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActionStatus
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("can")]
        [System.Xml.Serialization.XmlElementAttribute("can", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Action { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.Status StatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Status-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Status property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sus")]
        public System.Nullable<GridNet.OneM2M.Types.Status> Status
        {
            get
            {
                return this.StatusValueSpecified ? this.StatusValue : default(GridNet.OneM2M.Types.Status?);
            }
            set
            {
                this.StatusValue = value.GetValueOrDefault();
                this.StatusValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("anyArgType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("anyArgType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnyArgType
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nm")]
        [System.Xml.Serialization.XmlElementAttribute("nm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string Name { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("val")]
        [System.Xml.Serialization.XmlElementAttribute("val", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object Value { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("resetArgsType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("resetArgsType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetArgsType
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("any")]
        [System.Xml.Serialization.XmlElementAttribute("any", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AnyArgType> AnyArg { get; set; } = System.Array.Empty<AnyArgType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnyArg-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnyArg collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnyArgSpecified => (this.AnyArg.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rebootArgsType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("rebootArgsType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RebootArgsType
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("any")]
        [System.Xml.Serialization.XmlElementAttribute("any", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AnyArgType> AnyArg { get; set; } = System.Array.Empty<AnyArgType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnyArg-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnyArg collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnyArgSpecified => (this.AnyArg.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("uploadArgsType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("uploadArgsType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadArgsType
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ftyp")]
        [System.Xml.Serialization.XmlElementAttribute("ftyp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string FileType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("unm")]
        [System.Xml.Serialization.XmlElementAttribute("unm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Username { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pwd")]
        [System.Xml.Serialization.XmlElementAttribute("pwd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Password { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("any")]
        [System.Xml.Serialization.XmlElementAttribute("any", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AnyArgType> AnyArg { get; set; } = System.Array.Empty<AnyArgType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnyArg-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnyArg collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnyArgSpecified => (this.AnyArg.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("downloadArgsType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("downloadArgsType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadArgsType
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ftyp")]
        [System.Xml.Serialization.XmlElementAttribute("ftyp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string FileType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("unm")]
        [System.Xml.Serialization.XmlElementAttribute("unm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Username { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pwd")]
        [System.Xml.Serialization.XmlElementAttribute("pwd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Password { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fsi")]
        [System.Xml.Serialization.XmlElementAttribute("fsi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long Filesize { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tgf")]
        [System.Xml.Serialization.XmlElementAttribute("tgf", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TargetFile { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dss")]
        [System.Xml.Serialization.XmlElementAttribute("dss", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long DelaySeconds { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("surl")]
        [System.Xml.Serialization.XmlElementAttribute("surl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string SuccessURL { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stt")]
        [System.Xml.Serialization.XmlElementAttribute("stt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset StartTime { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cpt")]
        [System.Xml.Serialization.XmlElementAttribute("cpt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset CompleteTime { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("any")]
        [System.Xml.Serialization.XmlElementAttribute("any", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AnyArgType> AnyArg { get; set; } = System.Array.Empty<AnyArgType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnyArg-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnyArg collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnyArgSpecified => (this.AnyArg.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("softwareInstallArgsType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("softwareInstallArgsType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoftwareInstallArgsType
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uuid")]
        [System.Xml.Serialization.XmlElementAttribute("uuid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string UUID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("unm")]
        [System.Xml.Serialization.XmlElementAttribute("unm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Username { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pwd")]
        [System.Xml.Serialization.XmlElementAttribute("pwd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Password { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("eer")]
        [System.Xml.Serialization.XmlElementAttribute("eer", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ExecutionEnvRef { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("any")]
        [System.Xml.Serialization.XmlElementAttribute("any", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AnyArgType> AnyArg { get; set; } = System.Array.Empty<AnyArgType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnyArg-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnyArg collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnyArgSpecified => (this.AnyArg.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("softwareUpdateArgsType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("softwareUpdateArgsType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoftwareUpdateArgsType
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uuid")]
        [System.Xml.Serialization.XmlElementAttribute("uuid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string UUID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("vr")]
        [System.Xml.Serialization.XmlElementAttribute("vr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("unm")]
        [System.Xml.Serialization.XmlElementAttribute("unm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Username { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pwd")]
        [System.Xml.Serialization.XmlElementAttribute("pwd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Password { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("eer")]
        [System.Xml.Serialization.XmlElementAttribute("eer", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ExecutionEnvRef { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("any")]
        [System.Xml.Serialization.XmlElementAttribute("any", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AnyArgType> AnyArg { get; set; } = System.Array.Empty<AnyArgType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnyArg-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnyArg collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnyArgSpecified => (this.AnyArg.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("softwareUninstallArgsType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("softwareUninstallArgsType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SoftwareUninstallArgsType
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uuid")]
        [System.Xml.Serialization.XmlElementAttribute("uuid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string UUID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("vr")]
        [System.Xml.Serialization.XmlElementAttribute("vr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("eer")]
        [System.Xml.Serialization.XmlElementAttribute("eer", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ExecutionEnvRef { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("any")]
        [System.Xml.Serialization.XmlElementAttribute("any", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AnyArgType> AnyArg { get; set; } = System.Array.Empty<AnyArgType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnyArg-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnyArg collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnyArgSpecified => (this.AnyArg.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("execReqArgsListType", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("execReqArgsListType")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecReqArgsListType
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rst")]
        [System.Xml.Serialization.XmlElementAttribute("rst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<ResetArgsType> Reset { get; set; } = System.Array.Empty<ResetArgsType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Reset-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Reset collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResetSpecified => (this.Reset.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rbo")]
        [System.Xml.Serialization.XmlElementAttribute("rbo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<RebootArgsType> Reboot { get; set; } = System.Array.Empty<RebootArgsType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Reboot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Reboot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RebootSpecified => (this.Reboot.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uld")]
        [System.Xml.Serialization.XmlElementAttribute("uld", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<UploadArgsType> Upload { get; set; } = System.Array.Empty<UploadArgsType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Upload-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Upload collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool UploadSpecified => (this.Upload.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dld")]
        [System.Xml.Serialization.XmlElementAttribute("dld", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<DownloadArgsType> Download { get; set; } = System.Array.Empty<DownloadArgsType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Download-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Download collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DownloadSpecified => (this.Download.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swin")]
        [System.Xml.Serialization.XmlElementAttribute("swin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<SoftwareInstallArgsType> SoftwareInstall { get; set; } = System.Array.Empty<SoftwareInstallArgsType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoftwareInstall-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoftwareInstall collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SoftwareInstallSpecified => (this.SoftwareInstall.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swup")]
        [System.Xml.Serialization.XmlElementAttribute("swup", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<SoftwareUpdateArgsType> SoftwareUpdate { get; set; } = System.Array.Empty<SoftwareUpdateArgsType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoftwareUpdate-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoftwareUpdate collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SoftwareUpdateSpecified => (this.SoftwareUpdate.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swun")]
        [System.Xml.Serialization.XmlElementAttribute("swun", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<SoftwareUninstallArgsType> SoftwareUninstall { get; set; } = System.Array.Empty<SoftwareUninstallArgsType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoftwareUninstall-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoftwareUninstall collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SoftwareUninstallSpecified => (this.SoftwareUninstall.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mgmtLinkRef", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("mgmtLinkRef")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MgmtLinkRef
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("val")]
        [System.Xml.Serialization.XmlTextAttribute(DataType="anyURI")]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nm")]
        [System.Xml.Serialization.XmlAttributeAttribute("nm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string Name { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("typ", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MgmtDefinition TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Type-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("typ")]
        public System.Nullable<GridNet.OneM2M.Types.MgmtDefinition> Type
        {
            get
            {
                return this.TypeValueSpecified ? this.TypeValue : default(GridNet.OneM2M.Types.MgmtDefinition?);
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("setOfAcrs", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("setOfAcrs")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetOfAcrs
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acr")]
        [System.Xml.Serialization.XmlElementAttribute("acr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AccessControlRule> AccessControlRule { get; set; } = System.Array.Empty<AccessControlRule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlRule-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlRule collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlRuleSpecified => (this.AccessControlRule.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("acr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("acr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccessControlRule
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acor")]
        [System.Xml.Serialization.XmlElementAttribute("acor", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AccessControlOriginators { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("acop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AccessControlOperations AccessControlOperationsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlOperations-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AccessControlOperations property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlOperationsValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("acop")]
        public System.Nullable<GridNet.OneM2M.Types.AccessControlOperations> AccessControlOperations
        {
            get
            {
                return this.AccessControlOperationsValueSpecified ? this.AccessControlOperationsValue : default(GridNet.OneM2M.Types.AccessControlOperations?);
            }
            set
            {
                this.AccessControlOperationsValue = value.GetValueOrDefault();
                this.AccessControlOperationsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acco")]
        [System.Xml.Serialization.XmlElementAttribute("acco", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AccessControlRuleAccessControlContexts> AccessControlContexts { get; set; } = System.Array.Empty<AccessControlRuleAccessControlContexts>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlContexts-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlContexts collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlContextsSpecified => (this.AccessControlContexts.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("acaf", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool AccessControlAuthenticationFlagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlAuthenticationFlag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AccessControlAuthenticationFlag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlAuthenticationFlagValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("acaf")]
        public System.Nullable<bool> AccessControlAuthenticationFlag
        {
            get
            {
                return this.AccessControlAuthenticationFlagValueSpecified ? this.AccessControlAuthenticationFlagValue : default(bool?);
            }
            set
            {
                this.AccessControlAuthenticationFlagValue = value.GetValueOrDefault();
                this.AccessControlAuthenticationFlagValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessControlRuleAccessControlContexts", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("AccessControlRuleAccessControlContexts")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccessControlRuleAccessControlContexts
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: (([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*)).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*))")]
        [Newtonsoft.Json.JsonPropertyAttribute("accessControlWindow")]
        [System.Xml.Serialization.XmlElementAttribute("accessControlWindow", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> AccessControlWindow { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlWindow-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlWindow collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlWindowSpecified => (this.AccessControlWindow.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acip")]
        [System.Xml.Serialization.XmlElementAttribute("acip", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AccessControlRuleAccessControlContextsAccessControlIpAddresses AccessControlIpAddresses { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aclr")]
        [System.Xml.Serialization.XmlElementAttribute("aclr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LocationRegion AccessControlLocationRegion { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AccessControlRuleAccessControlContextsAccessControlIpAddresses", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("AccessControlRuleAccessControlContextsAccessControlIpAddresses")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccessControlRuleAccessControlContextsAccessControlIpAddresses
    {
        
        /// <summary>
        /// <para>An IP version 4 address, with optional CIDR suffix in the range /0
        ///				... /32.</para>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])(/([0-9]|[1-2][0-9]|3[0-2]))?)|([0-9A-Fa-f]{8}(/([0-9]|[1-2][0-9]|3[0-2]))?).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])" +
            "\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9" +
            "])(/([0-9]|[1-2][0-9]|3[0-2]))?)|([0-9A-Fa-f]{8}(/([0-9]|[1-2][0-9]|3[0-2]))?)")]
        [Newtonsoft.Json.JsonPropertyAttribute("ipv4")]
        [System.Xml.Serialization.XmlElementAttribute("ipv4", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public System.Collections.Generic.ICollection<string> Ipv4Addresses { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ipv4Addresses-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Ipv4Addresses collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Ipv4AddressesSpecified => (this.Ipv4Addresses.Count != 0);
        
        /// <summary>
        /// <para>An IP version 6 address, based on RFC 1884, with optional CIDR suffix
        ///				in the range /0 ... /128.</para>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(:(:[0-9A-Fa-f]{1,4}){1,7})|(([0-9A-Fa-f]{1,4}:){1,6}(:[0-9A-Fa-f]{1,4}){1}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,5}(:[0-9A-Fa-f]{1,4}){1,2}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,4}(:[0-9A-Fa-f]{1,4}){1,3}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,3}(:[0-9A-Fa-f]{1,4}){1,4}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,2}(:[0-9A-Fa-f]{1,4}){1,5}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1}(:[0-9A-Fa-f]{1,4}){1,6}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,7}:(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(((:(:0{1,4}){0,3}(:(0{1,4}|[fF]{4}))?)|(0{1,4}:(:0{1,4}){0,2}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){2}(:0{1,4})?(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){3}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){4}(0{1,4}|[fF]{4})?)):(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9]))|(::(/0)?).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(:(:[0-9A-Fa-f]{1,4}){1,7})|(([0-9A-Fa-f]{1,4}:){1,6}(:[0-9A-Fa-f]{1,4}){1}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,5}(:[0-9A-Fa-f]{1,4}){1,2}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,4}(:[0-9A-Fa-f]{1,4}){1,3}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,3}(:[0-9A-Fa-f]{1,4}){1,4}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,2}(:[0-9A-Fa-f]{1,4}){1,5}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1}(:[0-9A-Fa-f]{1,4}){1,6}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,7}:(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(((:(:0{1,4}){0,3}(:(0{1,4}|[fF]{4}))?)|(0{1,4}:(:0{1,4}){0,2}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){2}(:0{1,4})?(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){3}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){4}(0{1,4}|[fF]{4})?)):(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9]))|(::(/0)?)")]
        [Newtonsoft.Json.JsonPropertyAttribute("ipv6")]
        [System.Xml.Serialization.XmlElementAttribute("ipv6", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public System.Collections.Generic.ICollection<string> Ipv6Addresses { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ipv6Addresses-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Ipv6Addresses collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Ipv6AddressesSpecified => (this.Ipv6Addresses.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("locationRegion", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("locationRegion")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocationRegion
    {
        
        /// <summary>
        /// <para>2-character country code as defined by ISO-3166</para>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: [A-Z]{2}.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{2}")]
        [Newtonsoft.Json.JsonPropertyAttribute("accc")]
        [System.Xml.Serialization.XmlElementAttribute("accc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> CountryCode { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CountryCode-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CountryCode collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CountryCodeSpecified => (this.CountryCode.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accr")]
        [System.Xml.Serialization.XmlElementAttribute("accr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="float")]
        public System.Collections.Generic.ICollection<float> CircRegion { get; set; } = System.Array.Empty<System.Single>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CircRegion-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CircRegion collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CircRegionSpecified => (this.CircRegion.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("childResourceRef", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("childResourceRef")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChildResourceRef
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("val")]
        [System.Xml.Serialization.XmlTextAttribute(DataType="anyURI")]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nm")]
        [System.Xml.Serialization.XmlAttributeAttribute("nm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string Name { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("typ", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResourceType TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Type-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("typ")]
        public System.Nullable<GridNet.OneM2M.Types.ResourceType> Type
        {
            get
            {
                return this.TypeValueSpecified ? this.TypeValue : default(GridNet.OneM2M.Types.ResourceType?);
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("spid")]
        [System.Xml.Serialization.XmlAttributeAttribute("spid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string SpecializationID { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ors", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ors")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OperationResult
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rsc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResponseStatusCode ResponseStatusCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResponseStatusCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResponseStatusCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResponseStatusCodeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rsc")]
        public System.Nullable<GridNet.OneM2M.Types.ResponseStatusCode> ResponseStatusCode
        {
            get
            {
                return this.ResponseStatusCodeValueSpecified ? this.ResponseStatusCodeValue : default(GridNet.OneM2M.Types.ResponseStatusCode?);
            }
            set
            {
                this.ResponseStatusCodeValue = value.GetValueOrDefault();
                this.ResponseStatusCodeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rqi")]
        [System.Xml.Serialization.XmlElementAttribute("rqi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string RequestIdentifier { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pc")]
        [System.Xml.Serialization.XmlElementAttribute("pc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public PrimitiveContent PrimitiveContent { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("to")]
        [System.Xml.Serialization.XmlElementAttribute("to", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string To { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fr")]
        [System.Xml.Serialization.XmlElementAttribute("fr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string From { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ot", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset OriginatingTimestampValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OriginatingTimestamp-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginatingTimestamp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OriginatingTimestampValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ot")]
        public System.Nullable<System.DateTimeOffset> OriginatingTimestamp
        {
            get
            {
                return this.OriginatingTimestampValueSpecified ? this.OriginatingTimestampValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.OriginatingTimestampValue = value.GetValueOrDefault();
                this.OriginatingTimestampValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rset")]
        [System.Xml.Serialization.XmlElementAttribute("rset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ResultExpirationTimestamp { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ec")]
        [System.Xml.Serialization.XmlElementAttribute("ec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EventCategory { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cnst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ContentStatus ContentStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContentStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cnst")]
        public System.Nullable<GridNet.OneM2M.Types.ContentStatus> ContentStatus
        {
            get
            {
                return this.ContentStatusValueSpecified ? this.ContentStatusValue : default(GridNet.OneM2M.Types.ContentStatus?);
            }
            set
            {
                this.ContentStatusValue = value.GetValueOrDefault();
                this.ContentStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cnot", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long ContentOffsetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentOffset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContentOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentOffsetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cnot")]
        public System.Nullable<long> ContentOffset
        {
            get
            {
                return this.ContentOffsetValueSpecified ? this.ContentOffsetValue : default(long?);
            }
            set
            {
                this.ContentOffsetValue = value.GetValueOrDefault();
                this.ContentOffsetValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("conr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("conr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContentRef
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("urir")]
        [System.Xml.Serialization.XmlElementAttribute("urir", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<ContentRefURIReference> URIReference { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ContentRefURIReference", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("ContentRefURIReference")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContentRefURIReference
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nm")]
        [System.Xml.Serialization.XmlElementAttribute("nm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string Name { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uri")]
        [System.Xml.Serialization.XmlElementAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URI { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("deletionContexts", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("deletionContexts")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletionContexts
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: (([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*)).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*))")]
        [Newtonsoft.Json.JsonPropertyAttribute("tod")]
        [System.Xml.Serialization.XmlElementAttribute("tod", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> TimeOfDay { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeOfDay-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeOfDay collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeOfDaySpecified => (this.TimeOfDay.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lr")]
        [System.Xml.Serialization.XmlElementAttribute("lr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<LocationRegion> LocationRegions { get; set; } = System.Array.Empty<LocationRegion>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationRegions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LocationRegions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocationRegionsSpecified => (this.LocationRegions.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("md", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("md")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MissingData
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("num")]
        [System.Xml.Serialization.XmlElementAttribute("num", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long Number { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dur")]
        [System.Xml.Serialization.XmlElementAttribute("dur", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public System.TimeSpan Duration { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("receiverESPrimRandObject", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("receiverESPrimRandObject")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiverESPrimRandObject
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esri")]
        [System.Xml.Serialization.XmlElementAttribute("esri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string EsprimRandID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esrv")]
        [System.Xml.Serialization.XmlElementAttribute("esrv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string EsprimRandValue { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esrx")]
        [System.Xml.Serialization.XmlElementAttribute("esrx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EsprimRandExpiry { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esks")]
        [System.Xml.Serialization.XmlElementAttribute("esks", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.EsprimKeyGenAlgID> EsprimKeyGenAlgIDs { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("espa")]
        [System.Xml.Serialization.XmlElementAttribute("espa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.EsprimProtocolAndAlgID> EsprimProtocolAndAlgIDs { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("originatorESPrimRandObject", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("originatorESPrimRandObject")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OriginatorESPrimRandObject
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esri")]
        [System.Xml.Serialization.XmlElementAttribute("esri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string EsprimRandID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esrv")]
        [System.Xml.Serialization.XmlElementAttribute("esrv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string EsprimRandValue { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esrx")]
        [System.Xml.Serialization.XmlElementAttribute("esrx", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EsprimRandExpiry { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("esks", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.EsprimKeyGenAlgID EsprimKeyGenAlgIDsValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EsprimKeyGenAlgIDs-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EsprimKeyGenAlgIDs property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EsprimKeyGenAlgIDsValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("esks")]
        public System.Nullable<GridNet.OneM2M.Types.EsprimKeyGenAlgID> EsprimKeyGenAlgIDs
        {
            get
            {
                return this.EsprimKeyGenAlgIDsValueSpecified ? this.EsprimKeyGenAlgIDsValue : default(GridNet.OneM2M.Types.EsprimKeyGenAlgID?);
            }
            set
            {
                this.EsprimKeyGenAlgIDsValue = value.GetValueOrDefault();
                this.EsprimKeyGenAlgIDsValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("espa")]
        [System.Xml.Serialization.XmlElementAttribute("espa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.EsprimProtocolAndAlgID> EsprimProtocolAndAlgIDs { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("esi", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("esi")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class E2ESecInfo
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("supportedE2ESecFeatures")]
        [System.Xml.Serialization.XmlElementAttribute("supportedE2ESecFeatures", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Suid> SupportedE2ESecFeatures { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("escert")]
        [System.Xml.Serialization.XmlElementAttribute("escert", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public System.Collections.Generic.ICollection<byte[]> Certificates { get; set; } = System.Array.Empty<System.Byte[]>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Certificates-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Certificates collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CertificatesSpecified => (this.Certificates.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esro")]
        [System.Xml.Serialization.XmlElementAttribute("esro", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ReceiverESPrimRandObject SharedReceiverESPrimRandObject { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tokenPermission", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("tokenPermission")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TokenPermission
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ris")]
        [System.Xml.Serialization.XmlElementAttribute("ris", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ResourceIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResourceIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ResourceIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResourceIDsSpecified => (this.ResourceIDs.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pv")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<AccessControlRule>), "acr")]
        [System.Xml.Serialization.XmlArrayAttribute("pv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("acr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<AccessControlRule> Privileges { get; set; } = System.Array.Empty<AccessControlRule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Privileges-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Privileges collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PrivilegesSpecified => (this.Privileges.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("rids")]
        [System.Xml.Serialization.XmlElementAttribute("rids", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> RoleIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RoleIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RoleIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RoleIDsSpecified => (this.RoleIDs.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tokenPermissions", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("tokenPermissions")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TokenPermissions
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pm")]
        [System.Xml.Serialization.XmlElementAttribute("pm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<TokenPermission> Permission { get; set; } = System.Array.Empty<TokenPermission>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Permission-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Permission collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PermissionSpecified => (this.Permission.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tokenClaimSet", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("tokenClaimSet")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TokenClaimSet
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("vr")]
        [System.Xml.Serialization.XmlElementAttribute("vr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("tkid")]
        [System.Xml.Serialization.XmlElementAttribute("tkid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TokenID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkhd")]
        [System.Xml.Serialization.XmlElementAttribute("tkhd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Holder { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkis")]
        [System.Xml.Serialization.XmlElementAttribute("tkis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Issuer { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tknb")]
        [System.Xml.Serialization.XmlElementAttribute("tknb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset NotBefore { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkna")]
        [System.Xml.Serialization.XmlElementAttribute("tkna", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset NotAfter { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tknm")]
        [System.Xml.Serialization.XmlElementAttribute("tknm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TokenName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkau")]
        [System.Xml.Serialization.XmlElementAttribute("tkau", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> Audience { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Audience-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Audience collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AudienceSpecified => (this.Audience.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkps")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<TokenPermission>), "pm")]
        [System.Xml.Serialization.XmlArrayAttribute("tkps", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("pm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<TokenPermission> Permissions { get; set; } = System.Array.Empty<TokenPermission>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Permissions-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Permissions collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PermissionsSpecified => (this.Permissions.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkex")]
        [System.Xml.Serialization.XmlElementAttribute("tkex", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Extension { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dynAuthLocalTokenIdAssignments", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dynAuthLocalTokenIdAssignments")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthLocalTokenIdAssignments
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ltia")]
        [System.Xml.Serialization.XmlElementAttribute("ltia", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<DynAuthLocalTokenIdAssignmentsLocalTokenIdAssignment> LocalTokenIdAssignment { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DynAuthLocalTokenIdAssignmentsLocalTokenIdAssignment", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("DynAuthLocalTokenIdAssignmentsLocalTokenIdAssignment")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthLocalTokenIdAssignmentsLocalTokenIdAssignment
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lti")]
        [System.Xml.Serialization.XmlElementAttribute("lti", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string LocalTokenID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("tkid")]
        [System.Xml.Serialization.XmlElementAttribute("tkid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TokenID { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dynAuthTokenSummary", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dynAuthTokenSummary")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthTokenSummary
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("tkid")]
        [System.Xml.Serialization.XmlElementAttribute("tkid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TokenID { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tknb")]
        [System.Xml.Serialization.XmlElementAttribute("tknb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset NotBefore { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkna")]
        [System.Xml.Serialization.XmlElementAttribute("tkna", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset NotAfter { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tknm")]
        [System.Xml.Serialization.XmlElementAttribute("tknm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TokenName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkau")]
        [System.Xml.Serialization.XmlElementAttribute("tkau", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> Audience { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Audience-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Audience collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AudienceSpecified => (this.Audience.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dynAuthTokenReqInfo", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dynAuthTokenReqInfo")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthTokenReqInfo
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dasi")]
        [System.Xml.Serialization.XmlElementAttribute("dasi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<DynAuthTokenReqInfoDasInfo> DasInfo { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DynAuthTokenReqInfoDasInfo", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("DynAuthTokenReqInfoDasInfo")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthTokenReqInfoDasInfo
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uri")]
        [System.Xml.Serialization.XmlElementAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URI { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("daq")]
        [System.Xml.Serialization.XmlElementAttribute("daq", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DynAuthDasRequest DasRequest { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sdr")]
        [System.Xml.Serialization.XmlElementAttribute("sdr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SecuredDasRequest { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dynAuthDasRequest", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dynAuthDasRequest")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthDasRequest
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Originator { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("trt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResourceType TargetedResourceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TargetedResourceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TargetedResourceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TargetedResourceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trt")]
        public System.Nullable<GridNet.OneM2M.Types.ResourceType> TargetedResourceType
        {
            get
            {
                return this.TargetedResourceTypeValueSpecified ? this.TargetedResourceTypeValue : default(GridNet.OneM2M.Types.ResourceType?);
            }
            set
            {
                this.TargetedResourceTypeValue = value.GetValueOrDefault();
                this.TargetedResourceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("op", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.Operation OperationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Operation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Operation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OperationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("op")]
        public System.Nullable<GridNet.OneM2M.Types.Operation> Operation
        {
            get
            {
                return this.OperationValueSpecified ? this.OperationValue : default(GridNet.OneM2M.Types.Operation?);
            }
            set
            {
                this.OperationValue = value.GetValueOrDefault();
                this.OperationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("oip")]
        [System.Xml.Serialization.XmlElementAttribute("oip", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DynAuthDasRequestOriginatorIP OriginatorIP { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("olo")]
        [System.Xml.Serialization.XmlElementAttribute("olo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LocationRegion OriginatorLocation { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("orid")]
        [System.Xml.Serialization.XmlElementAttribute("orid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> OriginatorRoleIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OriginatorRoleIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OriginatorRoleIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OriginatorRoleIDsSpecified => (this.OriginatorRoleIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rts")]
        [System.Xml.Serialization.XmlElementAttribute("rts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RequestTimestamp { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trid")]
        [System.Xml.Serialization.XmlElementAttribute("trid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string TargetedResourceID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ppl")]
        [System.Xml.Serialization.XmlElementAttribute("ppl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ProposedPrivilegesLifetime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("rfa")]
        [System.Xml.Serialization.XmlElementAttribute("rfa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> RoleIDsFromACPs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RoleIDsFromACPs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RoleIDsFromACPs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RoleIDsFromACPsSpecified => (this.RoleIDsFromACPs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("tids")]
        [System.Xml.Serialization.XmlElementAttribute("tids", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> TokenIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TokenIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TokenIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TokenIDsSpecified => (this.TokenIDs.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DynAuthDasRequestOriginatorIP", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("DynAuthDasRequestOriginatorIP")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthDasRequestOriginatorIP
    {
        
        /// <summary>
        /// <para>An IP version 4 address, with optional CIDR suffix in the range /0
        ///				... /32.</para>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])(/([0-9]|[1-2][0-9]|3[0-2]))?)|([0-9A-Fa-f]{8}(/([0-9]|[1-2][0-9]|3[0-2]))?).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])" +
            "\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9" +
            "])(/([0-9]|[1-2][0-9]|3[0-2]))?)|([0-9A-Fa-f]{8}(/([0-9]|[1-2][0-9]|3[0-2]))?)")]
        [Newtonsoft.Json.JsonPropertyAttribute("ip4")]
        [System.Xml.Serialization.XmlElementAttribute("ip4", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string Ipv4Address { get; set; }
        
        /// <summary>
        /// <para>An IP version 6 address, based on RFC 1884, with optional CIDR suffix
        ///				in the range /0 ... /128.</para>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(:(:[0-9A-Fa-f]{1,4}){1,7})|(([0-9A-Fa-f]{1,4}:){1,6}(:[0-9A-Fa-f]{1,4}){1}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,5}(:[0-9A-Fa-f]{1,4}){1,2}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,4}(:[0-9A-Fa-f]{1,4}){1,3}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,3}(:[0-9A-Fa-f]{1,4}){1,4}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,2}(:[0-9A-Fa-f]{1,4}){1,5}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1}(:[0-9A-Fa-f]{1,4}){1,6}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,7}:(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(((:(:0{1,4}){0,3}(:(0{1,4}|[fF]{4}))?)|(0{1,4}:(:0{1,4}){0,2}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){2}(:0{1,4})?(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){3}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){4}(0{1,4}|[fF]{4})?)):(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9]))|(::(/0)?).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(:(:[0-9A-Fa-f]{1,4}){1,7})|(([0-9A-Fa-f]{1,4}:){1,6}(:[0-9A-Fa-f]{1,4}){1}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,5}(:[0-9A-Fa-f]{1,4}){1,2}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,4}(:[0-9A-Fa-f]{1,4}){1,3}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,3}(:[0-9A-Fa-f]{1,4}){1,4}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,2}(:[0-9A-Fa-f]{1,4}){1,5}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1}(:[0-9A-Fa-f]{1,4}){1,6}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(([0-9A-Fa-f]{1,4}:){1,7}:(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?)|(((:(:0{1,4}){0,3}(:(0{1,4}|[fF]{4}))?)|(0{1,4}:(:0{1,4}){0,2}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){2}(:0{1,4})?(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){3}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){4}(0{1,4}|[fF]{4})?)):(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9]))|(::(/0)?)")]
        [Newtonsoft.Json.JsonPropertyAttribute("ip6")]
        [System.Xml.Serialization.XmlElementAttribute("ip6", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string Ipv6Address { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bop", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("bop")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackOffParameters
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("bops")]
        [System.Xml.Serialization.XmlElementAttribute("bops", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<BackOffParametersBackOffParametersSet> BackOffParametersSet { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("BackOffParametersBackOffParametersSet", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("BackOffParametersBackOffParametersSet")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackOffParametersBackOffParametersSet
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("nwa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.NetworkAction NetworkActionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NetworkAction-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NetworkAction property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NetworkActionValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("nwa")]
        public System.Nullable<GridNet.OneM2M.Types.NetworkAction> NetworkAction
        {
            get
            {
                return this.NetworkActionValueSpecified ? this.NetworkActionValue : default(GridNet.OneM2M.Types.NetworkAction?);
            }
            set
            {
                this.NetworkActionValue = value.GetValueOrDefault();
                this.NetworkActionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ibt")]
        [System.Xml.Serialization.XmlElementAttribute("ibt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long InitialBackoffTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("abt")]
        [System.Xml.Serialization.XmlElementAttribute("abt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long AdditionalBackoffTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mbt")]
        [System.Xml.Serialization.XmlElementAttribute("mbt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaximumBackoffTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rbt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long OptionalRandomBackoffTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OptionalRandomBackoffTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OptionalRandomBackoffTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OptionalRandomBackoffTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rbt")]
        public System.Nullable<long> OptionalRandomBackoffTime
        {
            get
            {
                return this.OptionalRandomBackoffTimeValueSpecified ? this.OptionalRandomBackoffTimeValue : default(long?);
            }
            set
            {
                this.OptionalRandomBackoffTimeValue = value.GetValueOrDefault();
                this.OptionalRandomBackoffTimeValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("listOfDataLinks", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("listOfDataLinks")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListOfDataLinks
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dle")]
        [System.Xml.Serialization.XmlElementAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<DataLink> DataLinkEntry { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dali", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dali")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataLink
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nm")]
        [System.Xml.Serialization.XmlElementAttribute("nm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Name { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dcid")]
        [System.Xml.Serialization.XmlElementAttribute("dcid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string DataContainerID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("atn")]
        [System.Xml.Serialization.XmlElementAttribute("atn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string AttributeName { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rce", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("rce")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_resource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AccessControlPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AccessControlPolicyAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ActiveCmdhPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AE))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AEAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnnounceableResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnnounceableSubordinateResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnnouncedMgmtResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnnouncedResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnnouncedSubordinateResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkDeviceInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkDeviceInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Battery))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.BatteryAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhBuffer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhDefaults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhDefEcValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhEcDefParamValues))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhLimits))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhNetworkAccessRules))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhNwAccessRule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Container))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ContainerAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ContentInstance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ContentInstanceAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CSEBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Delivery))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceCapability))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceCapabilityAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DynamicAuthorizationConsultation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventConfig))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventLog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventLogAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ExecInstance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Firmware))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.FirmwareAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Group))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.GroupAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.LocationPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.LocationPolicyAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.M2MServiceSubscriptionProfile))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Memory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.MemoryAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.MgmtCmd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MgmtResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Node))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.NodeAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.NotificationTargetMgmtPolicyRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.NotificationTargetPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.PolicyDeletionRules))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.PollingChannel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Reboot))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.RebootAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegularResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.RemoteCSE))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.RemoteCSEAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Request))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Role))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Schedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ScheduleAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SemanticDescriptor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SemanticDescriptorAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ServiceSubscribedAppRule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ServiceSubscribedNode))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Software))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SoftwareAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.StatsCollect))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.StatsConfig))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubordinateResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Subscription))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeriesAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeriesInstance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeriesInstanceAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Token))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TrafficPattern))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TrafficPatternAnnc))]
    public partial class Resource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResourceType ResourceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResourceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResourceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResourceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ty")]
        public System.Nullable<GridNet.OneM2M.Types.ResourceType> ResourceType
        {
            get
            {
                return this.ResourceTypeValueSpecified ? this.ResourceTypeValue : default(GridNet.OneM2M.Types.ResourceType?);
            }
            set
            {
                this.ResourceTypeValue = value.GetValueOrDefault();
                this.ResourceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ri")]
        [System.Xml.Serialization.XmlElementAttribute("ri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ResourceID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pi")]
        [System.Xml.Serialization.XmlElementAttribute("pi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ParentID { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ct")]
        [System.Xml.Serialization.XmlElementAttribute("ct", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset CreationTime { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lt")]
        [System.Xml.Serialization.XmlElementAttribute("lt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset LastModifiedTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lbl")]
        [System.Xml.Serialization.XmlElementAttribute("lbl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public System.Collections.Generic.ICollection<string> Labels { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Labels-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Labels collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LabelsSpecified => (this.Labels.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rn")]
        [System.Xml.Serialization.XmlAttributeAttribute("rn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string ResourceName { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("regularResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("regularResource")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_regularResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ActiveCmdhPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AE))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnnounceableResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkDeviceInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Battery))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhBuffer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhDefaults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhDefEcValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhEcDefParamValues))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhLimits))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhNetworkAccessRules))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhNwAccessRule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Container))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Delivery))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceCapability))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DynamicAuthorizationConsultation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventConfig))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventLog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ExecInstance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Firmware))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Group))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.LocationPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.M2MServiceSubscriptionProfile))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Memory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.MgmtCmd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MgmtResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Node))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.NotificationTargetMgmtPolicyRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.NotificationTargetPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.PolicyDeletionRules))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Reboot))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.RemoteCSE))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Request))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Role))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SemanticDescriptor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ServiceSubscribedAppRule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ServiceSubscribedNode))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Software))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.StatsCollect))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.StatsConfig))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Subscription))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Token))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TrafficPattern))]
    public partial class RegularResource : Resource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acpi")]
        [System.Xml.Serialization.XmlElementAttribute("acpi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AccessControlPolicyIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicyIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicyIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicyIDsSpecified => (this.AccessControlPolicyIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("et")]
        [System.Xml.Serialization.XmlElementAttribute("et", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpirationTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("daci")]
        [System.Xml.Serialization.XmlElementAttribute("daci", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> DynamicAuthorizationConsultationIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DynamicAuthorizationConsultationIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DynamicAuthorizationConsultationIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DynamicAuthorizationConsultationIDsSpecified => (this.DynamicAuthorizationConsultationIDs.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("announceableResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("announceableResource")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_announceableResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ActiveCmdhPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AE))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkDeviceInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Battery))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhBuffer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhDefaults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhDefEcValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhEcDefParamValues))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhLimits))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhNetworkAccessRules))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhNwAccessRule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Container))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceCapability))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventLog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Firmware))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Group))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.LocationPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Memory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MgmtResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Node))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Reboot))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.RemoteCSE))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SemanticDescriptor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Software))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TrafficPattern))]
    public partial class AnnounceableResource : RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("at")]
        [System.Xml.Serialization.XmlElementAttribute("at", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AnnounceTo { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnnounceTo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnnounceTo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnnounceToSpecified => (this.AnnounceTo.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aa")]
        [System.Xml.Serialization.XmlElementAttribute("aa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public System.Collections.Generic.ICollection<string> AnnouncedAttribute { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnnouncedAttribute-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnnouncedAttribute collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnnouncedAttributeSpecified => (this.AnnouncedAttribute.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("announcedResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("announcedResource")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_announcedResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AEAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnnouncedMgmtResource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkDeviceInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.BatteryAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ContainerAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceCapabilityAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventLogAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.FirmwareAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.GroupAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.LocationPolicyAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.MemoryAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.NodeAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.RebootAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.RemoteCSEAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SemanticDescriptorAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SoftwareAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeriesAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TrafficPatternAnnc))]
    public partial class AnnouncedResource : Resource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acpi")]
        [System.Xml.Serialization.XmlElementAttribute("acpi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AccessControlPolicyIDs { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("et")]
        [System.Xml.Serialization.XmlElementAttribute("et", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpirationTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lnk")]
        [System.Xml.Serialization.XmlElementAttribute("lnk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Link { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("daci")]
        [System.Xml.Serialization.XmlElementAttribute("daci", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> DynamicAuthorizationConsultationIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DynamicAuthorizationConsultationIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DynamicAuthorizationConsultationIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DynamicAuthorizationConsultationIDsSpecified => (this.DynamicAuthorizationConsultationIDs.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("announceableSubordinateResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("announceableSubordinateResource")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_announceableSubordinateResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AccessControlPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ContentInstance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Schedule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeriesInstance))]
    public partial class AnnounceableSubordinateResource : Resource
    {
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("et")]
        [System.Xml.Serialization.XmlElementAttribute("et", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpirationTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("at")]
        [System.Xml.Serialization.XmlElementAttribute("at", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AnnounceTo { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnnounceTo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnnounceTo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnnounceToSpecified => (this.AnnounceTo.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aa")]
        [System.Xml.Serialization.XmlElementAttribute("aa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public System.Collections.Generic.ICollection<string> AnnouncedAttribute { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnnouncedAttribute-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnnouncedAttribute collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnnouncedAttributeSpecified => (this.AnnouncedAttribute.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("subordinateResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("subordinateResource")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_subordinateResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.PollingChannel))]
    public partial class SubordinateResource : Resource
    {
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("et")]
        [System.Xml.Serialization.XmlElementAttribute("et", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpirationTime { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("announcedSubordinateResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("announcedSubordinateResource")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_announcedSubordinateResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AccessControlPolicyAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ContentInstanceAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ScheduleAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.TimeSeriesInstanceAnnc))]
    public partial class AnnouncedSubordinateResource : Resource
    {
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("et")]
        [System.Xml.Serialization.XmlElementAttribute("et", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpirationTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lnk")]
        [System.Xml.Serialization.XmlElementAttribute("lnk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Link { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mgRsc", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("mgRsc")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_mgmtResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.ActiveCmdhPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkDeviceInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Battery))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhBuffer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhDefaults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhDefEcValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhEcDefParamValues))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhLimits))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhNetworkAccessRules))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhNwAccessRule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.CmdhPolicy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceCapability))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventLog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Firmware))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Memory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Reboot))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.Software))]
    public partial class MgmtResource : AnnounceableResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mgd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MgmtDefinition MgmtDefinitionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MgmtDefinition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MgmtDefinition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MgmtDefinitionValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mgd")]
        public System.Nullable<GridNet.OneM2M.Types.MgmtDefinition> MgmtDefinition
        {
            get
            {
                return this.MgmtDefinitionValueSpecified ? this.MgmtDefinitionValue : default(GridNet.OneM2M.Types.MgmtDefinition?);
            }
            set
            {
                this.MgmtDefinitionValue = value.GetValueOrDefault();
                this.MgmtDefinitionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("obis")]
        [System.Xml.Serialization.XmlElementAttribute("obis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ObjectIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ObjectIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ObjectIDsSpecified => (this.ObjectIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("obps")]
        [System.Xml.Serialization.XmlElementAttribute("obps", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ObjectPaths { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectPaths-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ObjectPaths collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ObjectPathsSpecified => (this.ObjectPaths.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dc")]
        [System.Xml.Serialization.XmlElementAttribute("dc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Description { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mgoA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("mgoA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_announcedMgmtResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkDeviceInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AreaNwkInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.BatteryAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceCapabilityAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.DeviceInfoAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.EventLogAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.FirmwareAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.MemoryAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.RebootAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SoftwareAnnc))]
    public partial class AnnouncedMgmtResource : AnnouncedResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mgd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MgmtDefinition MgmtDefinitionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MgmtDefinition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MgmtDefinition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MgmtDefinitionValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mgd")]
        public System.Nullable<GridNet.OneM2M.Types.MgmtDefinition> MgmtDefinition
        {
            get
            {
                return this.MgmtDefinitionValueSpecified ? this.MgmtDefinitionValue : default(GridNet.OneM2M.Types.MgmtDefinition?);
            }
            set
            {
                this.MgmtDefinitionValue = value.GetValueOrDefault();
                this.MgmtDefinitionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("obis")]
        [System.Xml.Serialization.XmlElementAttribute("obis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ObjectIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ObjectIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ObjectIDsSpecified => (this.ObjectIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("obps")]
        [System.Xml.Serialization.XmlElementAttribute("obps", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ObjectPaths { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ObjectPaths-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ObjectPaths collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ObjectPathsSpecified => (this.ObjectPaths.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dc")]
        [System.Xml.Serialization.XmlElementAttribute("dc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Description { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("flexContainerResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("flexContainerResource")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_flexContainerResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynApp))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynInterface))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynMethod))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynMethodCall))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynSvcObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.GenericInterworkingOperationInstance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.GenericInterworkingService))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SvcFwWrapper))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SvcObjWrapper))]
    public partial class FlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResourceType ResourceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResourceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResourceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResourceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ty")]
        public System.Nullable<GridNet.OneM2M.Types.ResourceType> ResourceType
        {
            get
            {
                return this.ResourceTypeValueSpecified ? this.ResourceTypeValue : default(GridNet.OneM2M.Types.ResourceType?);
            }
            set
            {
                this.ResourceTypeValue = value.GetValueOrDefault();
                this.ResourceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ri")]
        [System.Xml.Serialization.XmlElementAttribute("ri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ResourceID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pi")]
        [System.Xml.Serialization.XmlElementAttribute("pi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ParentID { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ct", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset CreationTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CreationTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreationTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CreationTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ct")]
        public System.Nullable<System.DateTimeOffset> CreationTime
        {
            get
            {
                return this.CreationTimeValueSpecified ? this.CreationTimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.CreationTimeValue = value.GetValueOrDefault();
                this.CreationTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset LastModifiedTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastModifiedTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastModifiedTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LastModifiedTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lt")]
        public System.Nullable<System.DateTimeOffset> LastModifiedTime
        {
            get
            {
                return this.LastModifiedTimeValueSpecified ? this.LastModifiedTimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.LastModifiedTimeValue = value.GetValueOrDefault();
                this.LastModifiedTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lbl")]
        [System.Xml.Serialization.XmlElementAttribute("lbl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public System.Collections.Generic.ICollection<string> Labels { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Labels-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Labels collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LabelsSpecified => (this.Labels.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acpi")]
        [System.Xml.Serialization.XmlElementAttribute("acpi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AccessControlPolicyIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicyIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicyIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicyIDsSpecified => (this.AccessControlPolicyIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("et", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpirationTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExpirationTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExpirationTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("et")]
        public System.Nullable<System.DateTimeOffset> ExpirationTime
        {
            get
            {
                return this.ExpirationTimeValueSpecified ? this.ExpirationTimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ExpirationTimeValue = value.GetValueOrDefault();
                this.ExpirationTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("daci")]
        [System.Xml.Serialization.XmlElementAttribute("daci", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> DynamicAuthorizationConsultationIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DynamicAuthorizationConsultationIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DynamicAuthorizationConsultationIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DynamicAuthorizationConsultationIDsSpecified => (this.DynamicAuthorizationConsultationIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("at")]
        [System.Xml.Serialization.XmlElementAttribute("at", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AnnounceTo { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnnounceTo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnnounceTo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnnounceToSpecified => (this.AnnounceTo.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aa")]
        [System.Xml.Serialization.XmlElementAttribute("aa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public System.Collections.Generic.ICollection<string> AnnouncedAttribute { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AnnouncedAttribute-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AnnouncedAttribute collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AnnouncedAttributeSpecified => (this.AnnouncedAttribute.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTag { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnd")]
        [System.Xml.Serialization.XmlElementAttribute("cnd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ContainerDefinition { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rn")]
        [System.Xml.Serialization.XmlAttributeAttribute("rn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string ResourceName { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-commonTypes-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("announcedFlexContainerResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("announcedFlexContainerResource")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("sg_announcedFlexContainerResource", Namespace="http://www.onem2m.org/xml/protocols")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynAppAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynInterfaceAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynMethodAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynMethodCallAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynPropertyAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.AllJoynSvcObjectAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.GenericInterworkingOperationInstanceAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.GenericInterworkingServiceAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SvcFwWrapperAnnc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridNet.OneM2M.Types.SvcObjWrapperAnnc))]
    public partial class AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResourceType ResourceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResourceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResourceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResourceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ty")]
        public System.Nullable<GridNet.OneM2M.Types.ResourceType> ResourceType
        {
            get
            {
                return this.ResourceTypeValueSpecified ? this.ResourceTypeValue : default(GridNet.OneM2M.Types.ResourceType?);
            }
            set
            {
                this.ResourceTypeValue = value.GetValueOrDefault();
                this.ResourceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ri")]
        [System.Xml.Serialization.XmlElementAttribute("ri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ResourceID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pi")]
        [System.Xml.Serialization.XmlElementAttribute("pi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ParentID { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ct", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset CreationTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CreationTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreationTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CreationTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ct")]
        public System.Nullable<System.DateTimeOffset> CreationTime
        {
            get
            {
                return this.CreationTimeValueSpecified ? this.CreationTimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.CreationTimeValue = value.GetValueOrDefault();
                this.CreationTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset LastModifiedTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastModifiedTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastModifiedTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LastModifiedTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lt")]
        public System.Nullable<System.DateTimeOffset> LastModifiedTime
        {
            get
            {
                return this.LastModifiedTimeValueSpecified ? this.LastModifiedTimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.LastModifiedTimeValue = value.GetValueOrDefault();
                this.LastModifiedTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lbl")]
        [System.Xml.Serialization.XmlElementAttribute("lbl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public System.Collections.Generic.ICollection<string> Labels { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Labels-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Labels collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LabelsSpecified => (this.Labels.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acpi")]
        [System.Xml.Serialization.XmlElementAttribute("acpi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AccessControlPolicyIDs { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("et", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpirationTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExpirationTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExpirationTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("et")]
        public System.Nullable<System.DateTimeOffset> ExpirationTime
        {
            get
            {
                return this.ExpirationTimeValueSpecified ? this.ExpirationTimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ExpirationTimeValue = value.GetValueOrDefault();
                this.ExpirationTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lnk")]
        [System.Xml.Serialization.XmlElementAttribute("lnk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Link { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("daci")]
        [System.Xml.Serialization.XmlElementAttribute("daci", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> DynamicAuthorizationConsultationIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DynamicAuthorizationConsultationIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DynamicAuthorizationConsultationIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DynamicAuthorizationConsultationIDsSpecified => (this.DynamicAuthorizationConsultationIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StateTag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateTag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StateTagValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        public System.Nullable<long> StateTag
        {
            get
            {
                return this.StateTagValueSpecified ? this.StateTagValue : default(long?);
            }
            set
            {
                this.StateTagValue = value.GetValueOrDefault();
                this.StateTagValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnd")]
        [System.Xml.Serialization.XmlElementAttribute("cnd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ContainerDefinition { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rn")]
        [System.Xml.Serialization.XmlAttributeAttribute("rn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public string ResourceName { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-subscription-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-subscription-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("enc", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("enc")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EventNotificationCriteria
    {
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("crb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset CreatedBeforeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CreatedBefore-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedBefore property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CreatedBeforeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("crb")]
        public System.Nullable<System.DateTimeOffset> CreatedBefore
        {
            get
            {
                return this.CreatedBeforeValueSpecified ? this.CreatedBeforeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.CreatedBeforeValue = value.GetValueOrDefault();
                this.CreatedBeforeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cra", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset CreatedAfterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CreatedAfter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CreatedAfter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CreatedAfterValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cra")]
        public System.Nullable<System.DateTimeOffset> CreatedAfter
        {
            get
            {
                return this.CreatedAfterValueSpecified ? this.CreatedAfterValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.CreatedAfterValue = value.GetValueOrDefault();
                this.CreatedAfterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ms", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ModifiedSinceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ModifiedSince-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ModifiedSince property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ModifiedSinceValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ms")]
        public System.Nullable<System.DateTimeOffset> ModifiedSince
        {
            get
            {
                return this.ModifiedSinceValueSpecified ? this.ModifiedSinceValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ModifiedSinceValue = value.GetValueOrDefault();
                this.ModifiedSinceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("us", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset UnmodifiedSinceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UnmodifiedSince-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UnmodifiedSince property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool UnmodifiedSinceValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("us")]
        public System.Nullable<System.DateTimeOffset> UnmodifiedSince
        {
            get
            {
                return this.UnmodifiedSinceValueSpecified ? this.UnmodifiedSinceValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.UnmodifiedSinceValue = value.GetValueOrDefault();
                this.UnmodifiedSinceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTagSmallerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StateTagSmaller-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateTagSmaller property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StateTagSmallerValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sts")]
        public System.Nullable<long> StateTagSmaller
        {
            get
            {
                return this.StateTagSmallerValueSpecified ? this.StateTagSmallerValue : default(long?);
            }
            set
            {
                this.StateTagSmallerValue = value.GetValueOrDefault();
                this.StateTagSmallerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("stb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTagBiggerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StateTagBigger-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateTagBigger property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StateTagBiggerValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stb")]
        public System.Nullable<long> StateTagBigger
        {
            get
            {
                return this.StateTagBiggerValueSpecified ? this.StateTagBiggerValue : default(long?);
            }
            set
            {
                this.StateTagBiggerValue = value.GetValueOrDefault();
                this.StateTagBiggerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpireBeforeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExpireBefore-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpireBefore property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExpireBeforeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exb")]
        public System.Nullable<System.DateTimeOffset> ExpireBefore
        {
            get
            {
                return this.ExpireBeforeValueSpecified ? this.ExpireBeforeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ExpireBeforeValue = value.GetValueOrDefault();
                this.ExpireBeforeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ExpireAfterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExpireAfter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpireAfter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExpireAfterValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exa")]
        public System.Nullable<System.DateTimeOffset> ExpireAfter
        {
            get
            {
                return this.ExpireAfterValueSpecified ? this.ExpireAfterValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ExpireAfterValue = value.GetValueOrDefault();
                this.ExpireAfterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sza", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SizeAboveValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SizeAbove-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SizeAbove property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SizeAboveValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sza")]
        public System.Nullable<long> SizeAbove
        {
            get
            {
                return this.SizeAboveValueSpecified ? this.SizeAboveValue : default(long?);
            }
            set
            {
                this.SizeAboveValue = value.GetValueOrDefault();
                this.SizeAboveValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("szb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SizeBelowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SizeBelow-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SizeBelow property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SizeBelowValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("szb")]
        public System.Nullable<long> SizeBelow
        {
            get
            {
                return this.SizeBelowValueSpecified ? this.SizeBelowValue : default(long?);
            }
            set
            {
                this.SizeBelowValue = value.GetValueOrDefault();
                this.SizeBelowValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("om")]
        [System.Xml.Serialization.XmlElementAttribute("om", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Operation> OperationMonitor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Operation>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OperationMonitor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OperationMonitor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OperationMonitorSpecified => (this.OperationMonitor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("atr")]
        [System.Xml.Serialization.XmlElementAttribute("atr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Attribute> Attribute { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Attribute>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Attribute-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Attribute collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AttributeSpecified => (this.Attribute.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("net")]
        [System.Xml.Serialization.XmlElementAttribute("net", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.NotificationEventType> NotificationEventType { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.NotificationEventType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NotificationEventType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NotificationEventType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NotificationEventTypeSpecified => (this.NotificationEventType.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("md")]
        [System.Xml.Serialization.XmlElementAttribute("md", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MissingData MissingData { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-subscription-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-subscription-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bn", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("bn")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchNotify
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("num")]
        [System.Xml.Serialization.XmlElementAttribute("num", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long Number { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dur")]
        [System.Xml.Serialization.XmlElementAttribute("dur", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public System.TimeSpan Duration { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-subscription-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-subscription-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rl", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("rl")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RateLimit
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mnn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxNrOfNotifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxNrOfNotify-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxNrOfNotify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxNrOfNotifyValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mnn")]
        public System.Nullable<long> MaxNrOfNotify
        {
            get
            {
                return this.MaxNrOfNotifyValueSpecified ? this.MaxNrOfNotifyValue : default(long?);
            }
            set
            {
                this.MaxNrOfNotifyValue = value.GetValueOrDefault();
                this.MaxNrOfNotifyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("tww", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public System.TimeSpan TimeWindowValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeWindow-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TimeWindow property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeWindowValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("tww")]
        public System.Nullable<System.TimeSpan> TimeWindow
        {
            get
            {
                return this.TimeWindowValueSpecified ? this.TimeWindowValue : default(System.TimeSpan?);
            }
            set
            {
                this.TimeWindowValue = value.GetValueOrDefault();
                this.TimeWindowValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-responsePrimitive-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-responsePrimitive-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("resourceWrapper", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("resourceWrapper")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("resource", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ResourceWrapper
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_resource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_resource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.Resource Sg_Resource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_regularResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_regularResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.RegularResource Sg_RegularResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announcedResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announcedResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AnnouncedResource Sg_AnnouncedResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announceableResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announceableResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AnnounceableResource Sg_AnnounceableResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_subordinateResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_subordinateResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.SubordinateResource Sg_SubordinateResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announcedSubordinateResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announcedSubordinateResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AnnouncedSubordinateResource Sg_AnnouncedSubordinateResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announceableSubordinateResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announceableSubordinateResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AnnounceableSubordinateResource Sg_AnnounceableSubordinateResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_mgmtResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_mgmtResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MgmtResource Sg_MgmtResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announcedMgmtResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announcedMgmtResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AnnouncedMgmtResource Sg_AnnouncedMgmtResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_flexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_flexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.FlexContainerResource Sg_FlexContainerResource { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announcedFlexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announcedFlexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AnnouncedFlexContainerResource Sg_AnnouncedFlexContainerResource { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uri")]
        [System.Xml.Serialization.XmlElementAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URI { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-responsePrimitive-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-responsePrimitive-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("agr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("agr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("aggregatedResponse", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AggregatedResponse
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ri")]
        [System.Xml.Serialization.XmlElementAttribute("ri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ResourceID { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rsp")]
        [System.Xml.Serialization.XmlElementAttribute("rsp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<ResponsePrimitive> ResponsePrimitive { get; set; } = System.Array.Empty<ResponsePrimitive>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResponsePrimitive-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ResponsePrimitive collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResponsePrimitiveSpecified => (this.ResponsePrimitive.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-responsePrimitive-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-responsePrimitive-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rsp", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("rsp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("responsePrimitive", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ResponsePrimitive
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rsc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResponseStatusCode ResponseStatusCodeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResponseStatusCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResponseStatusCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResponseStatusCodeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rsc")]
        public System.Nullable<GridNet.OneM2M.Types.ResponseStatusCode> ResponseStatusCode
        {
            get
            {
                return this.ResponseStatusCodeValueSpecified ? this.ResponseStatusCodeValue : default(GridNet.OneM2M.Types.ResponseStatusCode?);
            }
            set
            {
                this.ResponseStatusCodeValue = value.GetValueOrDefault();
                this.ResponseStatusCodeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rqi")]
        [System.Xml.Serialization.XmlElementAttribute("rqi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string RequestIdentifier { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pc")]
        [System.Xml.Serialization.XmlElementAttribute("pc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.PrimitiveContent PrimitiveContent { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("to")]
        [System.Xml.Serialization.XmlElementAttribute("to", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string To { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fr")]
        [System.Xml.Serialization.XmlElementAttribute("fr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string From { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ot", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset OriginatingTimestampValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OriginatingTimestamp-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginatingTimestamp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OriginatingTimestampValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ot")]
        public System.Nullable<System.DateTimeOffset> OriginatingTimestamp
        {
            get
            {
                return this.OriginatingTimestampValueSpecified ? this.OriginatingTimestampValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.OriginatingTimestampValue = value.GetValueOrDefault();
                this.OriginatingTimestampValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rset")]
        [System.Xml.Serialization.XmlElementAttribute("rset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ResultExpirationTimestamp { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ec")]
        [System.Xml.Serialization.XmlElementAttribute("ec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EventCategory { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cnst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ContentStatus ContentStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContentStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cnst")]
        public System.Nullable<GridNet.OneM2M.Types.ContentStatus> ContentStatus
        {
            get
            {
                return this.ContentStatusValueSpecified ? this.ContentStatusValue : default(GridNet.OneM2M.Types.ContentStatus?);
            }
            set
            {
                this.ContentStatusValue = value.GetValueOrDefault();
                this.ContentStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cnot", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long ContentOffsetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentOffset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContentOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentOffsetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cnot")]
        public System.Nullable<long> ContentOffset
        {
            get
            {
                return this.ContentOffsetValueSpecified ? this.ContentOffsetValue : default(long?);
            }
            set
            {
                this.ContentOffsetValue = value.GetValueOrDefault();
                this.ContentOffsetValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ati")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DynAuthLocalTokenIdAssignmentsLocalTokenIdAssignment>), "ltia")]
        [System.Xml.Serialization.XmlArrayAttribute("ati", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ltia", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DynAuthLocalTokenIdAssignmentsLocalTokenIdAssignment> AssignedTokenIdentifiers { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DynAuthLocalTokenIdAssignmentsLocalTokenIdAssignment>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AssignedTokenIdentifiers-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AssignedTokenIdentifiers collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AssignedTokenIdentifiersSpecified => (this.AssignedTokenIdentifiers.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tokenReqInfo")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DynAuthTokenReqInfoDasInfo>), "dasi")]
        [System.Xml.Serialization.XmlArrayAttribute("tokenReqInfo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dasi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DynAuthTokenReqInfoDasInfo> TokenReqInfo { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DynAuthTokenReqInfoDasInfo>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TokenReqInfo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TokenReqInfo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TokenReqInfoSpecified => (this.TokenReqInfo.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-responsePrimitive-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-responsePrimitive-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("listOfChildResourceRef", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("listOfChildResourceRef")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("resourceRefList", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ListOfChildResourceRef
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("agn", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("agn")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("aggregatedNotification", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AggregatedNotification
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sgn")]
        [System.Xml.Serialization.XmlElementAttribute("sgn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<Notification> Notification { get; set; } = System.Array.Empty<Notification>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Notification-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Notification collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NotificationSpecified => (this.Notification.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sgn", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("sgn")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("notification", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Notification
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nev")]
        [System.Xml.Serialization.XmlElementAttribute("nev", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public NotificationNotificationEvent NotificationEvent { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("vrq", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool VerificationRequestValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die VerificationRequest-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the VerificationRequest property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool VerificationRequestValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("vrq")]
        public System.Nullable<bool> VerificationRequest
        {
            get
            {
                return this.VerificationRequestValueSpecified ? this.VerificationRequestValue : default(bool?);
            }
            set
            {
                this.VerificationRequestValue = value.GetValueOrDefault();
                this.VerificationRequestValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sud", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool SubscriptionDeletionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SubscriptionDeletion-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SubscriptionDeletion property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionDeletionValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sud")]
        public System.Nullable<bool> SubscriptionDeletion
        {
            get
            {
                return this.SubscriptionDeletionValueSpecified ? this.SubscriptionDeletionValue : default(bool?);
            }
            set
            {
                this.SubscriptionDeletionValue = value.GetValueOrDefault();
                this.SubscriptionDeletionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sur")]
        [System.Xml.Serialization.XmlElementAttribute("sur", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string SubscriptionReference { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nfu")]
        [System.Xml.Serialization.XmlElementAttribute("nfu", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string NotificationForwardingURI { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("idr")]
        [System.Xml.Serialization.XmlElementAttribute("idr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public NotificationIPEDiscoveryRequest IPEDiscoveryRequest { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NotificationNotificationEvent", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("NotificationNotificationEvent")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotificationNotificationEvent
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rep")]
        [System.Xml.Serialization.XmlElementAttribute("rep", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object Representation { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("om")]
        [System.Xml.Serialization.XmlElementAttribute("om", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public NotificationNotificationEventOperationMonitor OperationMonitor { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("net")]
        [System.Xml.Serialization.XmlElementAttribute("net", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.NotificationEventType> NotificationEventType { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.NotificationEventType>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NotificationEventType-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NotificationEventType collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NotificationEventTypeSpecified => (this.NotificationEventType.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NotificationNotificationEventOperationMonitor", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("NotificationNotificationEventOperationMonitor")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotificationNotificationEventOperationMonitor
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("op", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.Operation OperationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Operation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Operation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OperationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("op")]
        public System.Nullable<GridNet.OneM2M.Types.Operation> Operation
        {
            get
            {
                return this.OperationValueSpecified ? this.OperationValue : default(GridNet.OneM2M.Types.Operation?);
            }
            set
            {
                this.OperationValue = value.GetValueOrDefault();
                this.OperationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Originator { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("NotificationIPEDiscoveryRequest", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("NotificationIPEDiscoveryRequest")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotificationIPEDiscoveryRequest
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Originator { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fc")]
        [System.Xml.Serialization.XmlElementAttribute("fc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.FilterCriteria FilterCriteria { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("seci", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("seci")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("securityInfo", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class SecurityInfo
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SecurityInfoType SecurityInfoTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SecurityInfoType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecurityInfoType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SecurityInfoTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sit")]
        public System.Nullable<SecurityInfoType> SecurityInfoType
        {
            get
            {
                return this.SecurityInfoTypeValueSpecified ? this.SecurityInfoTypeValue : default(SecurityInfoType?);
            }
            set
            {
                this.SecurityInfoTypeValue = value.GetValueOrDefault();
                this.SecurityInfoTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("daq")]
        [System.Xml.Serialization.XmlElementAttribute("daq", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.DynAuthDasRequest DasRequest { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dres")]
        [System.Xml.Serialization.XmlElementAttribute("dres", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DynAuthDasResponse DasResponse { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ero")]
        [System.Xml.Serialization.XmlElementAttribute("ero", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ReceiverESPrimRandObject EsprimRandObject { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\-_=]+)\.([a-zA-Z0-9\-_=]*)\.([a-zA-Z0-9\-_=]*)\.([a-zA-Z0-9\-_=]*)\.([A-Za-z0-9\-_=])+.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\-_=]+)\\.([a-zA-Z0-9\\-_=]*)\\.([a-zA-Z0-9\\-_=]*)\\.([a-zA-Z0-9\\-_=]*)\\.(" +
            "[A-Za-z0-9\\-_=])+")]
        [Newtonsoft.Json.JsonPropertyAttribute("epo")]
        [System.Xml.Serialization.XmlElementAttribute("epo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string EsprimObject { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("eckm")]
        [System.Xml.Serialization.XmlElementAttribute("eckm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] EscertkeMessage { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sit", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum SecurityInfoType
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        DynamicAuthorizationRequest = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        DynamicAuthorizationResponse = 2,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        ReceiverE2eRandObjectRequest = 3,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        ReceiverE2eRandObjectResponse = 4,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        EsprimObject = 5,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        EscertkeMessage = 6,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dynAuthDasResponse", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dynAuthDasResponse")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthDasResponse
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dai")]
        [System.Xml.Serialization.XmlElementAttribute("dai", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public DynAuthDasResponseDynamicACPInfo DynamicACPInfo { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkns")]
        [System.Xml.Serialization.XmlElementAttribute("tkns", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<string> Tokens { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tokens-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Tokens collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TokensSpecified => (this.Tokens.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notification-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notification-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DynAuthDasResponseDynamicACPInfo", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("DynAuthDasResponseDynamicACPInfo")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DynAuthDasResponseDynamicACPInfo
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gp")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<AccessControlRule>), "acr")]
        [System.Xml.Serialization.XmlArrayAttribute("gp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("acr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlRule> GrantedPrivileges { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlRule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GrantedPrivileges-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GrantedPrivileges collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GrantedPrivilegesSpecified => (this.GrantedPrivileges.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pl")]
        [System.Xml.Serialization.XmlElementAttribute("pl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PrivilegesLifetime { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/_extensions.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/_extensions.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("responseContent", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("responseContent")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResponseContent : GridNet.OneM2M.Types.PrimitiveContent
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rce")]
        [System.Xml.Serialization.XmlElementAttribute("rce", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResourceWrapper Resource { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uril")]
        [System.Xml.Serialization.XmlElementAttribute("uril", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> URIList { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die URIList-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the URIList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool URIListSpecified => (this.URIList.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uri")]
        [System.Xml.Serialization.XmlElementAttribute("uri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URI { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("agr")]
        [System.Xml.Serialization.XmlElementAttribute("agr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AggregatedResponse AggregatedResponse { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rrl")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<ChildResourceRef>), "ch")]
        [System.Xml.Serialization.XmlArrayAttribute("rrl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ResourceRefList { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResourceRefList-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ResourceRefList collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResourceRefListSpecified => (this.ResourceRefList.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dbg")]
        [System.Xml.Serialization.XmlElementAttribute("dbg", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DebugInfo { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-schedule-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-schedule-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sch", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("sch")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("schedule", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Schedule : GridNet.OneM2M.Types.AnnounceableSubordinateResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: (([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*)).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*))")]
        [Newtonsoft.Json.JsonPropertyAttribute("se")]
        [System.Xml.Serialization.XmlArrayAttribute("se", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("sce", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> ScheduleElement { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<Subscription> Subscription { get; set; } = System.Array.Empty<Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-schedule-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-schedule-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sub", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("sub")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("subscription", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Subscription : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("enc")]
        [System.Xml.Serialization.XmlElementAttribute("enc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.EventNotificationCriteria EventNotificationCriteria { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long ExpirationCounterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExpirationCounter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExpirationCounter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExpirationCounterValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exc")]
        public System.Nullable<long> ExpirationCounter
        {
            get
            {
                return this.ExpirationCounterValueSpecified ? this.ExpirationCounterValue : default(long?);
            }
            set
            {
                this.ExpirationCounterValue = value.GetValueOrDefault();
                this.ExpirationCounterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nu")]
        [System.Xml.Serialization.XmlElementAttribute("nu", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> NotificationURI { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gpi")]
        [System.Xml.Serialization.XmlElementAttribute("gpi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string GroupID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nfu")]
        [System.Xml.Serialization.XmlElementAttribute("nfu", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string NotificationForwardingURI { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("bn")]
        [System.Xml.Serialization.XmlElementAttribute("bn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.BatchNotify BatchNotify { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rl")]
        [System.Xml.Serialization.XmlElementAttribute("rl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.RateLimit RateLimit { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("psn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long PreSubscriptionNotifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PreSubscriptionNotify-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PreSubscriptionNotify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PreSubscriptionNotifyValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("psn")]
        public System.Nullable<long> PreSubscriptionNotify
        {
            get
            {
                return this.PreSubscriptionNotifyValueSpecified ? this.PreSubscriptionNotifyValue : default(long?);
            }
            set
            {
                this.PreSubscriptionNotifyValue = value.GetValueOrDefault();
                this.PreSubscriptionNotifyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.PendingNotification PendingNotificationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PendingNotification-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PendingNotification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PendingNotificationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pn")]
        public System.Nullable<GridNet.OneM2M.Types.PendingNotification> PendingNotification
        {
            get
            {
                return this.PendingNotificationValueSpecified ? this.PendingNotificationValue : default(GridNet.OneM2M.Types.PendingNotification?);
            }
            set
            {
                this.PendingNotificationValue = value.GetValueOrDefault();
                this.PendingNotificationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("nsp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long NotificationStoragePriorityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NotificationStoragePriority-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NotificationStoragePriority property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NotificationStoragePriorityValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("nsp")]
        public System.Nullable<long> NotificationStoragePriority
        {
            get
            {
                return this.NotificationStoragePriorityValueSpecified ? this.NotificationStoragePriorityValue : default(long?);
            }
            set
            {
                this.NotificationStoragePriorityValue = value.GetValueOrDefault();
                this.NotificationStoragePriorityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ln", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool LatestNotifyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LatestNotify-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LatestNotify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LatestNotifyValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ln")]
        public System.Nullable<bool> LatestNotify
        {
            get
            {
                return this.LatestNotifyValueSpecified ? this.LatestNotifyValue : default(bool?);
            }
            set
            {
                this.LatestNotifyValue = value.GetValueOrDefault();
                this.LatestNotifyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("nct", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.NotificationContentType NotificationContentTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NotificationContentType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NotificationContentType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NotificationContentTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("nct")]
        public System.Nullable<GridNet.OneM2M.Types.NotificationContentType> NotificationContentType
        {
            get
            {
                return this.NotificationContentTypeValueSpecified ? this.NotificationContentTypeValue : default(GridNet.OneM2M.Types.NotificationContentType?);
            }
            set
            {
                this.NotificationContentTypeValue = value.GetValueOrDefault();
                this.NotificationContentTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nec")]
        [System.Xml.Serialization.XmlElementAttribute("nec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string NotificationEventCat { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("su")]
        [System.Xml.Serialization.XmlElementAttribute("su", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string SubscriberURI { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sch")]
        [System.Xml.Serialization.XmlElementAttribute("sch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<Schedule> Schedule { get; set; } = System.Array.Empty<Schedule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Schedule-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Schedule collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleSpecified => (this.Schedule.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ntpr")]
        [System.Xml.Serialization.XmlElementAttribute("ntpr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<NotificationTargetMgmtPolicyRef> NotificationTargetMgmtPolicyRef { get; set; } = System.Array.Empty<NotificationTargetMgmtPolicyRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NotificationTargetMgmtPolicyRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NotificationTargetMgmtPolicyRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NotificationTargetMgmtPolicyRefSpecified => (this.NotificationTargetMgmtPolicyRef.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-schedule-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-schedule-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ntpr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ntpr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("notificationTargetMgmtPolicyRef", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class NotificationTargetMgmtPolicyRef : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ntu")]
        [System.Xml.Serialization.XmlElementAttribute("ntu", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> NotificationTargetURI { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NotificationTargetURI-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NotificationTargetURI collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NotificationTargetURISpecified => (this.NotificationTargetURI.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("npi")]
        [System.Xml.Serialization.XmlElementAttribute("npi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string NotificationlPolicyID { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<Subscription> Subscription { get; set; } = System.Array.Empty<Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-schedule-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-schedule-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("schA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("schA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("scheduleAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ScheduleAnnc : GridNet.OneM2M.Types.AnnouncedSubordinateResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: (([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*)).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*))")]
        [Newtonsoft.Json.JsonPropertyAttribute("se")]
        [System.Xml.Serialization.XmlArrayAttribute("se", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("sce", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> ScheduleElement { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ScheduleElement-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ScheduleElement collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleElementSpecified => (this.ScheduleElement.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-accessControlPolicy-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-accessControlPolicy-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("acp", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("acp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("accessControlPolicy", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AccessControlPolicy : GridNet.OneM2M.Types.AnnounceableSubordinateResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pv")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<AccessControlRule>), "acr")]
        [System.Xml.Serialization.XmlArrayAttribute("pv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("acr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlRule> Privileges { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pvs")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<AccessControlRule>), "acr")]
        [System.Xml.Serialization.XmlArrayAttribute("pvs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("acr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlRule> SelfPrivileges { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-accessControlPolicy-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-accessControlPolicy-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("acpA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("acpA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("accessControlPolicyAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AccessControlPolicyAnnc : GridNet.OneM2M.Types.AnnouncedSubordinateResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pv")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<AccessControlRule>), "acr")]
        [System.Xml.Serialization.XmlArrayAttribute("pv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("acr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlRule> Privileges { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pvs")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<AccessControlRule>), "acr")]
        [System.Xml.Serialization.XmlArrayAttribute("pvs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("acr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlRule> SelfPrivileges { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-activeCmdhPolicy-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-activeCmdhPolicy-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("acmp", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("acmp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("activeCmdhPolicy", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ActiveCmdhPolicy : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acmlk")]
        [System.Xml.Serialization.XmlElementAttribute("acmlk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string ActiveCmdhPolicyLink { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-semanticDescriptor-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-semanticDescriptor-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("smd", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("smd")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("semanticDescriptor", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class SemanticDescriptor : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: application\/rdf\+xml\:1.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("application\\/rdf\\+xml\\:1")]
        [Newtonsoft.Json.JsonPropertyAttribute("dcrp")]
        [System.Xml.Serialization.XmlElementAttribute("dcrp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DescriptorRepresentation { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("soe")]
        [System.Xml.Serialization.XmlElementAttribute("soe", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string SemanticOpExec { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dsp")]
        [System.Xml.Serialization.XmlElementAttribute("dsp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] Descriptor { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rels")]
        [System.Xml.Serialization.XmlElementAttribute("rels", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> RelatedSemantics { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelatedSemantics-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RelatedSemantics collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RelatedSemanticsSpecified => (this.RelatedSemantics.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-semanticDescriptor-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-semanticDescriptor-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("smdA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("smdA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("semanticDescriptorAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class SemanticDescriptorAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: application\/rdf\+xml\:1.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("application\\/rdf\\+xml\\:1")]
        [Newtonsoft.Json.JsonPropertyAttribute("dcrp")]
        [System.Xml.Serialization.XmlElementAttribute("dcrp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DescriptorRepresentation { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("soe")]
        [System.Xml.Serialization.XmlElementAttribute("soe", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string SemanticOpExec { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dsp")]
        [System.Xml.Serialization.XmlElementAttribute("dsp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] Descriptor { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rels")]
        [System.Xml.Serialization.XmlElementAttribute("rels", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> RelatedSemantics { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelatedSemantics-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RelatedSemantics collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RelatedSemanticsSpecified => (this.RelatedSemantics.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-contentInstance-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-contentInstance-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cin", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cin")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("contentInstance", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ContentInstance : GridNet.OneM2M.Types.AnnounceableSubordinateResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTag { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([\w/!#$^_.+&\-]+(:[0-2])?)|([\w/!#$^_.+&\-]+((:[0-2])?)+((:[0-5])?)).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([\\w/!#$^_.+&\\-]+(:[0-2])?)|([\\w/!#$^_.+&\\-]+((:[0-2])?)+((:[0-5])?))")]
        [Newtonsoft.Json.JsonPropertyAttribute("cnf")]
        [System.Xml.Serialization.XmlElementAttribute("cnf", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ContentInfo { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cs")]
        [System.Xml.Serialization.XmlElementAttribute("cs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long ContentSize { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("conr")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<ContentRefURIReference>), "urir")]
        [System.Xml.Serialization.XmlArrayAttribute("conr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("urir", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ContentRefURIReference> ContentRef { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ContentRefURIReference>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContentRef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentRefSpecified => (this.ContentRef.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("con")]
        [System.Xml.Serialization.XmlElementAttribute("con", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object Content { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-contentInstance-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-contentInstance-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cinA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cinA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("contentInstanceAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ContentInstanceAnnc : GridNet.OneM2M.Types.AnnouncedSubordinateResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTag { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([\w/!#$^_.+&\-]+(:[0-2])?)|([\w/!#$^_.+&\-]+((:[0-2])?)+((:[0-5])?)).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([\\w/!#$^_.+&\\-]+(:[0-2])?)|([\\w/!#$^_.+&\\-]+((:[0-2])?)+((:[0-5])?))")]
        [Newtonsoft.Json.JsonPropertyAttribute("cnf")]
        [System.Xml.Serialization.XmlElementAttribute("cnf", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ContentInfo { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long ContentSizeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContentSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentSizeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cs")]
        public System.Nullable<long> ContentSize
        {
            get
            {
                return this.ContentSizeValueSpecified ? this.ContentSizeValue : default(long?);
            }
            set
            {
                this.ContentSizeValue = value.GetValueOrDefault();
                this.ContentSizeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("con")]
        [System.Xml.Serialization.XmlElementAttribute("con", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object Content { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-container-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-container-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cnt", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cnt")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("container", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Container : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTag { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxNrOfInstancesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxNrOfInstances-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxNrOfInstances property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxNrOfInstancesValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mni")]
        public System.Nullable<long> MaxNrOfInstances
        {
            get
            {
                return this.MaxNrOfInstancesValueSpecified ? this.MaxNrOfInstancesValue : default(long?);
            }
            set
            {
                this.MaxNrOfInstancesValue = value.GetValueOrDefault();
                this.MaxNrOfInstancesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mbs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxByteSizeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxByteSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxByteSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxByteSizeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mbs")]
        public System.Nullable<long> MaxByteSize
        {
            get
            {
                return this.MaxByteSizeValueSpecified ? this.MaxByteSizeValue : default(long?);
            }
            set
            {
                this.MaxByteSizeValue = value.GetValueOrDefault();
                this.MaxByteSizeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mia", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxInstanceAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxInstanceAge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxInstanceAge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxInstanceAgeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mia")]
        public System.Nullable<long> MaxInstanceAge
        {
            get
            {
                return this.MaxInstanceAgeValueSpecified ? this.MaxInstanceAgeValue : default(long?);
            }
            set
            {
                this.MaxInstanceAgeValue = value.GetValueOrDefault();
                this.MaxInstanceAgeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cni")]
        [System.Xml.Serialization.XmlElementAttribute("cni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentNrOfInstances { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cbs")]
        [System.Xml.Serialization.XmlElementAttribute("cbs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentByteSize { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("li")]
        [System.Xml.Serialization.XmlElementAttribute("li", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string LocationID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("disr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DisableRetrievalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DisableRetrieval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisableRetrieval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DisableRetrievalValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("disr")]
        public System.Nullable<bool> DisableRetrieval
        {
            get
            {
                return this.DisableRetrievalValueSpecified ? this.DisableRetrievalValue : default(bool?);
            }
            set
            {
                this.DisableRetrievalValue = value.GetValueOrDefault();
                this.DisableRetrievalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cin")]
        [System.Xml.Serialization.XmlElementAttribute("cin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ContentInstance> ContentInstance { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ContentInstance>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentInstance-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContentInstance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentInstanceSpecified => (this.ContentInstance.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<Container> ContainerProperty { get; set; } = System.Array.Empty<Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContainerProperty-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContainerProperty collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerPropertySpecified => (this.ContainerProperty.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_flexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_flexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.FlexContainerResource> Sg_FlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.FlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_FlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_FlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_FlexContainerResourceSpecified => (this.Sg_FlexContainerResource.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-container-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-container-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cntA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cntA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("containerAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ContainerAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTag { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxNrOfInstancesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxNrOfInstances-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxNrOfInstances property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxNrOfInstancesValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mni")]
        public System.Nullable<long> MaxNrOfInstances
        {
            get
            {
                return this.MaxNrOfInstancesValueSpecified ? this.MaxNrOfInstancesValue : default(long?);
            }
            set
            {
                this.MaxNrOfInstancesValue = value.GetValueOrDefault();
                this.MaxNrOfInstancesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mbs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxByteSizeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxByteSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxByteSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxByteSizeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mbs")]
        public System.Nullable<long> MaxByteSize
        {
            get
            {
                return this.MaxByteSizeValueSpecified ? this.MaxByteSizeValue : default(long?);
            }
            set
            {
                this.MaxByteSizeValue = value.GetValueOrDefault();
                this.MaxByteSizeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mia", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxInstanceAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxInstanceAge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxInstanceAge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxInstanceAgeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mia")]
        public System.Nullable<long> MaxInstanceAge
        {
            get
            {
                return this.MaxInstanceAgeValueSpecified ? this.MaxInstanceAgeValue : default(long?);
            }
            set
            {
                this.MaxInstanceAgeValue = value.GetValueOrDefault();
                this.MaxInstanceAgeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentNrOfInstancesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CurrentNrOfInstances-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentNrOfInstances property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CurrentNrOfInstancesValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cni")]
        public System.Nullable<long> CurrentNrOfInstances
        {
            get
            {
                return this.CurrentNrOfInstancesValueSpecified ? this.CurrentNrOfInstancesValue : default(long?);
            }
            set
            {
                this.CurrentNrOfInstancesValue = value.GetValueOrDefault();
                this.CurrentNrOfInstancesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cbs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentByteSizeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CurrentByteSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentByteSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CurrentByteSizeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cbs")]
        public System.Nullable<long> CurrentByteSize
        {
            get
            {
                return this.CurrentByteSizeValueSpecified ? this.CurrentByteSizeValue : default(long?);
            }
            set
            {
                this.CurrentByteSizeValue = value.GetValueOrDefault();
                this.CurrentByteSizeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("li")]
        [System.Xml.Serialization.XmlElementAttribute("li", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string LocationID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("disr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DisableRetrievalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DisableRetrieval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisableRetrieval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DisableRetrievalValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("disr")]
        public System.Nullable<bool> DisableRetrieval
        {
            get
            {
                return this.DisableRetrievalValueSpecified ? this.DisableRetrievalValue : default(bool?);
            }
            set
            {
                this.DisableRetrievalValue = value.GetValueOrDefault();
                this.DisableRetrievalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cin")]
        [System.Xml.Serialization.XmlElementAttribute("cin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ContentInstance> ContentInstance { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ContentInstance>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentInstance-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContentInstance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentInstanceSpecified => (this.ContentInstance.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cinA")]
        [System.Xml.Serialization.XmlElementAttribute("cinA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ContentInstanceAnnc> ContentInstanceAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ContentInstanceAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentInstanceAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContentInstanceAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentInstanceAnncSpecified => (this.ContentInstanceAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<Container> Container { get; set; } = System.Array.Empty<Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Container-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Container collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerSpecified => (this.Container.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cntA")]
        [System.Xml.Serialization.XmlElementAttribute("cntA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<ContainerAnnc> ContainerAnncProperty { get; set; } = System.Array.Empty<ContainerAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContainerAnncProperty-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContainerAnncProperty collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerAnncPropertySpecified => (this.ContainerAnncProperty.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_flexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_flexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.FlexContainerResource> Sg_FlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.FlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_FlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_FlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_FlexContainerResourceSpecified => (this.Sg_FlexContainerResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announcedFlexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announcedFlexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AnnouncedFlexContainerResource> Sg_AnnouncedFlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AnnouncedFlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_AnnouncedFlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_AnnouncedFlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_AnnouncedFlexContainerResourceSpecified => (this.Sg_AnnouncedFlexContainerResource.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-group-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-group-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("grp", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("grp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("group", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Group : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MemberType MemberTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemberType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MemberTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mt")]
        public System.Nullable<GridNet.OneM2M.Types.MemberType> MemberType
        {
            get
            {
                return this.MemberTypeValueSpecified ? this.MemberTypeValue : default(GridNet.OneM2M.Types.MemberType?);
            }
            set
            {
                this.MemberTypeValue = value.GetValueOrDefault();
                this.MemberTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnm")]
        [System.Xml.Serialization.XmlElementAttribute("cnm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentNrOfMembers { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mnm")]
        [System.Xml.Serialization.XmlElementAttribute("mnm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxNrOfMembers { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mid")]
        [System.Xml.Serialization.XmlElementAttribute("mid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> MemberIDs { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("macp")]
        [System.Xml.Serialization.XmlElementAttribute("macp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> MembersAccessControlPolicyIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MembersAccessControlPolicyIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MembersAccessControlPolicyIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MembersAccessControlPolicyIDsSpecified => (this.MembersAccessControlPolicyIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mtv")]
        [System.Xml.Serialization.XmlElementAttribute("mtv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool MemberTypeValidated { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("csy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ConsistencyStrategy ConsistencyStrategyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConsistencyStrategy-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConsistencyStrategy property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ConsistencyStrategyValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("csy")]
        public System.Nullable<GridNet.OneM2M.Types.ConsistencyStrategy> ConsistencyStrategy
        {
            get
            {
                return this.ConsistencyStrategyValueSpecified ? this.ConsistencyStrategyValue : default(GridNet.OneM2M.Types.ConsistencyStrategy?);
            }
            set
            {
                this.ConsistencyStrategyValue = value.GetValueOrDefault();
                this.ConsistencyStrategyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gn")]
        [System.Xml.Serialization.XmlElementAttribute("gn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string GroupName { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-group-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-group-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("grpA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("grpA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("groupAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class GroupAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MemberType MemberTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemberType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MemberTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mt")]
        public System.Nullable<GridNet.OneM2M.Types.MemberType> MemberType
        {
            get
            {
                return this.MemberTypeValueSpecified ? this.MemberTypeValue : default(GridNet.OneM2M.Types.MemberType?);
            }
            set
            {
                this.MemberTypeValue = value.GetValueOrDefault();
                this.MemberTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cnm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentNrOfMembersValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CurrentNrOfMembers-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentNrOfMembers property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CurrentNrOfMembersValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cnm")]
        public System.Nullable<long> CurrentNrOfMembers
        {
            get
            {
                return this.CurrentNrOfMembersValueSpecified ? this.CurrentNrOfMembersValue : default(long?);
            }
            set
            {
                this.CurrentNrOfMembersValue = value.GetValueOrDefault();
                this.CurrentNrOfMembersValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mnm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxNrOfMembersValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxNrOfMembers-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxNrOfMembers property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxNrOfMembersValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mnm")]
        public System.Nullable<long> MaxNrOfMembers
        {
            get
            {
                return this.MaxNrOfMembersValueSpecified ? this.MaxNrOfMembersValue : default(long?);
            }
            set
            {
                this.MaxNrOfMembersValue = value.GetValueOrDefault();
                this.MaxNrOfMembersValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-group-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mid")]
        [System.Xml.Serialization.XmlElementAttribute("mid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] MemberIDs { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("macp")]
        [System.Xml.Serialization.XmlElementAttribute("macp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> MembersAccessControlPolicyIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MembersAccessControlPolicyIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MembersAccessControlPolicyIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MembersAccessControlPolicyIDsSpecified => (this.MembersAccessControlPolicyIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mtv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool MemberTypeValidatedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemberTypeValidated-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemberTypeValidated property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MemberTypeValidatedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mtv")]
        public System.Nullable<bool> MemberTypeValidated
        {
            get
            {
                return this.MemberTypeValidatedValueSpecified ? this.MemberTypeValidatedValue : default(bool?);
            }
            set
            {
                this.MemberTypeValidatedValue = value.GetValueOrDefault();
                this.MemberTypeValidatedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("csy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ConsistencyStrategy ConsistencyStrategyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ConsistencyStrategy-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConsistencyStrategy property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ConsistencyStrategyValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("csy")]
        public System.Nullable<GridNet.OneM2M.Types.ConsistencyStrategy> ConsistencyStrategy
        {
            get
            {
                return this.ConsistencyStrategyValueSpecified ? this.ConsistencyStrategyValue : default(GridNet.OneM2M.Types.ConsistencyStrategy?);
            }
            set
            {
                this.ConsistencyStrategyValue = value.GetValueOrDefault();
                this.ConsistencyStrategyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gn")]
        [System.Xml.Serialization.XmlElementAttribute("gn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string GroupName { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-pollingChannel-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-pollingChannel-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pch", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("pch")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("pollingChannel", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class PollingChannel : GridNet.OneM2M.Types.SubordinateResource
    {
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-timeSeriesInstance-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-timeSeriesInstance-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tsi", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("tsi")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("timeSeriesInstance", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class TimeSeriesInstance : GridNet.OneM2M.Types.AnnounceableSubordinateResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dgt")]
        [System.Xml.Serialization.XmlElementAttribute("dgt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DataGenerationTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-timeSeriesInstance-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("con")]
        [System.Xml.Serialization.XmlElementAttribute("con", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Content { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("snr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SequenceNrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SequenceNr-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SequenceNr property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SequenceNrValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("snr")]
        public System.Nullable<long> SequenceNr
        {
            get
            {
                return this.SequenceNrValueSpecified ? this.SequenceNrValue : default(long?);
            }
            set
            {
                this.SequenceNrValue = value.GetValueOrDefault();
                this.SequenceNrValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-timeSeriesInstance-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-timeSeriesInstance-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tsia", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("tsia")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("timeSeriesInstanceAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class TimeSeriesInstanceAnnc : GridNet.OneM2M.Types.AnnouncedSubordinateResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dgt")]
        [System.Xml.Serialization.XmlElementAttribute("dgt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DataGenerationTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-timeSeriesInstance-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("con")]
        [System.Xml.Serialization.XmlElementAttribute("con", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Content { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("snr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SequenceNrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SequenceNr-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SequenceNr property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SequenceNrValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("snr")]
        public System.Nullable<long> SequenceNr
        {
            get
            {
                return this.SequenceNrValueSpecified ? this.SequenceNrValue : default(long?);
            }
            set
            {
                this.SequenceNrValue = value.GetValueOrDefault();
                this.SequenceNrValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-timeSeries-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-timeSeries-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ts", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ts")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("timeSeries", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class TimeSeries : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTag { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxNrOfInstancesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxNrOfInstances-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxNrOfInstances property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxNrOfInstancesValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mni")]
        public System.Nullable<long> MaxNrOfInstances
        {
            get
            {
                return this.MaxNrOfInstancesValueSpecified ? this.MaxNrOfInstancesValue : default(long?);
            }
            set
            {
                this.MaxNrOfInstancesValue = value.GetValueOrDefault();
                this.MaxNrOfInstancesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mbs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxByteSizeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxByteSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxByteSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxByteSizeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mbs")]
        public System.Nullable<long> MaxByteSize
        {
            get
            {
                return this.MaxByteSizeValueSpecified ? this.MaxByteSizeValue : default(long?);
            }
            set
            {
                this.MaxByteSizeValue = value.GetValueOrDefault();
                this.MaxByteSizeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mia", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxInstanceAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxInstanceAge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxInstanceAge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxInstanceAgeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mia")]
        public System.Nullable<long> MaxInstanceAge
        {
            get
            {
                return this.MaxInstanceAgeValueSpecified ? this.MaxInstanceAgeValue : default(long?);
            }
            set
            {
                this.MaxInstanceAgeValue = value.GetValueOrDefault();
                this.MaxInstanceAgeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cni")]
        [System.Xml.Serialization.XmlElementAttribute("cni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentNrOfInstances { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cbs")]
        [System.Xml.Serialization.XmlElementAttribute("cbs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentByteSize { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pei", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long PeriodicIntervalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PeriodicInterval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicInterval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PeriodicIntervalValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pei")]
        public System.Nullable<long> PeriodicInterval
        {
            get
            {
                return this.PeriodicIntervalValueSpecified ? this.PeriodicIntervalValue : default(long?);
            }
            set
            {
                this.PeriodicIntervalValue = value.GetValueOrDefault();
                this.PeriodicIntervalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mdd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool MissingDataDetectValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MissingDataDetect-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MissingDataDetect property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MissingDataDetectValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mdd")]
        public System.Nullable<bool> MissingDataDetect
        {
            get
            {
                return this.MissingDataDetectValueSpecified ? this.MissingDataDetectValue : default(bool?);
            }
            set
            {
                this.MissingDataDetectValue = value.GetValueOrDefault();
                this.MissingDataDetectValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mdn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MissingDataMaxNrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MissingDataMaxNr-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MissingDataMaxNr property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MissingDataMaxNrValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mdn")]
        public System.Nullable<long> MissingDataMaxNr
        {
            get
            {
                return this.MissingDataMaxNrValueSpecified ? this.MissingDataMaxNrValue : default(long?);
            }
            set
            {
                this.MissingDataMaxNrValue = value.GetValueOrDefault();
                this.MissingDataMaxNrValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mdl")]
        [System.Xml.Serialization.XmlElementAttribute("mdl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MissingDataList { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mdc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MissingDataCurrentNrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MissingDataCurrentNr-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MissingDataCurrentNr property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MissingDataCurrentNrValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mdc")]
        public System.Nullable<long> MissingDataCurrentNr
        {
            get
            {
                return this.MissingDataCurrentNrValueSpecified ? this.MissingDataCurrentNrValue : default(long?);
            }
            set
            {
                this.MissingDataCurrentNrValue = value.GetValueOrDefault();
                this.MissingDataCurrentNrValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mdt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MissingDataDetectTimerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MissingDataDetectTimer-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MissingDataDetectTimer property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MissingDataDetectTimerValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mdt")]
        public System.Nullable<long> MissingDataDetectTimer
        {
            get
            {
                return this.MissingDataDetectTimerValueSpecified ? this.MissingDataDetectTimerValue : default(long?);
            }
            set
            {
                this.MissingDataDetectTimerValue = value.GetValueOrDefault();
                this.MissingDataDetectTimerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("la")]
        [System.Xml.Serialization.XmlElementAttribute("la", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Latest { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ol")]
        [System.Xml.Serialization.XmlElementAttribute("ol", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Oldest { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tsi")]
        [System.Xml.Serialization.XmlElementAttribute("tsi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeriesInstance> TimeSeriesInstance { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeriesInstance>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeriesInstance-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeriesInstance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesInstanceSpecified => (this.TimeSeriesInstance.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-timeSeries-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-timeSeries-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tsa", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("tsa")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("timeSeriesAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class TimeSeriesAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTagValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StateTag-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StateTag property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StateTagValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        public System.Nullable<long> StateTag
        {
            get
            {
                return this.StateTagValueSpecified ? this.StateTagValue : default(long?);
            }
            set
            {
                this.StateTagValue = value.GetValueOrDefault();
                this.StateTagValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxNrOfInstancesValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxNrOfInstances-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxNrOfInstances property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxNrOfInstancesValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mni")]
        public System.Nullable<long> MaxNrOfInstances
        {
            get
            {
                return this.MaxNrOfInstancesValueSpecified ? this.MaxNrOfInstancesValue : default(long?);
            }
            set
            {
                this.MaxNrOfInstancesValue = value.GetValueOrDefault();
                this.MaxNrOfInstancesValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mbs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxByteSizeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxByteSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxByteSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxByteSizeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mbs")]
        public System.Nullable<long> MaxByteSize
        {
            get
            {
                return this.MaxByteSizeValueSpecified ? this.MaxByteSizeValue : default(long?);
            }
            set
            {
                this.MaxByteSizeValue = value.GetValueOrDefault();
                this.MaxByteSizeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mia", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxInstanceAgeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxInstanceAge-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxInstanceAge property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MaxInstanceAgeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mia")]
        public System.Nullable<long> MaxInstanceAge
        {
            get
            {
                return this.MaxInstanceAgeValueSpecified ? this.MaxInstanceAgeValue : default(long?);
            }
            set
            {
                this.MaxInstanceAgeValue = value.GetValueOrDefault();
                this.MaxInstanceAgeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cni")]
        [System.Xml.Serialization.XmlElementAttribute("cni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentNrOfInstances { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cbs")]
        [System.Xml.Serialization.XmlElementAttribute("cbs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long CurrentByteSize { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pei", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long PeriodicIntervalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PeriodicInterval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicInterval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PeriodicIntervalValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pei")]
        public System.Nullable<long> PeriodicInterval
        {
            get
            {
                return this.PeriodicIntervalValueSpecified ? this.PeriodicIntervalValue : default(long?);
            }
            set
            {
                this.PeriodicIntervalValue = value.GetValueOrDefault();
                this.PeriodicIntervalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mdd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool MissingDataDetectValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MissingDataDetect-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MissingDataDetect property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MissingDataDetectValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mdd")]
        public System.Nullable<bool> MissingDataDetect
        {
            get
            {
                return this.MissingDataDetectValueSpecified ? this.MissingDataDetectValue : default(bool?);
            }
            set
            {
                this.MissingDataDetectValue = value.GetValueOrDefault();
                this.MissingDataDetectValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mdl")]
        [System.Xml.Serialization.XmlElementAttribute("mdl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MissingDataList { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mdc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MissingDataCurrentNrValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MissingDataCurrentNr-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MissingDataCurrentNr property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MissingDataCurrentNrValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mdc")]
        public System.Nullable<long> MissingDataCurrentNr
        {
            get
            {
                return this.MissingDataCurrentNrValueSpecified ? this.MissingDataCurrentNrValue : default(long?);
            }
            set
            {
                this.MissingDataCurrentNrValue = value.GetValueOrDefault();
                this.MissingDataCurrentNrValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mdt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MissingDataDetectTimerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MissingDataDetectTimer-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MissingDataDetectTimer property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MissingDataDetectTimerValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mdt")]
        public System.Nullable<long> MissingDataDetectTimer
        {
            get
            {
                return this.MissingDataDetectTimerValueSpecified ? this.MissingDataDetectTimerValue : default(long?);
            }
            set
            {
                this.MissingDataDetectTimerValue = value.GetValueOrDefault();
                this.MissingDataDetectTimerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tsi")]
        [System.Xml.Serialization.XmlElementAttribute("tsi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeriesInstance> TimeSeriesInstance { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeriesInstance>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeriesInstance-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeriesInstance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesInstanceSpecified => (this.TimeSeriesInstance.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tsia")]
        [System.Xml.Serialization.XmlElementAttribute("tsia", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeriesInstanceAnnc> TimeSeriesInstanceAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeriesInstanceAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeriesInstanceAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeriesInstanceAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesInstanceAnncSpecified => (this.TimeSeriesInstanceAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-trafficPattern-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trpt", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("trpt")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("trafficPattern", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class TrafficPattern : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("provideToNSE", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ProvideToNSEValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProvideToNSE-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProvideToNSE property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ProvideToNSEValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("provideToNSE")]
        public System.Nullable<bool> ProvideToNSE
        {
            get
            {
                return this.ProvideToNSEValueSpecified ? this.ProvideToNSEValue : default(bool?);
            }
            set
            {
                this.ProvideToNSEValue = value.GetValueOrDefault();
                this.ProvideToNSEValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.PeriodicIndicator PeriodicIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PeriodicIndicator-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicIndicator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PeriodicIndicatorValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pri")]
        public System.Nullable<GridNet.OneM2M.Types.PeriodicIndicator> PeriodicIndicator
        {
            get
            {
                return this.PeriodicIndicatorValueSpecified ? this.PeriodicIndicatorValue : default(GridNet.OneM2M.Types.PeriodicIndicator?);
            }
            set
            {
                this.PeriodicIndicatorValue = value.GetValueOrDefault();
                this.PeriodicIndicatorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pdt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedInt")]
        public uint PeriodicDurationTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PeriodicDurationTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicDurationTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PeriodicDurationTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pdt")]
        public System.Nullable<uint> PeriodicDurationTime
        {
            get
            {
                return this.PeriodicDurationTimeValueSpecified ? this.PeriodicDurationTimeValue : default(uint?);
            }
            set
            {
                this.PeriodicDurationTimeValue = value.GetValueOrDefault();
                this.PeriodicDurationTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedInt")]
        public uint PeriodicIntervalTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PeriodicIntervalTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicIntervalTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PeriodicIntervalTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pit")]
        public System.Nullable<uint> PeriodicIntervalTime
        {
            get
            {
                return this.PeriodicIntervalTimeValueSpecified ? this.PeriodicIntervalTimeValue : default(uint?);
            }
            set
            {
                this.PeriodicIntervalTimeValue = value.GetValueOrDefault();
                this.PeriodicIntervalTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sti", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.StationaryIndication StationaryIndicationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StationaryIndication-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StationaryIndication property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StationaryIndicationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sti")]
        public System.Nullable<GridNet.OneM2M.Types.StationaryIndication> StationaryIndication
        {
            get
            {
                return this.StationaryIndicationValueSpecified ? this.StationaryIndicationValue : default(GridNet.OneM2M.Types.StationaryIndication?);
            }
            set
            {
                this.StationaryIndicationValue = value.GetValueOrDefault();
                this.StationaryIndicationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dsi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long DataSizeIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DataSizeIndicator-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DataSizeIndicator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DataSizeIndicatorValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dsi")]
        public System.Nullable<long> DataSizeIndicator
        {
            get
            {
                return this.DataSizeIndicatorValueSpecified ? this.DataSizeIndicatorValue : default(long?);
            }
            set
            {
                this.DataSizeIndicatorValue = value.GetValueOrDefault();
                this.DataSizeIndicatorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("vdt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ValidityTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ValidityTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ValidityTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ValidityTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("vdt")]
        public System.Nullable<System.DateTimeOffset> ValidityTime
        {
            get
            {
                return this.ValidityTimeValueSpecified ? this.ValidityTimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ValidityTimeValue = value.GetValueOrDefault();
                this.ValidityTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ttn")]
        [System.Xml.Serialization.XmlElementAttribute("ttn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> TargetNetwork { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sch")]
        [System.Xml.Serialization.XmlElementAttribute("sch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Schedule> Schedule { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Schedule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Schedule-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Schedule collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleSpecified => (this.Schedule.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-trafficPattern-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trptA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("trptA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("trafficPatternAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class TrafficPatternAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("provideToNSE", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ProvideToNSEValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProvideToNSE-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProvideToNSE property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ProvideToNSEValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("provideToNSE")]
        public System.Nullable<bool> ProvideToNSE
        {
            get
            {
                return this.ProvideToNSEValueSpecified ? this.ProvideToNSEValue : default(bool?);
            }
            set
            {
                this.ProvideToNSEValue = value.GetValueOrDefault();
                this.ProvideToNSEValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.PeriodicIndicator PeriodicIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PeriodicIndicator-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicIndicator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PeriodicIndicatorValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pri")]
        public System.Nullable<GridNet.OneM2M.Types.PeriodicIndicator> PeriodicIndicator
        {
            get
            {
                return this.PeriodicIndicatorValueSpecified ? this.PeriodicIndicatorValue : default(GridNet.OneM2M.Types.PeriodicIndicator?);
            }
            set
            {
                this.PeriodicIndicatorValue = value.GetValueOrDefault();
                this.PeriodicIndicatorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pdt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedInt")]
        public uint PeriodicDurationTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PeriodicDurationTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicDurationTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PeriodicDurationTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pdt")]
        public System.Nullable<uint> PeriodicDurationTime
        {
            get
            {
                return this.PeriodicDurationTimeValueSpecified ? this.PeriodicDurationTimeValue : default(uint?);
            }
            set
            {
                this.PeriodicDurationTimeValue = value.GetValueOrDefault();
                this.PeriodicDurationTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("pit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedInt")]
        public uint PeriodicIntervalTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PeriodicIntervalTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PeriodicIntervalTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PeriodicIntervalTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pit")]
        public System.Nullable<uint> PeriodicIntervalTime
        {
            get
            {
                return this.PeriodicIntervalTimeValueSpecified ? this.PeriodicIntervalTimeValue : default(uint?);
            }
            set
            {
                this.PeriodicIntervalTimeValue = value.GetValueOrDefault();
                this.PeriodicIntervalTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sti", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.StationaryIndication StationaryIndicationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StationaryIndication-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StationaryIndication property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StationaryIndicationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sti")]
        public System.Nullable<GridNet.OneM2M.Types.StationaryIndication> StationaryIndication
        {
            get
            {
                return this.StationaryIndicationValueSpecified ? this.StationaryIndicationValue : default(GridNet.OneM2M.Types.StationaryIndication?);
            }
            set
            {
                this.StationaryIndicationValue = value.GetValueOrDefault();
                this.StationaryIndicationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dsi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long DataSizeIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DataSizeIndicator-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DataSizeIndicator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DataSizeIndicatorValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dsi")]
        public System.Nullable<long> DataSizeIndicator
        {
            get
            {
                return this.DataSizeIndicatorValueSpecified ? this.DataSizeIndicatorValue : default(long?);
            }
            set
            {
                this.DataSizeIndicatorValue = value.GetValueOrDefault();
                this.DataSizeIndicatorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("vdt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset ValidityTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ValidityTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ValidityTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ValidityTimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("vdt")]
        public System.Nullable<System.DateTimeOffset> ValidityTime
        {
            get
            {
                return this.ValidityTimeValueSpecified ? this.ValidityTimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.ValidityTimeValue = value.GetValueOrDefault();
                this.ValidityTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ttn")]
        [System.Xml.Serialization.XmlElementAttribute("ttn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> TargetNetwork { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TargetNetwork-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TargetNetwork collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TargetNetworkSpecified => (this.TargetNetwork.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("schA")]
        [System.Xml.Serialization.XmlElementAttribute("schA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ScheduleAnnc> ScheduleAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ScheduleAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ScheduleAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ScheduleAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleAnncSpecified => (this.ScheduleAnnc.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-AE-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-AE-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ae", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ae")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AE", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AE : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("apn")]
        [System.Xml.Serialization.XmlElementAttribute("apn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string AppName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("api")]
        [System.Xml.Serialization.XmlElementAttribute("api", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string App_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aei")]
        [System.Xml.Serialization.XmlElementAttribute("aei", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string AE_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("poa")]
        [System.Xml.Serialization.XmlElementAttribute("poa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> PointOfAccess { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PointOfAccess-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PointOfAccess collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PointOfAccessSpecified => (this.PointOfAccess.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nl")]
        [System.Xml.Serialization.XmlElementAttribute("nl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string NodeLink { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rr")]
        [System.Xml.Serialization.XmlElementAttribute("rr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RequestReachability { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("csz")]
        [System.Xml.Serialization.XmlElementAttribute("csz", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.PermittedMediaTypes> ContentSerialization { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.PermittedMediaTypes>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentSerialization-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContentSerialization collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentSerializationSpecified => (this.ContentSerialization.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esi")]
        [System.Xml.Serialization.XmlElementAttribute("esi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.E2ESecInfo E2ESecInfo { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Container> Container { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Container-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Container collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerSpecified => (this.Container.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grp")]
        [System.Xml.Serialization.XmlElementAttribute("grp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Group> Group { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Group>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Group-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Group collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GroupSpecified => (this.Group.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acp")]
        [System.Xml.Serialization.XmlElementAttribute("acp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlPolicy> AccessControlPolicy { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlPolicy>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicy-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicy collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicySpecified => (this.AccessControlPolicy.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pch")]
        [System.Xml.Serialization.XmlElementAttribute("pch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.PollingChannel> PollingChannel { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.PollingChannel>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PollingChannel-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PollingChannel collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PollingChannelSpecified => (this.PollingChannel.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sch")]
        [System.Xml.Serialization.XmlElementAttribute("sch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Schedule> Schedule { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Schedule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Schedule-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Schedule collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleSpecified => (this.Schedule.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ts")]
        [System.Xml.Serialization.XmlElementAttribute("ts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeries> TimeSeries { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeries>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeries-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeries collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesSpecified => (this.TimeSeries.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trpt")]
        [System.Xml.Serialization.XmlElementAttribute("trpt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TrafficPattern> TrafficPattern { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TrafficPattern>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TrafficPattern-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TrafficPattern collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TrafficPatternSpecified => (this.TrafficPattern.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_flexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_flexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.FlexContainerResource> Sg_FlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.FlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_FlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_FlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_FlexContainerResourceSpecified => (this.Sg_FlexContainerResource.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-AE-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-AE-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("aeA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("aeA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("AEAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AEAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("apn")]
        [System.Xml.Serialization.XmlElementAttribute("apn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string AppName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("api")]
        [System.Xml.Serialization.XmlElementAttribute("api", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string App_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aei")]
        [System.Xml.Serialization.XmlElementAttribute("aei", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string AE_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("poa")]
        [System.Xml.Serialization.XmlElementAttribute("poa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> PointOfAccess { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PointOfAccess-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PointOfAccess collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PointOfAccessSpecified => (this.PointOfAccess.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string OntologyRef { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nl")]
        [System.Xml.Serialization.XmlElementAttribute("nl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string NodeLink { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RequestReachabilityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RequestReachability-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestReachability property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RequestReachabilityValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rr")]
        public System.Nullable<bool> RequestReachability
        {
            get
            {
                return this.RequestReachabilityValueSpecified ? this.RequestReachabilityValue : default(bool?);
            }
            set
            {
                this.RequestReachabilityValue = value.GetValueOrDefault();
                this.RequestReachabilityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("csz")]
        [System.Xml.Serialization.XmlElementAttribute("csz", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.PermittedMediaTypes> ContentSerialization { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.PermittedMediaTypes>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContentSerialization-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContentSerialization collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContentSerializationSpecified => (this.ContentSerialization.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esi")]
        [System.Xml.Serialization.XmlElementAttribute("esi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.E2ESecInfo E2ESecInfo { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Container> Container { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Container-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Container collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerSpecified => (this.Container.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cntA")]
        [System.Xml.Serialization.XmlElementAttribute("cntA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ContainerAnnc> ContainerAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ContainerAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContainerAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContainerAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerAnncSpecified => (this.ContainerAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grp")]
        [System.Xml.Serialization.XmlElementAttribute("grp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Group> Group { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Group>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Group-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Group collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GroupSpecified => (this.Group.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grpA")]
        [System.Xml.Serialization.XmlElementAttribute("grpA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.GroupAnnc> GroupAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.GroupAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GroupAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GroupAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GroupAnncSpecified => (this.GroupAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acp")]
        [System.Xml.Serialization.XmlElementAttribute("acp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlPolicy> AccessControlPolicy { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlPolicy>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicy-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicy collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicySpecified => (this.AccessControlPolicy.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acpA")]
        [System.Xml.Serialization.XmlElementAttribute("acpA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlPolicyAnnc> AccessControlPolicyAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlPolicyAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicyAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicyAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicyAnncSpecified => (this.AccessControlPolicyAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("schA")]
        [System.Xml.Serialization.XmlElementAttribute("schA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ScheduleAnnc> ScheduleAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ScheduleAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ScheduleAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ScheduleAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleAnncSpecified => (this.ScheduleAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ts")]
        [System.Xml.Serialization.XmlElementAttribute("ts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeries> TimeSeries { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeries>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeries-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeries collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesSpecified => (this.TimeSeries.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tsa")]
        [System.Xml.Serialization.XmlElementAttribute("tsa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeriesAnnc> TimeSeriesAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeriesAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeriesAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeriesAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesAnncSpecified => (this.TimeSeriesAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trptA")]
        [System.Xml.Serialization.XmlElementAttribute("trptA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TrafficPatternAnnc> TrafficPatternAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TrafficPatternAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TrafficPatternAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TrafficPatternAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TrafficPatternAnncSpecified => (this.TrafficPatternAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_flexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_flexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.FlexContainerResource> Sg_FlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.FlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_FlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_FlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_FlexContainerResourceSpecified => (this.Sg_FlexContainerResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announcedFlexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announcedFlexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AnnouncedFlexContainerResource> Sg_AnnouncedFlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AnnouncedFlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_AnnouncedFlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_AnnouncedFlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_AnnouncedFlexContainerResourceSpecified => (this.Sg_AnnouncedFlexContainerResource.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynMethodCall-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynMethodCall-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajmc", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajmc")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynMethodCall", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynMethodCall : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("inp")]
        [System.Xml.Serialization.XmlElementAttribute("inp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Input { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("clst")]
        [System.Xml.Serialization.XmlElementAttribute("clst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string CallStatus { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("out")]
        [System.Xml.Serialization.XmlElementAttribute("out", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Output { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynMethodCall-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynMethodCall-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajmca", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajmca")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynMethodCallAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynMethodCallAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynMethod-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynMethod-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajmd", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajmd")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynMethod", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynMethod : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajmc")]
        [System.Xml.Serialization.XmlElementAttribute("ajmc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynMethodCall> AllJoynMethodCall { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynMethodCall>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynMethodCall-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynMethodCall collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynMethodCallSpecified => (this.AllJoynMethodCall.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynMethod-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynMethod-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajmda", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajmda")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynMethodAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynMethodAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajmc")]
        [System.Xml.Serialization.XmlElementAttribute("ajmc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynMethodCall> AllJoynMethodCall { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynMethodCall>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynMethodCall-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynMethodCall collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynMethodCallSpecified => (this.AllJoynMethodCall.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajmca")]
        [System.Xml.Serialization.XmlElementAttribute("ajmca", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynMethodCallAnnc> AllJoynMethodCallAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynMethodCallAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynMethodCallAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynMethodCallAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynMethodCallAnncSpecified => (this.AllJoynMethodCallAnnc.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynProperty-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynProperty-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajpr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajpr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynProperty", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynProperty : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("crv")]
        [System.Xml.Serialization.XmlElementAttribute("crv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string CurrentValue { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rqv")]
        [System.Xml.Serialization.XmlElementAttribute("rqv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string RequestedValue { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynProperty-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynProperty-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajpra", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajpra")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynPropertyAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynPropertyAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynInterface-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynInterface-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajif", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajif")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynInterface", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynInterface : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajir")]
        [System.Xml.Serialization.XmlElementAttribute("ajir", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string InterfaceIntrospectXmlRef { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajmd")]
        [System.Xml.Serialization.XmlElementAttribute("ajmd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynMethod> AllJoynMethod { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynMethod>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynMethod-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynMethod collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynMethodSpecified => (this.AllJoynMethod.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajpr")]
        [System.Xml.Serialization.XmlElementAttribute("ajpr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynProperty> AllJoynProperty { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynProperty>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynProperty-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynProperty collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynPropertySpecified => (this.AllJoynProperty.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Container> Container { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Container-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Container collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerSpecified => (this.Container.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynInterface-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynInterface-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajifa", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajifa")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynInterfaceAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynInterfaceAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajir")]
        [System.Xml.Serialization.XmlElementAttribute("ajir", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string InterfaceIntrospectXmlRef { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajmd")]
        [System.Xml.Serialization.XmlElementAttribute("ajmd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynMethod> AllJoynMethod { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynMethod>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynMethod-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynMethod collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynMethodSpecified => (this.AllJoynMethod.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajmda")]
        [System.Xml.Serialization.XmlElementAttribute("ajmda", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynMethodAnnc> AllJoynMethodAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynMethodAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynMethodAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynMethodAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynMethodAnncSpecified => (this.AllJoynMethodAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajpr")]
        [System.Xml.Serialization.XmlElementAttribute("ajpr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynProperty> AllJoynProperty { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynProperty>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynProperty-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynProperty collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynPropertySpecified => (this.AllJoynProperty.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajpra")]
        [System.Xml.Serialization.XmlElementAttribute("ajpra", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynPropertyAnnc> AllJoynPropertyAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynPropertyAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynPropertyAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynPropertyAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynPropertyAnncSpecified => (this.AllJoynPropertyAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Container> Container { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Container-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Container collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerSpecified => (this.Container.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cntA")]
        [System.Xml.Serialization.XmlElementAttribute("cntA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ContainerAnnc> ContainerAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ContainerAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContainerAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContainerAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerAnncSpecified => (this.ContainerAnnc.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynSvcObject-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynSvcObject-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajso", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajso")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynSvcObject", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynSvcObject : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajop")]
        [System.Xml.Serialization.XmlElementAttribute("ajop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ObjectPath { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ena")]
        [System.Xml.Serialization.XmlElementAttribute("ena", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool Enable { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajif")]
        [System.Xml.Serialization.XmlElementAttribute("ajif", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynInterface> AllJoynInterface { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynInterface>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynInterface-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynInterface collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynInterfaceSpecified => (this.AllJoynInterface.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynSvcObject-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynSvcObject-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajsoa", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajsoa")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynSvcObjectAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynSvcObjectAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajop")]
        [System.Xml.Serialization.XmlElementAttribute("ajop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ObjectPath { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ena", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool EnableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Enable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EnableValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ena")]
        public System.Nullable<bool> Enable
        {
            get
            {
                return this.EnableValueSpecified ? this.EnableValue : default(bool?);
            }
            set
            {
                this.EnableValue = value.GetValueOrDefault();
                this.EnableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajif")]
        [System.Xml.Serialization.XmlElementAttribute("ajif", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynInterface> AllJoynInterface { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynInterface>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynInterface-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynInterface collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynInterfaceSpecified => (this.AllJoynInterface.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajifa")]
        [System.Xml.Serialization.XmlElementAttribute("ajifa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynInterfaceAnnc> AllJoynInterfaceAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynInterfaceAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynInterfaceAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynInterfaceAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynInterfaceAnncSpecified => (this.AllJoynInterfaceAnnc.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynApp-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynApp-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajap", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajap")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynApp", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynApp : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dir", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AllJoynDirection DirectionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Direction-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Direction property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DirectionValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dir")]
        public System.Nullable<GridNet.OneM2M.Types.AllJoynDirection> Direction
        {
            get
            {
                return this.DirectionValueSpecified ? this.DirectionValue : default(GridNet.OneM2M.Types.AllJoynDirection?);
            }
            set
            {
                this.DirectionValue = value.GetValueOrDefault();
                this.DirectionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajso")]
        [System.Xml.Serialization.XmlElementAttribute("ajso", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynSvcObject> AllJoynSvcObject { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynSvcObject>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynSvcObject-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynSvcObject collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynSvcObjectSpecified => (this.AllJoynSvcObject.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-allJoynApp-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-allJoynApp-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajapa", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajapa")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("allJoynAppAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AllJoynAppAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dir", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.AllJoynDirection DirectionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Direction-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Direction property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DirectionValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dir")]
        public System.Nullable<GridNet.OneM2M.Types.AllJoynDirection> Direction
        {
            get
            {
                return this.DirectionValueSpecified ? this.DirectionValue : default(GridNet.OneM2M.Types.AllJoynDirection?);
            }
            set
            {
                this.DirectionValue = value.GetValueOrDefault();
                this.DirectionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajso")]
        [System.Xml.Serialization.XmlElementAttribute("ajso", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynSvcObject> AllJoynSvcObject { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynSvcObject>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynSvcObject-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynSvcObject collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynSvcObjectSpecified => (this.AllJoynSvcObject.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajsoa")]
        [System.Xml.Serialization.XmlElementAttribute("ajsoa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynSvcObjectAnnc> AllJoynSvcObjectAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynSvcObjectAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynSvcObjectAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynSvcObjectAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynSvcObjectAnncSpecified => (this.AllJoynSvcObjectAnnc.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-areaNwkDeviceInfo-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-areaNwkDeviceInfo-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("andi", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("andi")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("areaNwkDeviceInfo", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AreaNwkDeviceInfo : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("devID")]
        [System.Xml.Serialization.XmlElementAttribute("devID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DevID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dvt")]
        [System.Xml.Serialization.XmlElementAttribute("dvt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DevType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("awi")]
        [System.Xml.Serialization.XmlElementAttribute("awi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string AreaNwkId { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sli", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SleepIntervalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SleepInterval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SleepInterval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SleepIntervalValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sli")]
        public System.Nullable<long> SleepInterval
        {
            get
            {
                return this.SleepIntervalValueSpecified ? this.SleepIntervalValue : default(long?);
            }
            set
            {
                this.SleepIntervalValue = value.GetValueOrDefault();
                this.SleepIntervalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sld", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SleepDurationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SleepDuration-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SleepDuration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SleepDurationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sld")]
        public System.Nullable<long> SleepDuration
        {
            get
            {
                return this.SleepDurationValueSpecified ? this.SleepDurationValue : default(long?);
            }
            set
            {
                this.SleepDurationValue = value.GetValueOrDefault();
                this.SleepDurationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ss")]
        [System.Xml.Serialization.XmlElementAttribute("ss", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DevStatus { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lnh")]
        [System.Xml.Serialization.XmlElementAttribute("lnh", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ListOfNeighbors { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-areaNwkDeviceInfo-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-areaNwkDeviceInfo-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("andiA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("andiA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("areaNwkDeviceInfoAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AreaNwkDeviceInfoAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("devID")]
        [System.Xml.Serialization.XmlElementAttribute("devID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DevID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dvt")]
        [System.Xml.Serialization.XmlElementAttribute("dvt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DevType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("awi")]
        [System.Xml.Serialization.XmlElementAttribute("awi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string AreaNwkId { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sli", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SleepIntervalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SleepInterval-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SleepInterval property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SleepIntervalValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sli")]
        public System.Nullable<long> SleepInterval
        {
            get
            {
                return this.SleepIntervalValueSpecified ? this.SleepIntervalValue : default(long?);
            }
            set
            {
                this.SleepIntervalValue = value.GetValueOrDefault();
                this.SleepIntervalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sld", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SleepDurationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SleepDuration-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SleepDuration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SleepDurationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sld")]
        public System.Nullable<long> SleepDuration
        {
            get
            {
                return this.SleepDurationValueSpecified ? this.SleepDurationValue : default(long?);
            }
            set
            {
                this.SleepDurationValue = value.GetValueOrDefault();
                this.SleepDurationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ss")]
        [System.Xml.Serialization.XmlElementAttribute("ss", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DevStatus { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lnh")]
        [System.Xml.Serialization.XmlElementAttribute("lnh", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ListOfNeighbors { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ListOfNeighbors-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ListOfNeighbors collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ListOfNeighborsSpecified => (this.ListOfNeighbors.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-areaNwkInfo-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-areaNwkInfo-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ani", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ani")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("areaNwkInfo", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AreaNwkInfo : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ant")]
        [System.Xml.Serialization.XmlElementAttribute("ant", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string AreaNwkType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ldv")]
        [System.Xml.Serialization.XmlElementAttribute("ldv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ListOfDevices { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-areaNwkInfo-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-areaNwkInfo-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("aniA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("aniA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("areaNwkInfoAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class AreaNwkInfoAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ant")]
        [System.Xml.Serialization.XmlElementAttribute("ant", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string AreaNwkType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ldv")]
        [System.Xml.Serialization.XmlElementAttribute("ldv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ListOfDevices { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ListOfDevices-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ListOfDevices collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ListOfDevicesSpecified => (this.ListOfDevices.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-battery-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-battery-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bat", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("bat")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("battery", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Battery : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("btl")]
        [System.Xml.Serialization.XmlElementAttribute("btl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedInt")]
        public uint BatteryLevel { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("bts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.BatteryStatus BatteryStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BatteryStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatteryStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool BatteryStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("bts")]
        public System.Nullable<GridNet.OneM2M.Types.BatteryStatus> BatteryStatus
        {
            get
            {
                return this.BatteryStatusValueSpecified ? this.BatteryStatusValue : default(GridNet.OneM2M.Types.BatteryStatus?);
            }
            set
            {
                this.BatteryStatusValue = value.GetValueOrDefault();
                this.BatteryStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-battery-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-battery-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("batA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("batA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("batteryAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class BatteryAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("btl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedInt")]
        public uint BatteryLevelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BatteryLevel-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatteryLevel property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool BatteryLevelValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("btl")]
        public System.Nullable<uint> BatteryLevel
        {
            get
            {
                return this.BatteryLevelValueSpecified ? this.BatteryLevelValue : default(uint?);
            }
            set
            {
                this.BatteryLevelValue = value.GetValueOrDefault();
                this.BatteryLevelValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("bts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.BatteryStatus BatteryStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BatteryStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BatteryStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool BatteryStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("bts")]
        public System.Nullable<GridNet.OneM2M.Types.BatteryStatus> BatteryStatus
        {
            get
            {
                return this.BatteryStatusValueSpecified ? this.BatteryStatusValue : default(GridNet.OneM2M.Types.BatteryStatus?);
            }
            set
            {
                this.BatteryStatusValue = value.GetValueOrDefault();
                this.BatteryStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhBuffer-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhBuffer-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cmbf", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cmbf")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("cmdhBuffer", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CmdhBuffer : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aec")]
        [System.Xml.Serialization.XmlElementAttribute("aec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<string> ApplicableEventCategory { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mbfs")]
        [System.Xml.Serialization.XmlElementAttribute("mbfs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MaxBufferSize { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhBuffer-v2_7_0.xsd</para>
        /// <para xml:lang="en">Maximum exclusive value: 11.</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sgp")]
        [System.Xml.Serialization.XmlElementAttribute("sgp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StoragePriority { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhDefaults-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhDefaults-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cmdf", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cmdf")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("cmdhDefaults", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CmdhDefaults : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cmlk")]
        [System.Xml.Serialization.XmlElementAttribute("cmlk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.MgmtLinkRef> MgmtLink { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhDefEcValue-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhDefEcValue-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cmdv", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cmdv")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("cmdhDefEcValue", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CmdhDefEcValue : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("od")]
        [System.Xml.Serialization.XmlElementAttribute("od", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long Order { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dev")]
        [System.Xml.Serialization.XmlElementAttribute("dev", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DefEcValue { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ror")]
        [System.Xml.Serialization.XmlElementAttribute("ror", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> RequestOrigin { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rct")]
        [System.Xml.Serialization.XmlElementAttribute("rct", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object RequestContext { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rctn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RequestContextNotificationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RequestContextNotification-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestContextNotification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RequestContextNotificationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rctn")]
        public System.Nullable<bool> RequestContextNotification
        {
            get
            {
                return this.RequestContextNotificationValueSpecified ? this.RequestContextNotificationValue : default(bool?);
            }
            set
            {
                this.RequestContextNotificationValue = value.GetValueOrDefault();
                this.RequestContextNotificationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rch")]
        [System.Xml.Serialization.XmlElementAttribute("rch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object RequestCharacteristics { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhEcDefParamValues-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhEcDefParamValues-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cmpv", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cmpv")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("cmdhEcDefParamValues", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CmdhEcDefParamValues : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aec")]
        [System.Xml.Serialization.XmlElementAttribute("aec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<string> ApplicableEventCategory { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhEcDefParamValues-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dqet")]
        [System.Xml.Serialization.XmlElementAttribute("dqet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public long DefaultRequestExpTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhEcDefParamValues-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dset")]
        [System.Xml.Serialization.XmlElementAttribute("dset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public long DefaultResultExpTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhEcDefParamValues-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("doet")]
        [System.Xml.Serialization.XmlElementAttribute("doet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public long DefaultOpExecTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhEcDefParamValues-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("drp")]
        [System.Xml.Serialization.XmlElementAttribute("drp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public long DefaultRespPersistence { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dda")]
        [System.Xml.Serialization.XmlElementAttribute("dda", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DefaultDelAggregation { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhLimits-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhLimits-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cml", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cml")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("cmdhLimits", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CmdhLimits : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("od")]
        [System.Xml.Serialization.XmlElementAttribute("od", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long Order { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ror")]
        [System.Xml.Serialization.XmlElementAttribute("ror", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> RequestOrigin { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rct")]
        [System.Xml.Serialization.XmlElementAttribute("rct", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object RequestContext { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rctn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RequestContextNotificationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RequestContextNotification-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestContextNotification property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RequestContextNotificationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rctn")]
        public System.Nullable<bool> RequestContextNotification
        {
            get
            {
                return this.RequestContextNotificationValueSpecified ? this.RequestContextNotificationValue : default(bool?);
            }
            set
            {
                this.RequestContextNotificationValue = value.GetValueOrDefault();
                this.RequestContextNotificationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rch")]
        [System.Xml.Serialization.XmlElementAttribute("rch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object RequestCharacteristics { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lec")]
        [System.Xml.Serialization.XmlElementAttribute("lec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<string> LimitsEventCategory { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lqet")]
        [System.Xml.Serialization.XmlElementAttribute("lqet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public System.Collections.Generic.ICollection<long> LimitsRequestExpTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lset")]
        [System.Xml.Serialization.XmlElementAttribute("lset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public System.Collections.Generic.ICollection<long> LimitsResultExpTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("loet")]
        [System.Xml.Serialization.XmlElementAttribute("loet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public System.Collections.Generic.ICollection<long> LimitsOpExecTime { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lrp")]
        [System.Xml.Serialization.XmlElementAttribute("lrp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="long")]
        public System.Collections.Generic.ICollection<long> LimitsRespPersistence { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lda", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CmdhLimitsLimitsDelAggregation LimitsDelAggregationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LimitsDelAggregation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LimitsDelAggregation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LimitsDelAggregationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lda")]
        public System.Nullable<CmdhLimitsLimitsDelAggregation> LimitsDelAggregation
        {
            get
            {
                return this.LimitsDelAggregationValueSpecified ? this.LimitsDelAggregationValue : default(CmdhLimitsLimitsDelAggregation?);
            }
            set
            {
                this.LimitsDelAggregationValue = value.GetValueOrDefault();
                this.LimitsDelAggregationValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhLimits-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhLimits-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CmdhLimitsLimitsDelAggregation", Namespace="http://www.onem2m.org/xml/protocols")]
    public enum CmdhLimitsLimitsDelAggregation
    {
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        False = 0,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        True = 1,
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlEnumAttribute("0 1")]
        TrueAndFalse,
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhNetworkAccessRules-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhNetworkAccessRules-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cmnr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cmnr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("cmdhNetworkAccessRules", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CmdhNetworkAccessRules : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aecs")]
        [System.Xml.Serialization.XmlElementAttribute("aecs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<string> ApplicableEventCategories { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cmlk")]
        [System.Xml.Serialization.XmlElementAttribute("cmlk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.MgmtLinkRef> MgmtLink { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.MgmtLinkRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MgmtLink-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MgmtLink collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MgmtLinkSpecified => (this.MgmtLink.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhNwAccessRule-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhNwAccessRule-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cmwr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cmwr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("cmdhNwAccessRule", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CmdhNwAccessRule : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ttn")]
        [System.Xml.Serialization.XmlElementAttribute("ttn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> TargetNetwork { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mrv")]
        [System.Xml.Serialization.XmlElementAttribute("mrv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long MinReqVolume { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swt")]
        [System.Xml.Serialization.XmlElementAttribute("swt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SpreadingWaitTime { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("bop")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<BackOffParametersBackOffParametersSet>), "bops")]
        [System.Xml.Serialization.XmlArrayAttribute("bop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("bops", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.BackOffParametersBackOffParametersSet> BackOffParameters { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ohc")]
        [System.Xml.Serialization.XmlElementAttribute("ohc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public object OtherConditions { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cmlk")]
        [System.Xml.Serialization.XmlElementAttribute("cmlk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MgmtLinkRef MgmtLink { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-cmdhPolicy-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-cmdhPolicy-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cmp", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cmp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("cmdhPolicy", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CmdhPolicy : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cpn")]
        [System.Xml.Serialization.XmlElementAttribute("cpn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string CmdhPolicyName { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cmlk")]
        [System.Xml.Serialization.XmlElementAttribute("cmlk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.MgmtLinkRef> MgmtLink { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-memory-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-memory-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mem", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("mem")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("memory", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Memory : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-memory-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mma")]
        [System.Xml.Serialization.XmlElementAttribute("mma", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedLong")]
        public ulong MemAvailable { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-memory-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mmt")]
        [System.Xml.Serialization.XmlElementAttribute("mmt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedLong")]
        public ulong MemTotal { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-memory-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-memory-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("memA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("memA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("memoryAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class MemoryAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-memory-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mma", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedLong")]
        public ulong MemAvailableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemAvailable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemAvailable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MemAvailableValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-memory-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mma")]
        public System.Nullable<ulong> MemAvailable
        {
            get
            {
                return this.MemAvailableValueSpecified ? this.MemAvailableValue : default(ulong?);
            }
            set
            {
                this.MemAvailableValue = value.GetValueOrDefault();
                this.MemAvailableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-memory-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("mmt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedLong")]
        public ulong MemTotalValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemTotal-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MemTotal property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MemTotalValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-memory-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("mmt")]
        public System.Nullable<ulong> MemTotal
        {
            get
            {
                return this.MemTotalValueSpecified ? this.MemTotalValue : default(ulong?);
            }
            set
            {
                this.MemTotalValue = value.GetValueOrDefault();
                this.MemTotalValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-firmware-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-firmware-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fwr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("fwr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("firmware", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Firmware : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("vr")]
        [System.Xml.Serialization.XmlElementAttribute("vr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fwn")]
        [System.Xml.Serialization.XmlElementAttribute("fwn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string FirmwareName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ud")]
        [System.Xml.Serialization.XmlElementAttribute("ud", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool Update { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uds")]
        [System.Xml.Serialization.XmlElementAttribute("uds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ActionStatus UpdateStatus { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-firmware-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-firmware-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fwrA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("fwrA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("firmwareAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class FirmwareAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("vr")]
        [System.Xml.Serialization.XmlElementAttribute("vr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fwn")]
        [System.Xml.Serialization.XmlElementAttribute("fwn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string FirmwareName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ud", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool UpdateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Update-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Update property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool UpdateValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ud")]
        public System.Nullable<bool> Update
        {
            get
            {
                return this.UpdateValueSpecified ? this.UpdateValue : default(bool?);
            }
            set
            {
                this.UpdateValue = value.GetValueOrDefault();
                this.UpdateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uds")]
        [System.Xml.Serialization.XmlElementAttribute("uds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ActionStatus UpdateStatus { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-software-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-software-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("swr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("swr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("software", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Software : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("vr")]
        [System.Xml.Serialization.XmlElementAttribute("vr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swn")]
        [System.Xml.Serialization.XmlElementAttribute("swn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string SoftwareName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("in")]
        [System.Xml.Serialization.XmlElementAttribute("in", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool Install { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("un")]
        [System.Xml.Serialization.XmlElementAttribute("un", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool Uninstall { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ins")]
        [System.Xml.Serialization.XmlElementAttribute("ins", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ActionStatus InstallStatus { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("act", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ActivateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Activate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Activate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ActivateValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("act")]
        public System.Nullable<bool> Activate
        {
            get
            {
                return this.ActivateValueSpecified ? this.ActivateValue : default(bool?);
            }
            set
            {
                this.ActivateValue = value.GetValueOrDefault();
                this.ActivateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DeactivateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Deactivate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deactivate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeactivateValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dea")]
        public System.Nullable<bool> Deactivate
        {
            get
            {
                return this.DeactivateValueSpecified ? this.DeactivateValue : default(bool?);
            }
            set
            {
                this.DeactivateValue = value.GetValueOrDefault();
                this.DeactivateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acts")]
        [System.Xml.Serialization.XmlElementAttribute("acts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ActionStatus ActiveStatus { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-software-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-software-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("swrA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("swrA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("softwareAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class SoftwareAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("vr")]
        [System.Xml.Serialization.XmlElementAttribute("vr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swn")]
        [System.Xml.Serialization.XmlElementAttribute("swn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string SoftwareName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("url")]
        [System.Xml.Serialization.XmlElementAttribute("url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string URL { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("in", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool InstallValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Install-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Install property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool InstallValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("in")]
        public System.Nullable<bool> Install
        {
            get
            {
                return this.InstallValueSpecified ? this.InstallValue : default(bool?);
            }
            set
            {
                this.InstallValue = value.GetValueOrDefault();
                this.InstallValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("un", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool UninstallValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Uninstall-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Uninstall property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool UninstallValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("un")]
        public System.Nullable<bool> Uninstall
        {
            get
            {
                return this.UninstallValueSpecified ? this.UninstallValue : default(bool?);
            }
            set
            {
                this.UninstallValue = value.GetValueOrDefault();
                this.UninstallValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ins")]
        [System.Xml.Serialization.XmlElementAttribute("ins", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ActionStatus InstallStatus { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("act", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ActivateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Activate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Activate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ActivateValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("act")]
        public System.Nullable<bool> Activate
        {
            get
            {
                return this.ActivateValueSpecified ? this.ActivateValue : default(bool?);
            }
            set
            {
                this.ActivateValue = value.GetValueOrDefault();
                this.ActivateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dea", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DeactivateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Deactivate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deactivate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeactivateValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dea")]
        public System.Nullable<bool> Deactivate
        {
            get
            {
                return this.DeactivateValueSpecified ? this.DeactivateValue : default(bool?);
            }
            set
            {
                this.DeactivateValue = value.GetValueOrDefault();
                this.DeactivateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acts")]
        [System.Xml.Serialization.XmlElementAttribute("acts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ActionStatus ActiveStatus { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-deviceInfo-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-deviceInfo-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dvi", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dvi")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("deviceInfo", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class DeviceInfo : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dlb")]
        [System.Xml.Serialization.XmlElementAttribute("dlb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DeviceLabel { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("man")]
        [System.Xml.Serialization.XmlElementAttribute("man", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Manufacturer { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mod")]
        [System.Xml.Serialization.XmlElementAttribute("mod", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Model { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dty")]
        [System.Xml.Serialization.XmlElementAttribute("dty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DeviceType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fwv")]
        [System.Xml.Serialization.XmlElementAttribute("fwv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string FwVersion { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swv")]
        [System.Xml.Serialization.XmlElementAttribute("swv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string SwVersion { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hwv")]
        [System.Xml.Serialization.XmlElementAttribute("hwv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string HwVersion { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-deviceInfo-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-deviceInfo-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dviA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dviA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("deviceInfoAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class DeviceInfoAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dlb")]
        [System.Xml.Serialization.XmlElementAttribute("dlb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DeviceLabel { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("man")]
        [System.Xml.Serialization.XmlElementAttribute("man", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Manufacturer { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mod")]
        [System.Xml.Serialization.XmlElementAttribute("mod", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Model { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dty")]
        [System.Xml.Serialization.XmlElementAttribute("dty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string DeviceType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fwv")]
        [System.Xml.Serialization.XmlElementAttribute("fwv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string FwVersion { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swv")]
        [System.Xml.Serialization.XmlElementAttribute("swv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string SwVersion { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hwv")]
        [System.Xml.Serialization.XmlElementAttribute("hwv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string HwVersion { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-deviceCapability-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-deviceCapability-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dvc", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dvc")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("deviceCapability", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class DeviceCapability : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("can")]
        [System.Xml.Serialization.XmlElementAttribute("can", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string CapabilityName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("att")]
        [System.Xml.Serialization.XmlElementAttribute("att", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool Attached { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cas")]
        [System.Xml.Serialization.XmlElementAttribute("cas", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ActionStatus CapabilityActionStatus { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cus")]
        [System.Xml.Serialization.XmlElementAttribute("cus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool CurrentState { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ena", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool EnableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Enable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EnableValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ena")]
        public System.Nullable<bool> Enable
        {
            get
            {
                return this.EnableValueSpecified ? this.EnableValue : default(bool?);
            }
            set
            {
                this.EnableValue = value.GetValueOrDefault();
                this.EnableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DisableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Disable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Disable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DisableValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dis")]
        public System.Nullable<bool> Disable
        {
            get
            {
                return this.DisableValueSpecified ? this.DisableValue : default(bool?);
            }
            set
            {
                this.DisableValue = value.GetValueOrDefault();
                this.DisableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-deviceCapability-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-deviceCapability-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dvcA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dvcA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("deviceCapabilityAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class DeviceCapabilityAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("can")]
        [System.Xml.Serialization.XmlElementAttribute("can", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string CapabilityName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("att", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool AttachedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Attached-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Attached property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AttachedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("att")]
        public System.Nullable<bool> Attached
        {
            get
            {
                return this.AttachedValueSpecified ? this.AttachedValue : default(bool?);
            }
            set
            {
                this.AttachedValue = value.GetValueOrDefault();
                this.AttachedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cas")]
        [System.Xml.Serialization.XmlElementAttribute("cas", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ActionStatus CapabilityActionStatus { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool CurrentStateValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CurrentState-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CurrentState property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CurrentStateValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cus")]
        public System.Nullable<bool> CurrentState
        {
            get
            {
                return this.CurrentStateValueSpecified ? this.CurrentStateValue : default(bool?);
            }
            set
            {
                this.CurrentStateValue = value.GetValueOrDefault();
                this.CurrentStateValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ena", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool EnableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Enable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EnableValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ena")]
        public System.Nullable<bool> Enable
        {
            get
            {
                return this.EnableValueSpecified ? this.EnableValue : default(bool?);
            }
            set
            {
                this.EnableValue = value.GetValueOrDefault();
                this.EnableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DisableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Disable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Disable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DisableValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dis")]
        public System.Nullable<bool> Disable
        {
            get
            {
                return this.DisableValueSpecified ? this.DisableValue : default(bool?);
            }
            set
            {
                this.DisableValue = value.GetValueOrDefault();
                this.DisableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-reboot-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-reboot-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rbo", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("rbo")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("reboot", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Reboot : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rbo")]
        [System.Xml.Serialization.XmlElementAttribute("rbo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RebootProperty { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("far")]
        [System.Xml.Serialization.XmlElementAttribute("far", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool FactoryReset { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-reboot-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-reboot-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rboA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("rboA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("rebootAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class RebootAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rbo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RebootValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Reboot-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Reboot property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RebootValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rbo")]
        public System.Nullable<bool> Reboot
        {
            get
            {
                return this.RebootValueSpecified ? this.RebootValue : default(bool?);
            }
            set
            {
                this.RebootValue = value.GetValueOrDefault();
                this.RebootValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("far", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool FactoryResetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FactoryReset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FactoryReset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool FactoryResetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("far")]
        public System.Nullable<bool> FactoryReset
        {
            get
            {
                return this.FactoryResetValueSpecified ? this.FactoryResetValue : default(bool?);
            }
            set
            {
                this.FactoryResetValue = value.GetValueOrDefault();
                this.FactoryResetValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-eventLog-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-eventLog-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("evl", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("evl")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("eventLog", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class EventLog : GridNet.OneM2M.Types.MgmtResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lgt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.LogTypeId LogTypeIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LogTypeId-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogTypeId property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LogTypeIdValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lgt")]
        public System.Nullable<GridNet.OneM2M.Types.LogTypeId> LogTypeId
        {
            get
            {
                return this.LogTypeIdValueSpecified ? this.LogTypeIdValue : default(GridNet.OneM2M.Types.LogTypeId?);
            }
            set
            {
                this.LogTypeIdValue = value.GetValueOrDefault();
                this.LogTypeIdValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lgd")]
        [System.Xml.Serialization.XmlElementAttribute("lgd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string LogData { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lgst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.LogStatus LogStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LogStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LogStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lgst")]
        public System.Nullable<GridNet.OneM2M.Types.LogStatus> LogStatus
        {
            get
            {
                return this.LogStatusValueSpecified ? this.LogStatusValue : default(GridNet.OneM2M.Types.LogStatus?);
            }
            set
            {
                this.LogStatusValue = value.GetValueOrDefault();
                this.LogStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lga")]
        [System.Xml.Serialization.XmlElementAttribute("lga", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool LogStart { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lgo")]
        [System.Xml.Serialization.XmlElementAttribute("lgo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool LogStop { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-eventLog-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-eventLog-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("evlA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("evlA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("eventLogAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class EventLogAnnc : GridNet.OneM2M.Types.AnnouncedMgmtResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lgt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.LogTypeId LogTypeIdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LogTypeId-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogTypeId property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LogTypeIdValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lgt")]
        public System.Nullable<GridNet.OneM2M.Types.LogTypeId> LogTypeId
        {
            get
            {
                return this.LogTypeIdValueSpecified ? this.LogTypeIdValue : default(GridNet.OneM2M.Types.LogTypeId?);
            }
            set
            {
                this.LogTypeIdValue = value.GetValueOrDefault();
                this.LogTypeIdValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lgd")]
        [System.Xml.Serialization.XmlElementAttribute("lgd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string LogData { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lgst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.LogStatus LogStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LogStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LogStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lgst")]
        public System.Nullable<GridNet.OneM2M.Types.LogStatus> LogStatus
        {
            get
            {
                return this.LogStatusValueSpecified ? this.LogStatusValue : default(GridNet.OneM2M.Types.LogStatus?);
            }
            set
            {
                this.LogStatusValue = value.GetValueOrDefault();
                this.LogStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lga", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool LogStartValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LogStart-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogStart property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LogStartValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lga")]
        public System.Nullable<bool> LogStart
        {
            get
            {
                return this.LogStartValueSpecified ? this.LogStartValue : default(bool?);
            }
            set
            {
                this.LogStartValue = value.GetValueOrDefault();
                this.LogStartValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lgo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool LogStopValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LogStop-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LogStop property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LogStopValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lgo")]
        public System.Nullable<bool> LogStop
        {
            get
            {
                return this.LogStopValueSpecified ? this.LogStopValue : default(bool?);
            }
            set
            {
                this.LogStopValue = value.GetValueOrDefault();
                this.LogStopValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-node-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-node-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("nod", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("nod")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("node", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Node : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ni")]
        [System.Xml.Serialization.XmlElementAttribute("ni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string NodeID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hcl")]
        [System.Xml.Serialization.XmlElementAttribute("hcl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string HostedCSELink { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mem")]
        [System.Xml.Serialization.XmlElementAttribute("mem", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Memory> Memory { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Memory>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Memory-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Memory collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MemorySpecified => (this.Memory.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("bat")]
        [System.Xml.Serialization.XmlElementAttribute("bat", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Battery> Battery { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Battery>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Battery-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Battery collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool BatterySpecified => (this.Battery.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ani")]
        [System.Xml.Serialization.XmlElementAttribute("ani", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AreaNwkInfo> AreaNwkInfo { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AreaNwkInfo>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AreaNwkInfo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AreaNwkInfo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AreaNwkInfoSpecified => (this.AreaNwkInfo.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("andi")]
        [System.Xml.Serialization.XmlElementAttribute("andi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AreaNwkDeviceInfo> AreaNwkDeviceInfo { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AreaNwkDeviceInfo>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AreaNwkDeviceInfo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AreaNwkDeviceInfo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AreaNwkDeviceInfoSpecified => (this.AreaNwkDeviceInfo.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fwr")]
        [System.Xml.Serialization.XmlElementAttribute("fwr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Firmware> Firmware { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Firmware>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Firmware-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Firmware collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool FirmwareSpecified => (this.Firmware.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swr")]
        [System.Xml.Serialization.XmlElementAttribute("swr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Software> Software { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Software>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Software-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Software collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SoftwareSpecified => (this.Software.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dvi")]
        [System.Xml.Serialization.XmlElementAttribute("dvi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DeviceInfo> DeviceInfo { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DeviceInfo>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeviceInfo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DeviceInfo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeviceInfoSpecified => (this.DeviceInfo.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dvc")]
        [System.Xml.Serialization.XmlElementAttribute("dvc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DeviceCapability> DeviceCapability { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DeviceCapability>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeviceCapability-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DeviceCapability collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeviceCapabilitySpecified => (this.DeviceCapability.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rbo")]
        [System.Xml.Serialization.XmlElementAttribute("rbo", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Reboot> Reboot { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Reboot>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Reboot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Reboot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RebootSpecified => (this.Reboot.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("evl")]
        [System.Xml.Serialization.XmlElementAttribute("evl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.EventLog> EventLog { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.EventLog>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EventLog-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EventLog collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EventLogSpecified => (this.EventLog.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cmp")]
        [System.Xml.Serialization.XmlElementAttribute("cmp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.CmdhPolicy> CmdhPolicy { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.CmdhPolicy>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CmdhPolicy-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CmdhPolicy collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CmdhPolicySpecified => (this.CmdhPolicy.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acmp")]
        [System.Xml.Serialization.XmlElementAttribute("acmp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ActiveCmdhPolicy> ActiveCmdhPolicy { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ActiveCmdhPolicy>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ActiveCmdhPolicy-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ActiveCmdhPolicy collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ActiveCmdhPolicySpecified => (this.ActiveCmdhPolicy.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trpt")]
        [System.Xml.Serialization.XmlElementAttribute("trpt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TrafficPattern> TrafficPattern { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TrafficPattern>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TrafficPattern-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TrafficPattern collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TrafficPatternSpecified => (this.TrafficPattern.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-node-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-node-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("nodA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("nodA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("nodeAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class NodeAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ni")]
        [System.Xml.Serialization.XmlElementAttribute("ni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string NodeID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hcl")]
        [System.Xml.Serialization.XmlElementAttribute("hcl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string HostedCSELink { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("memA")]
        [System.Xml.Serialization.XmlElementAttribute("memA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.MemoryAnnc> MemoryAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.MemoryAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MemoryAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MemoryAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MemoryAnncSpecified => (this.MemoryAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("batA")]
        [System.Xml.Serialization.XmlElementAttribute("batA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.BatteryAnnc> BatteryAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.BatteryAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BatteryAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BatteryAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool BatteryAnncSpecified => (this.BatteryAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aniA")]
        [System.Xml.Serialization.XmlElementAttribute("aniA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AreaNwkInfoAnnc> AreaNwkInfoAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AreaNwkInfoAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AreaNwkInfoAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AreaNwkInfoAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AreaNwkInfoAnncSpecified => (this.AreaNwkInfoAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("andiA")]
        [System.Xml.Serialization.XmlElementAttribute("andiA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AreaNwkDeviceInfoAnnc> AreaNwkDeviceInfoAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AreaNwkDeviceInfoAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AreaNwkDeviceInfoAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AreaNwkDeviceInfoAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AreaNwkDeviceInfoAnncSpecified => (this.AreaNwkDeviceInfoAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fwrA")]
        [System.Xml.Serialization.XmlElementAttribute("fwrA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.FirmwareAnnc> FirmwareAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.FirmwareAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FirmwareAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FirmwareAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool FirmwareAnncSpecified => (this.FirmwareAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("swrA")]
        [System.Xml.Serialization.XmlElementAttribute("swrA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SoftwareAnnc> SoftwareAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SoftwareAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SoftwareAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SoftwareAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SoftwareAnncSpecified => (this.SoftwareAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dviA")]
        [System.Xml.Serialization.XmlElementAttribute("dviA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DeviceInfoAnnc> DeviceInfoAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DeviceInfoAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeviceInfoAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DeviceInfoAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeviceInfoAnncSpecified => (this.DeviceInfoAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dvcA")]
        [System.Xml.Serialization.XmlElementAttribute("dvcA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DeviceCapabilityAnnc> DeviceCapabilityAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DeviceCapabilityAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeviceCapabilityAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DeviceCapabilityAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeviceCapabilityAnncSpecified => (this.DeviceCapabilityAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rboA")]
        [System.Xml.Serialization.XmlElementAttribute("rboA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.RebootAnnc> RebootAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.RebootAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RebootAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RebootAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RebootAnncSpecified => (this.RebootAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("evlA")]
        [System.Xml.Serialization.XmlElementAttribute("evlA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.EventLogAnnc> EventLogAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.EventLogAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EventLogAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EventLogAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EventLogAnncSpecified => (this.EventLogAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trptA")]
        [System.Xml.Serialization.XmlElementAttribute("trptA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TrafficPatternAnnc> TrafficPatternAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TrafficPatternAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TrafficPatternAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TrafficPatternAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TrafficPatternAnncSpecified => (this.TrafficPatternAnnc.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-locationPolicy-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-locationPolicy-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lcp", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("lcp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("locationPolicy", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class LocationPolicy : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("los", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.LocationSource LocationSourceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationSource-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LocationSource property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocationSourceValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("los")]
        public System.Nullable<GridNet.OneM2M.Types.LocationSource> LocationSource
        {
            get
            {
                return this.LocationSourceValueSpecified ? this.LocationSourceValue : default(GridNet.OneM2M.Types.LocationSource?);
            }
            set
            {
                this.LocationSourceValue = value.GetValueOrDefault();
                this.LocationSourceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lou", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.TimeSpan LocationUpdatePeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationUpdatePeriod-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LocationUpdatePeriod property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocationUpdatePeriodValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lou")]
        public System.Nullable<System.TimeSpan> LocationUpdatePeriod
        {
            get
            {
                return this.LocationUpdatePeriodValueSpecified ? this.LocationUpdatePeriodValue : default(System.TimeSpan?);
            }
            set
            {
                this.LocationUpdatePeriodValue = value.GetValueOrDefault();
                this.LocationUpdatePeriodValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lot")]
        [System.Xml.Serialization.XmlElementAttribute("lot", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string LocationTargetID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lor")]
        [System.Xml.Serialization.XmlElementAttribute("lor", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string LocationServer { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("loi")]
        [System.Xml.Serialization.XmlElementAttribute("loi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string LocationContainerID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lon")]
        [System.Xml.Serialization.XmlElementAttribute("lon", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string LocationContainerName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lost")]
        [System.Xml.Serialization.XmlElementAttribute("lost", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string LocationStatus { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-locationPolicy-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-locationPolicy-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lcpA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("lcpA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("locationPolicyAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class LocationPolicyAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("los", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.LocationSource LocationSourceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationSource-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LocationSource property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocationSourceValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("los")]
        public System.Nullable<GridNet.OneM2M.Types.LocationSource> LocationSource
        {
            get
            {
                return this.LocationSourceValueSpecified ? this.LocationSourceValue : default(GridNet.OneM2M.Types.LocationSource?);
            }
            set
            {
                this.LocationSourceValue = value.GetValueOrDefault();
                this.LocationSourceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("lou", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.TimeSpan LocationUpdatePeriodValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationUpdatePeriod-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LocationUpdatePeriod property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocationUpdatePeriodValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lou")]
        public System.Nullable<System.TimeSpan> LocationUpdatePeriod
        {
            get
            {
                return this.LocationUpdatePeriodValueSpecified ? this.LocationUpdatePeriodValue : default(System.TimeSpan?);
            }
            set
            {
                this.LocationUpdatePeriodValue = value.GetValueOrDefault();
                this.LocationUpdatePeriodValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lot")]
        [System.Xml.Serialization.XmlElementAttribute("lot", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string LocationTargetID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lor")]
        [System.Xml.Serialization.XmlElementAttribute("lor", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string LocationServer { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("loi")]
        [System.Xml.Serialization.XmlElementAttribute("loi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string LocationContainerID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lon")]
        [System.Xml.Serialization.XmlElementAttribute("lon", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string LocationContainerName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lost")]
        [System.Xml.Serialization.XmlElementAttribute("lost", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string LocationStatus { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-remoteCSE-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-remoteCSE-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("csr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("csr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("remoteCSE", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class RemoteCSE : GridNet.OneM2M.Types.AnnounceableResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.CseTypeID CseTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CseType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CseType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CseTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cst")]
        public System.Nullable<GridNet.OneM2M.Types.CseTypeID> CseType
        {
            get
            {
                return this.CseTypeValueSpecified ? this.CseTypeValue : default(GridNet.OneM2M.Types.CseTypeID?);
            }
            set
            {
                this.CseTypeValue = value.GetValueOrDefault();
                this.CseTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("poa")]
        [System.Xml.Serialization.XmlElementAttribute("poa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> PointOfAccess { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PointOfAccess-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PointOfAccess collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PointOfAccessSpecified => (this.PointOfAccess.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cb")]
        [System.Xml.Serialization.XmlElementAttribute("cb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string CSEBase { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("csi")]
        [System.Xml.Serialization.XmlElementAttribute("csi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string CSE_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mei")]
        [System.Xml.Serialization.XmlElementAttribute("mei", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string M2M_Ext_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 65535.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(uint), "0", "65535")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("tri", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedInt")]
        public uint Trigger_Recipient_IDValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Trigger_Recipient_ID-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Trigger_Recipient_ID property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Trigger_Recipient_IDValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 65535.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("tri")]
        public System.Nullable<uint> Trigger_Recipient_ID
        {
            get
            {
                return this.Trigger_Recipient_IDValueSpecified ? this.Trigger_Recipient_IDValue : default(uint?);
            }
            set
            {
                this.Trigger_Recipient_IDValue = value.GetValueOrDefault();
                this.Trigger_Recipient_IDValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rr")]
        [System.Xml.Serialization.XmlElementAttribute("rr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RequestReachability { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nl")]
        [System.Xml.Serialization.XmlElementAttribute("nl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string NodeLink { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esi")]
        [System.Xml.Serialization.XmlElementAttribute("esi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.E2ESecInfo E2ESecInfo { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("trn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="unsignedInt")]
        public uint TriggerReferenceNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TriggerReferenceNumber-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TriggerReferenceNumber property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TriggerReferenceNumberValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-trafficPattern-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trn")]
        public System.Nullable<uint> TriggerReferenceNumber
        {
            get
            {
                return this.TriggerReferenceNumberValueSpecified ? this.TriggerReferenceNumberValue : default(uint?);
            }
            set
            {
                this.TriggerReferenceNumberValue = value.GetValueOrDefault();
                this.TriggerReferenceNumberValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nodA")]
        [System.Xml.Serialization.XmlElementAttribute("nodA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.NodeAnnc> NodeAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.NodeAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NodeAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NodeAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NodeAnncSpecified => (this.NodeAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Container> Container { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Container-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Container collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerSpecified => (this.Container.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cntA")]
        [System.Xml.Serialization.XmlElementAttribute("cntA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ContainerAnnc> ContainerAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ContainerAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContainerAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContainerAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerAnncSpecified => (this.ContainerAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grp")]
        [System.Xml.Serialization.XmlElementAttribute("grp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Group> Group { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Group>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Group-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Group collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GroupSpecified => (this.Group.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grpA")]
        [System.Xml.Serialization.XmlElementAttribute("grpA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.GroupAnnc> GroupAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.GroupAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GroupAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GroupAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GroupAnncSpecified => (this.GroupAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acp")]
        [System.Xml.Serialization.XmlElementAttribute("acp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlPolicy> AccessControlPolicy { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlPolicy>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicy-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicy collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicySpecified => (this.AccessControlPolicy.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acpA")]
        [System.Xml.Serialization.XmlElementAttribute("acpA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlPolicyAnnc> AccessControlPolicyAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlPolicyAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicyAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicyAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicyAnncSpecified => (this.AccessControlPolicyAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pch")]
        [System.Xml.Serialization.XmlElementAttribute("pch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.PollingChannel> PollingChannel { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.PollingChannel>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PollingChannel-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PollingChannel collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PollingChannelSpecified => (this.PollingChannel.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sch")]
        [System.Xml.Serialization.XmlElementAttribute("sch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Schedule> Schedule { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Schedule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Schedule-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Schedule collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleSpecified => (this.Schedule.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ts")]
        [System.Xml.Serialization.XmlElementAttribute("ts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeries> TimeSeries { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeries>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeries-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeries collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesSpecified => (this.TimeSeries.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tsa")]
        [System.Xml.Serialization.XmlElementAttribute("tsa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeriesAnnc> TimeSeriesAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeriesAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeriesAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeriesAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesAnncSpecified => (this.TimeSeriesAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lcpA")]
        [System.Xml.Serialization.XmlElementAttribute("lcpA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.LocationPolicyAnnc> LocationPolicyAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.LocationPolicyAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationPolicyAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LocationPolicyAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocationPolicyAnncSpecified => (this.LocationPolicyAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aeA")]
        [System.Xml.Serialization.XmlElementAttribute("aeA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AEAnnc> AEAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AEAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AEAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AEAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AEAnncSpecified => (this.AEAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_flexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_flexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.FlexContainerResource> Sg_FlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.FlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_FlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_FlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_FlexContainerResourceSpecified => (this.Sg_FlexContainerResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announcedFlexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announcedFlexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AnnouncedFlexContainerResource> Sg_AnnouncedFlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AnnouncedFlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_AnnouncedFlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_AnnouncedFlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_AnnouncedFlexContainerResourceSpecified => (this.Sg_AnnouncedFlexContainerResource.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-remoteCSE-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-remoteCSE-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("csrA", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("csrA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("remoteCSEAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class RemoteCSEAnnc : GridNet.OneM2M.Types.AnnouncedResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.CseTypeID CseTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CseType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CseType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CseTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cst")]
        public System.Nullable<GridNet.OneM2M.Types.CseTypeID> CseType
        {
            get
            {
                return this.CseTypeValueSpecified ? this.CseTypeValue : default(GridNet.OneM2M.Types.CseTypeID?);
            }
            set
            {
                this.CseTypeValue = value.GetValueOrDefault();
                this.CseTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("poa")]
        [System.Xml.Serialization.XmlElementAttribute("poa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> PointOfAccess { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PointOfAccess-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PointOfAccess collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PointOfAccessSpecified => (this.PointOfAccess.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cb")]
        [System.Xml.Serialization.XmlElementAttribute("cb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string CSEBase { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("csi")]
        [System.Xml.Serialization.XmlElementAttribute("csi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string CSE_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool RequestReachabilityValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RequestReachability-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestReachability property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RequestReachabilityValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rr")]
        public System.Nullable<bool> RequestReachability
        {
            get
            {
                return this.RequestReachabilityValueSpecified ? this.RequestReachabilityValue : default(bool?);
            }
            set
            {
                this.RequestReachabilityValue = value.GetValueOrDefault();
                this.RequestReachabilityValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nl")]
        [System.Xml.Serialization.XmlElementAttribute("nl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string NodeLink { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esi")]
        [System.Xml.Serialization.XmlElementAttribute("esi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.E2ESecInfo E2ESecInfo { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nodA")]
        [System.Xml.Serialization.XmlElementAttribute("nodA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.NodeAnnc> NodeAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.NodeAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NodeAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NodeAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NodeAnncSpecified => (this.NodeAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Container> Container { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Container-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Container collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerSpecified => (this.Container.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cntA")]
        [System.Xml.Serialization.XmlElementAttribute("cntA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ContainerAnnc> ContainerAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ContainerAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContainerAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContainerAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerAnncSpecified => (this.ContainerAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grp")]
        [System.Xml.Serialization.XmlElementAttribute("grp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Group> Group { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Group>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Group-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Group collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GroupSpecified => (this.Group.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grpA")]
        [System.Xml.Serialization.XmlElementAttribute("grpA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.GroupAnnc> GroupAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.GroupAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GroupAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GroupAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GroupAnncSpecified => (this.GroupAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acp")]
        [System.Xml.Serialization.XmlElementAttribute("acp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlPolicy> AccessControlPolicy { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlPolicy>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicy-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicy collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicySpecified => (this.AccessControlPolicy.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acpA")]
        [System.Xml.Serialization.XmlElementAttribute("acpA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlPolicyAnnc> AccessControlPolicyAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlPolicyAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicyAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicyAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicyAnncSpecified => (this.AccessControlPolicyAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pch")]
        [System.Xml.Serialization.XmlElementAttribute("pch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.PollingChannel> PollingChannel { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.PollingChannel>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PollingChannel-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PollingChannel collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PollingChannelSpecified => (this.PollingChannel.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("schA")]
        [System.Xml.Serialization.XmlElementAttribute("schA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ScheduleAnnc> ScheduleAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ScheduleAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ScheduleAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ScheduleAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleAnncSpecified => (this.ScheduleAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lcpA")]
        [System.Xml.Serialization.XmlElementAttribute("lcpA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.LocationPolicyAnnc> LocationPolicyAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.LocationPolicyAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationPolicyAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LocationPolicyAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocationPolicyAnncSpecified => (this.LocationPolicyAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ts")]
        [System.Xml.Serialization.XmlElementAttribute("ts", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeries> TimeSeries { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeries>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeries-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeries collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesSpecified => (this.TimeSeries.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tsa")]
        [System.Xml.Serialization.XmlElementAttribute("tsa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.TimeSeriesAnnc> TimeSeriesAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.TimeSeriesAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimeSeriesAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TimeSeriesAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TimeSeriesAnncSpecified => (this.TimeSeriesAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aeA")]
        [System.Xml.Serialization.XmlElementAttribute("aeA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AEAnnc> AEAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AEAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AEAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AEAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AEAnncSpecified => (this.AEAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_flexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_flexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.FlexContainerResource> Sg_FlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.FlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_FlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_FlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_FlexContainerResourceSpecified => (this.Sg_FlexContainerResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_announcedFlexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_announcedFlexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AnnouncedFlexContainerResource> Sg_AnnouncedFlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AnnouncedFlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_AnnouncedFlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_AnnouncedFlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_AnnouncedFlexContainerResourceSpecified => (this.Sg_AnnouncedFlexContainerResource.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-execInstance-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-execInstance-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("exin", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("exin")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("execInstance", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ExecInstance : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ExecStatusType ExecStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exs")]
        public System.Nullable<GridNet.OneM2M.Types.ExecStatusType> ExecStatus
        {
            get
            {
                return this.ExecStatusValueSpecified ? this.ExecStatusValue : default(GridNet.OneM2M.Types.ExecStatusType?);
            }
            set
            {
                this.ExecStatusValue = value.GetValueOrDefault();
                this.ExecStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ExecResultType ExecResultValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecResult-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecResult property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecResultValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exr")]
        public System.Nullable<GridNet.OneM2M.Types.ExecResultType> ExecResult
        {
            get
            {
                return this.ExecResultValueSpecified ? this.ExecResultValue : default(GridNet.OneM2M.Types.ExecResultType?);
            }
            set
            {
                this.ExecResultValue = value.GetValueOrDefault();
                this.ExecResultValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ExecDisableValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecDisable-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecDisable property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecDisableValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exd")]
        public System.Nullable<bool> ExecDisable
        {
            get
            {
                return this.ExecDisableValueSpecified ? this.ExecDisableValue : default(bool?);
            }
            set
            {
                this.ExecDisableValue = value.GetValueOrDefault();
                this.ExecDisableValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ext")]
        [System.Xml.Serialization.XmlElementAttribute("ext", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string ExecTarget { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ExecModeType ExecModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecMode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecModeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exm")]
        public System.Nullable<GridNet.OneM2M.Types.ExecModeType> ExecMode
        {
            get
            {
                return this.ExecModeValueSpecified ? this.ExecModeValue : default(GridNet.OneM2M.Types.ExecModeType?);
            }
            set
            {
                this.ExecModeValue = value.GetValueOrDefault();
                this.ExecModeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exf", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public System.TimeSpan ExecFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecFrequency-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecFrequency property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecFrequencyValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exf")]
        public System.Nullable<System.TimeSpan> ExecFrequency
        {
            get
            {
                return this.ExecFrequencyValueSpecified ? this.ExecFrequencyValue : default(System.TimeSpan?);
            }
            set
            {
                this.ExecFrequencyValue = value.GetValueOrDefault();
                this.ExecFrequencyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public System.TimeSpan ExecDelayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecDelay-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecDelay property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecDelayValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exy")]
        public System.Nullable<System.TimeSpan> ExecDelay
        {
            get
            {
                return this.ExecDelayValueSpecified ? this.ExecDelayValue : default(System.TimeSpan?);
            }
            set
            {
                this.ExecDelayValue = value.GetValueOrDefault();
                this.ExecDelayValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long ExecNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecNumber-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecNumber property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecNumberValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exn")]
        public System.Nullable<long> ExecNumber
        {
            get
            {
                return this.ExecNumberValueSpecified ? this.ExecNumberValue : default(long?);
            }
            set
            {
                this.ExecNumberValue = value.GetValueOrDefault();
                this.ExecNumberValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exra")]
        [System.Xml.Serialization.XmlElementAttribute("exra", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ExecReqArgsListType ExecReqArgs { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-mgmtCmd-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-mgmtCmd-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mgc", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("mgc")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("mgmtCmd", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class MgmtCmd : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dc")]
        [System.Xml.Serialization.XmlElementAttribute("dc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Description { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cmt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.CmdType CmdTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CmdType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CmdType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CmdTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cmt")]
        public System.Nullable<GridNet.OneM2M.Types.CmdType> CmdType
        {
            get
            {
                return this.CmdTypeValueSpecified ? this.CmdTypeValue : default(GridNet.OneM2M.Types.CmdType?);
            }
            set
            {
                this.CmdTypeValue = value.GetValueOrDefault();
                this.CmdTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exra")]
        [System.Xml.Serialization.XmlElementAttribute("exra", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ExecReqArgsListType ExecReqArgs { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exe")]
        [System.Xml.Serialization.XmlElementAttribute("exe", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool ExecEnable { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ext")]
        [System.Xml.Serialization.XmlElementAttribute("ext", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string ExecTarget { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ExecModeType ExecModeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecMode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecModeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exm")]
        public System.Nullable<GridNet.OneM2M.Types.ExecModeType> ExecMode
        {
            get
            {
                return this.ExecModeValueSpecified ? this.ExecModeValue : default(GridNet.OneM2M.Types.ExecModeType?);
            }
            set
            {
                this.ExecModeValue = value.GetValueOrDefault();
                this.ExecModeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exf", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public System.TimeSpan ExecFrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecFrequency-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecFrequency property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecFrequencyValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exf")]
        public System.Nullable<System.TimeSpan> ExecFrequency
        {
            get
            {
                return this.ExecFrequencyValueSpecified ? this.ExecFrequencyValue : default(System.TimeSpan?);
            }
            set
            {
                this.ExecFrequencyValue = value.GetValueOrDefault();
                this.ExecFrequencyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exy", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="duration")]
        public System.TimeSpan ExecDelayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecDelay-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecDelay property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecDelayValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exy")]
        public System.Nullable<System.TimeSpan> ExecDelay
        {
            get
            {
                return this.ExecDelayValueSpecified ? this.ExecDelayValue : default(System.TimeSpan?);
            }
            set
            {
                this.ExecDelayValue = value.GetValueOrDefault();
                this.ExecDelayValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long ExecNumberValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecNumber-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ExecNumber property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecNumberValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("exn")]
        public System.Nullable<long> ExecNumber
        {
            get
            {
                return this.ExecNumberValueSpecified ? this.ExecNumberValue : default(long?);
            }
            set
            {
                this.ExecNumberValue = value.GetValueOrDefault();
                this.ExecNumberValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exin")]
        [System.Xml.Serialization.XmlElementAttribute("exin", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ExecInstance> ExecInstance { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ExecInstance>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ExecInstance-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ExecInstance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ExecInstanceSpecified => (this.ExecInstance.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-eventConfig-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-eventConfig-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("evcg", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("evcg")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("eventConfig", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class EventConfig : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("evi")]
        [System.Xml.Serialization.XmlElementAttribute("evi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string EventID { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("evt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.EventType EventTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EventType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EventType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EventTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("evt")]
        public System.Nullable<GridNet.OneM2M.Types.EventType> EventType
        {
            get
            {
                return this.EventTypeValueSpecified ? this.EventTypeValue : default(GridNet.OneM2M.Types.EventType?);
            }
            set
            {
                this.EventTypeValue = value.GetValueOrDefault();
                this.EventTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("eventStart", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset EventStartValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EventStart-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EventStart property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EventStartValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("eventStart")]
        public System.Nullable<System.DateTimeOffset> EventStart
        {
            get
            {
                return this.EventStartValueSpecified ? this.EventStartValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.EventStartValue = value.GetValueOrDefault();
                this.EventStartValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("eve", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset EventEndValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EventEnd-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EventEnd property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EventEndValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("eve")]
        public System.Nullable<System.DateTimeOffset> EventEnd
        {
            get
            {
                return this.EventEndValueSpecified ? this.EventEndValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.EventEndValue = value.GetValueOrDefault();
                this.EventEndValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-eventConfig-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("opt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long OperationTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OperationType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OperationType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OperationTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-eventConfig-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("opt")]
        public System.Nullable<long> OperationType
        {
            get
            {
                return this.OperationTypeValueSpecified ? this.OperationTypeValue : default(long?);
            }
            set
            {
                this.OperationTypeValue = value.GetValueOrDefault();
                this.OperationTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long DataSizeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DataSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DataSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DataSizeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ds")]
        public System.Nullable<long> DataSize
        {
            get
            {
                return this.DataSizeValueSpecified ? this.DataSizeValue : default(long?);
            }
            set
            {
                this.DataSizeValue = value.GetValueOrDefault();
                this.DataSizeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-statsConfig-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-statsConfig-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stcg", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("stcg")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("statsConfig", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class StatsConfig : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("evcg")]
        [System.Xml.Serialization.XmlElementAttribute("evcg", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.EventConfig> EventConfig { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.EventConfig>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EventConfig-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EventConfig collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool EventConfigSpecified => (this.EventConfig.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-statsCollect-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-statsCollect-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stcl", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("stcl")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("statsCollect", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class StatsCollect : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sci")]
        [System.Xml.Serialization.XmlElementAttribute("sci", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string StatsCollectID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cei")]
        [System.Xml.Serialization.XmlElementAttribute("cei", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string CollectingEntityID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cdi")]
        [System.Xml.Serialization.XmlElementAttribute("cdi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string CollectedEntityID { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("srs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.StatsRuleStatusType StatsRuleStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StatsRuleStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatsRuleStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StatsRuleStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("srs")]
        public System.Nullable<GridNet.OneM2M.Types.StatsRuleStatusType> StatsRuleStatus
        {
            get
            {
                return this.StatsRuleStatusValueSpecified ? this.StatsRuleStatusValue : default(GridNet.OneM2M.Types.StatsRuleStatusType?);
            }
            set
            {
                this.StatsRuleStatusValue = value.GetValueOrDefault();
                this.StatsRuleStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("sm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.StatModelType StatModelValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StatModel-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StatModel property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StatModelValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sm")]
        public System.Nullable<GridNet.OneM2M.Types.StatModelType> StatModel
        {
            get
            {
                return this.StatModelValueSpecified ? this.StatModelValue : default(GridNet.OneM2M.Types.StatModelType?);
            }
            set
            {
                this.StatModelValue = value.GetValueOrDefault();
                this.StatModelValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: (([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*)).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(([*]|[1-5]?\d([,-/][1-5]?\d)*)\s+){2}([*]|((1?\d|2[0-3])([,-/](1?\d|2[0-3]))*))\s+([*]|(([1-9]|1\d|2\d|3[01])([,-/]([1-9]|1\d|2\d|3[01]))*))\s+([*]|(([1-9]|1[0-2])([,-/]([1-9]|1[0-2]))*))\s+([*]|([0-6]([,-/][0-6])*))\s+([*]|([2-9]\d\d\d)(([,-]([2-9]\d\d\d)([/][\d]?[\d]?[\d]?[\d])?)*))")]
        [Newtonsoft.Json.JsonPropertyAttribute("cp")]
        [System.Xml.Serialization.XmlArrayAttribute("cp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("sce", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> CollectPeriod { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CollectPeriod-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the CollectPeriod collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CollectPeriodSpecified => (this.CollectPeriod.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("evi")]
        [System.Xml.Serialization.XmlElementAttribute("evi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string EventID { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-request-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-request-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("req", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("req")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("request", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Request : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTag { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("op", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.Operation OperationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Operation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Operation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OperationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("op")]
        public System.Nullable<GridNet.OneM2M.Types.Operation> Operation
        {
            get
            {
                return this.OperationValueSpecified ? this.OperationValue : default(GridNet.OneM2M.Types.Operation?);
            }
            set
            {
                this.OperationValue = value.GetValueOrDefault();
                this.OperationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tg")]
        [System.Xml.Serialization.XmlElementAttribute("tg", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Target { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("or")]
        [System.Xml.Serialization.XmlElementAttribute("or", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Originator { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rid")]
        [System.Xml.Serialization.XmlElementAttribute("rid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string RequestID { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mi")]
        [System.Xml.Serialization.XmlElementAttribute("mi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.MetaInformation MetaInformation { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pc")]
        [System.Xml.Serialization.XmlElementAttribute("pc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.PrimitiveContent PrimitiveContent { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.RequestStatus RequestStatusValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RequestStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RequestStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RequestStatusValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rs")]
        public System.Nullable<GridNet.OneM2M.Types.RequestStatus> RequestStatus
        {
            get
            {
                return this.RequestStatusValueSpecified ? this.RequestStatusValue : default(GridNet.OneM2M.Types.RequestStatus?);
            }
            set
            {
                this.RequestStatusValue = value.GetValueOrDefault();
                this.RequestStatusValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ors")]
        [System.Xml.Serialization.XmlElementAttribute("ors", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.OperationResult OperationResult { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-delivery-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-delivery-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dlv", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dlv")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("delivery", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Delivery : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("st")]
        [System.Xml.Serialization.XmlElementAttribute("st", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long StateTag { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sr")]
        [System.Xml.Serialization.XmlElementAttribute("sr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Source { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tg")]
        [System.Xml.Serialization.XmlElementAttribute("tg", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Target { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("Ls")]
        [System.Xml.Serialization.XmlElementAttribute("Ls", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset Lifespan { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ec")]
        [System.Xml.Serialization.XmlElementAttribute("ec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EventCat { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dmd")]
        [System.Xml.Serialization.XmlElementAttribute("dmd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.DeliveryMetaData DeliveryMetaData { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("arq")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<AggregatedRequestRequest>), "req")]
        [System.Xml.Serialization.XmlArrayAttribute("arq", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("req", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AggregatedRequestRequest> AggregatedRequest { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-serviceSubscribedNode-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-serviceSubscribedNode-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("svsn", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("svsn")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("serviceSubscribedNode", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ServiceSubscribedNode : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ni")]
        [System.Xml.Serialization.XmlElementAttribute("ni", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string NodeID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("csi")]
        [System.Xml.Serialization.XmlElementAttribute("csi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string CSE_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-serviceSubscribedNode-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("di")]
        [System.Xml.Serialization.XmlElementAttribute("di", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] DeviceIdentifier { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rlk")]
        [System.Xml.Serialization.XmlElementAttribute("rlk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> RuleLinks { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RuleLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RuleLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RuleLinksSpecified => (this.RuleLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-m2mServiceSubscriptionProfile-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-m2mServiceSubscriptionProfile-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mssp", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("mssp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("m2mServiceSubscriptionProfile", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class M2MServiceSubscriptionProfile : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("svsn")]
        [System.Xml.Serialization.XmlElementAttribute("svsn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ServiceSubscribedNode> ServiceSubscribedNode { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ServiceSubscribedNode>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ServiceSubscribedNode-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceSubscribedNode collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ServiceSubscribedNodeSpecified => (this.ServiceSubscribedNode.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-serviceSubscribedAppRule-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-serviceSubscribedAppRule-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("asar", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("asar")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("serviceSubscribedAppRule", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class ServiceSubscribedAppRule : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("apci")]
        [System.Xml.Serialization.XmlElementAttribute("apci", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> ApplicableCredIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ApplicableCredIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ApplicableCredIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ApplicableCredIDsSpecified => (this.ApplicableCredIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aai")]
        [System.Xml.Serialization.XmlElementAttribute("aai", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AllowedApp_IDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllowedApp_IDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllowedApp_IDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllowedApp_IDsSpecified => (this.AllowedApp_IDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("aae")]
        [System.Xml.Serialization.XmlElementAttribute("aae", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AllowedAEs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllowedAEs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllowedAEs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllowedAEsSpecified => (this.AllowedAEs.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-role-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-role-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rol", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("rol")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("role", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Role : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("rlid")]
        [System.Xml.Serialization.XmlElementAttribute("rlid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string RoleID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkis")]
        [System.Xml.Serialization.XmlElementAttribute("tkis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Issuer { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkhd")]
        [System.Xml.Serialization.XmlElementAttribute("tkhd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Holder { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tknb")]
        [System.Xml.Serialization.XmlElementAttribute("tknb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset NotBefore { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkna")]
        [System.Xml.Serialization.XmlElementAttribute("tkna", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset NotAfter { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rlnm")]
        [System.Xml.Serialization.XmlElementAttribute("rlnm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string RoleName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rltl")]
        [System.Xml.Serialization.XmlElementAttribute("rltl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string TokenLink { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-token-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-token-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tk", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("tk")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("token", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class Token : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("tkid")]
        [System.Xml.Serialization.XmlElementAttribute("tkid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TokenID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkob")]
        [System.Xml.Serialization.XmlElementAttribute("tkob", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TokenObject { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("vr")]
        [System.Xml.Serialization.XmlElementAttribute("vr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkis")]
        [System.Xml.Serialization.XmlElementAttribute("tkis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Issuer { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkhd")]
        [System.Xml.Serialization.XmlElementAttribute("tkhd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Holder { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tknb")]
        [System.Xml.Serialization.XmlElementAttribute("tknb", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset NotBefore { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("tkna", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset NotAfterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NotAfter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NotAfter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NotAfterValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("tkna")]
        public System.Nullable<System.DateTimeOffset> NotAfter
        {
            get
            {
                return this.NotAfterValueSpecified ? this.NotAfterValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.NotAfterValue = value.GetValueOrDefault();
                this.NotAfterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tknm")]
        [System.Xml.Serialization.XmlElementAttribute("tknm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TokenName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkau")]
        [System.Xml.Serialization.XmlElementAttribute("tkau", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> Audience { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Audience-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Audience collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AudienceSpecified => (this.Audience.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkps")]
        [System.Xml.Serialization.XmlElementAttribute("tkps", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TokenPermissionsItem Permissions { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkex")]
        [System.Xml.Serialization.XmlElementAttribute("tkex", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string Extension { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-token-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-token-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TokenPermissionsItem", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("TokenPermissionsItem")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TokenPermissionsItem
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pm")]
        [System.Xml.Serialization.XmlElementAttribute("pm", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.TokenPermission Permission { get; set; }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-CSEBase-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-CSEBase-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cb", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("cb")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CSEBase", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class CSEBase : GridNet.OneM2M.Types.Resource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acpi")]
        [System.Xml.Serialization.XmlElementAttribute("acpi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> AccessControlPolicyIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicyIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicyIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicyIDsSpecified => (this.AccessControlPolicyIDs.Count != 0);
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("cst", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.CseTypeID CseTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CseType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CseType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool CseTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cst")]
        public System.Nullable<GridNet.OneM2M.Types.CseTypeID> CseType
        {
            get
            {
                return this.CseTypeValueSpecified ? this.CseTypeValue : default(GridNet.OneM2M.Types.CseTypeID?);
            }
            set
            {
                this.CseTypeValue = value.GetValueOrDefault();
                this.CseTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("csi")]
        [System.Xml.Serialization.XmlElementAttribute("csi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string CSE_ID { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-CSEBase-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("srt")]
        [System.Xml.Serialization.XmlElementAttribute("srt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long SupportedResourceType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("poa")]
        [System.Xml.Serialization.XmlElementAttribute("poa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> PointOfAccess { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nl")]
        [System.Xml.Serialization.XmlElementAttribute("nl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string NodeLink { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("esi")]
        [System.Xml.Serialization.XmlElementAttribute("esi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.E2ESecInfo E2ESecInfo { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("csr")]
        [System.Xml.Serialization.XmlElementAttribute("csr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.RemoteCSE> RemoteCSE { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.RemoteCSE>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RemoteCSE-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RemoteCSE collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RemoteCSESpecified => (this.RemoteCSE.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("csrA")]
        [System.Xml.Serialization.XmlElementAttribute("csrA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.RemoteCSEAnnc> RemoteCSEAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.RemoteCSEAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RemoteCSEAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RemoteCSEAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RemoteCSEAnncSpecified => (this.RemoteCSEAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nod")]
        [System.Xml.Serialization.XmlElementAttribute("nod", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Node> Node { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Node>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Node-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Node collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool NodeSpecified => (this.Node.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ae")]
        [System.Xml.Serialization.XmlElementAttribute("ae", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AE> AE { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AE>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AE-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AE collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AESpecified => (this.AE.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cnt")]
        [System.Xml.Serialization.XmlElementAttribute("cnt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Container> Container { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Container>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Container-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Container collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ContainerSpecified => (this.Container.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("grp")]
        [System.Xml.Serialization.XmlElementAttribute("grp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Group> Group { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Group>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Group-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Group collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GroupSpecified => (this.Group.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("acp")]
        [System.Xml.Serialization.XmlElementAttribute("acp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AccessControlPolicy> AccessControlPolicy { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AccessControlPolicy>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccessControlPolicy-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccessControlPolicy collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AccessControlPolicySpecified => (this.AccessControlPolicy.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mgc")]
        [System.Xml.Serialization.XmlElementAttribute("mgc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.MgmtCmd> MgmtCmd { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.MgmtCmd>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MgmtCmd-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MgmtCmd collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool MgmtCmdSpecified => (this.MgmtCmd.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("lcp")]
        [System.Xml.Serialization.XmlElementAttribute("lcp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.LocationPolicy> LocationPolicy { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.LocationPolicy>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocationPolicy-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LocationPolicy collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocationPolicySpecified => (this.LocationPolicy.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stcg")]
        [System.Xml.Serialization.XmlElementAttribute("stcg", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.StatsConfig> StatsConfig { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.StatsConfig>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StatsConfig-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the StatsConfig collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StatsConfigSpecified => (this.StatsConfig.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("stcl")]
        [System.Xml.Serialization.XmlElementAttribute("stcl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.StatsCollect> StatsCollect { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.StatsCollect>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StatsCollect-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the StatsCollect collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool StatsCollectSpecified => (this.StatsCollect.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("req")]
        [System.Xml.Serialization.XmlElementAttribute("req", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Request> Request { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Request>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Request-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Request collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RequestSpecified => (this.Request.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dlv")]
        [System.Xml.Serialization.XmlElementAttribute("dlv", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Delivery> Delivery { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Delivery>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Delivery-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Delivery collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeliverySpecified => (this.Delivery.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sch")]
        [System.Xml.Serialization.XmlElementAttribute("sch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Schedule> Schedule { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Schedule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Schedule-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Schedule collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ScheduleSpecified => (this.Schedule.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mssp")]
        [System.Xml.Serialization.XmlElementAttribute("mssp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.M2MServiceSubscriptionProfile> M2MServiceSubscriptionProfile { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.M2MServiceSubscriptionProfile>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die M2MServiceSubscriptionProfile-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the M2MServiceSubscriptionProfile collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool M2MServiceSubscriptionProfileSpecified => (this.M2MServiceSubscriptionProfile.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("asar")]
        [System.Xml.Serialization.XmlElementAttribute("asar", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ServiceSubscribedAppRule> ServiceSubscribedAppRule { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ServiceSubscribedAppRule>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ServiceSubscribedAppRule-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ServiceSubscribedAppRule collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ServiceSubscribedAppRuleSpecified => (this.ServiceSubscribedAppRule.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rol")]
        [System.Xml.Serialization.XmlElementAttribute("rol", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Role> Role { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Role>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Role-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Role collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RoleSpecified => (this.Role.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tk")]
        [System.Xml.Serialization.XmlElementAttribute("tk", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Token> Token { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Token>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Token-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Token collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TokenSpecified => (this.Token.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sg_flexContainerResource")]
        [System.Xml.Serialization.XmlElementAttribute("sg_flexContainerResource", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.FlexContainerResource> Sg_FlexContainerResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.FlexContainerResource>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sg_FlexContainerResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sg_FlexContainerResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool Sg_FlexContainerResourceSpecified => (this.Sg_FlexContainerResource.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-dynamicAuthorizationConsultation-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-dynamicAuthorizationConsultation-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dac", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("dac")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("dynamicAuthorizationConsultation", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class DynamicAuthorizationConsultation : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dae")]
        [System.Xml.Serialization.XmlElementAttribute("dae", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DynamicAuthorizationEnabled { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dap")]
        [System.Xml.Serialization.XmlElementAttribute("dap", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public System.Collections.Generic.ICollection<string> DynamicAuthorizationPoA { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("dal", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset DynamicAuthorizationLifetimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DynamicAuthorizationLifetime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DynamicAuthorizationLifetime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DynamicAuthorizationLifetimeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("dal")]
        public System.Nullable<System.DateTimeOffset> DynamicAuthorizationLifetime
        {
            get
            {
                return this.DynamicAuthorizationLifetimeValueSpecified ? this.DynamicAuthorizationLifetimeValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.DynamicAuthorizationLifetimeValue = value.GetValueOrDefault();
                this.DynamicAuthorizationLifetimeValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-genericInterworkingOperationInstance-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-genericInterworkingOperationInstance-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("gio", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("gio")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("genericInterworkingOperationInstance", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class GenericInterworkingOperationInstance : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gion")]
        [System.Xml.Serialization.XmlElementAttribute("gion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string OperationName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gios")]
        [System.Xml.Serialization.XmlElementAttribute("gios", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string OperationState { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giip")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giip", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> InputDataPointLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InputDataPointLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InputDataPointLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool InputDataPointLinksSpecified => (this.InputDataPointLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giop")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> OutputDataPointLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutputDataPointLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OutputDataPointLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OutputDataPointLinksSpecified => (this.OutputDataPointLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giil")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giil", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> InputLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InputLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InputLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool InputLinksSpecified => (this.InputLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giol")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giol", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> OutputLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutputLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OutputLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OutputLinksSpecified => (this.OutputLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-genericInterworkingOperationInstance-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-genericInterworkingOperationInstance-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("gioa", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("gioa")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("genericInterworkingOperationInstanceAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class GenericInterworkingOperationInstanceAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gion")]
        [System.Xml.Serialization.XmlElementAttribute("gion", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string OperationName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gios")]
        [System.Xml.Serialization.XmlElementAttribute("gios", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string OperationState { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giip")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giip", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> InputDataPointLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InputDataPointLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InputDataPointLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool InputDataPointLinksSpecified => (this.InputDataPointLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giop")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> OutputDataPointLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutputDataPointLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OutputDataPointLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OutputDataPointLinksSpecified => (this.OutputDataPointLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giil")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giil", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> InputLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InputLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InputLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool InputLinksSpecified => (this.InputLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giol")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giol", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> OutputLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutputLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OutputLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OutputLinksSpecified => (this.OutputLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-genericInterworkingService-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-genericInterworkingService-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("gis", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("gis")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("genericInterworkingService", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class GenericInterworkingService : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gisn")]
        [System.Xml.Serialization.XmlElementAttribute("gisn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ServiceName { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giip")]
        [System.Xml.Serialization.XmlElementAttribute("giip", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string InputDataPointLinks { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giop")]
        [System.Xml.Serialization.XmlElementAttribute("giop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> OutputDataPointLinks { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutputDataPointLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OutputDataPointLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OutputDataPointLinksSpecified => (this.OutputDataPointLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gis")]
        [System.Xml.Serialization.XmlElementAttribute("gis", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GenericInterworkingService> GenericInterworkingServiceProperty { get; set; } = System.Array.Empty<GenericInterworkingService>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GenericInterworkingServiceProperty-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GenericInterworkingServiceProperty collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GenericInterworkingServicePropertySpecified => (this.GenericInterworkingServiceProperty.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gio")]
        [System.Xml.Serialization.XmlElementAttribute("gio", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.GenericInterworkingOperationInstance> GenericInterworkingOperationInstance { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.GenericInterworkingOperationInstance>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GenericInterworkingOperationInstance-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GenericInterworkingOperationInstance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GenericInterworkingOperationInstanceSpecified => (this.GenericInterworkingOperationInstance.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-genericInterworkingService-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-genericInterworkingService-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("gisa", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("gisa")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("genericInterworkingServiceAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class GenericInterworkingServiceAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gisn")]
        [System.Xml.Serialization.XmlElementAttribute("gisn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string ServiceName { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giip")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giip", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> InputDataPointLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InputDataPointLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InputDataPointLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool InputDataPointLinksSpecified => (this.InputDataPointLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("giop")]
        [Newtonsoft.Json.JsonConverter(typeof(JsonArrayItem<DataLink>), "dle")]
        [System.Xml.Serialization.XmlArrayAttribute("giop", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("dle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.DataLink> OutputDataPointLinks { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.DataLink>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutputDataPointLinks-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OutputDataPointLinks collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OutputDataPointLinksSpecified => (this.OutputDataPointLinks.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gisa")]
        [System.Xml.Serialization.XmlElementAttribute("gisa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GenericInterworkingServiceAnnc> GenericInterworkingServiceAnncProperty { get; set; } = System.Array.Empty<GenericInterworkingServiceAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GenericInterworkingServiceAnncProperty-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GenericInterworkingServiceAnncProperty collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GenericInterworkingServiceAnncPropertySpecified => (this.GenericInterworkingServiceAnncProperty.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gioa")]
        [System.Xml.Serialization.XmlElementAttribute("gioa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.GenericInterworkingOperationInstanceAnnc> GenericInterworkingOperationInstanceAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.GenericInterworkingOperationInstanceAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GenericInterworkingOperationInstanceAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the GenericInterworkingOperationInstanceAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool GenericInterworkingOperationInstanceAnncSpecified => (this.GenericInterworkingOperationInstanceAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-requestPrimitive-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-requestPrimitive-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rqp", Namespace="http://www.onem2m.org/xml/protocols", AnonymousType=true)]
    [Newtonsoft.Json.JsonObjectAttribute("rqp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("requestPrimitive", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class RequestPrimitive
    {
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("op", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.Operation OperationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Operation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Operation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OperationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("op")]
        public System.Nullable<GridNet.OneM2M.Types.Operation> Operation
        {
            get
            {
                return this.OperationValueSpecified ? this.OperationValue : default(GridNet.OneM2M.Types.Operation?);
            }
            set
            {
                this.OperationValue = value.GetValueOrDefault();
                this.OperationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("to")]
        [System.Xml.Serialization.XmlElementAttribute("to", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string To { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fr")]
        [System.Xml.Serialization.XmlElementAttribute("fr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string From { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rqi")]
        [System.Xml.Serialization.XmlElementAttribute("rqi", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string RequestIdentifier { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ty", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResourceType ResourceTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResourceType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResourceType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResourceTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ty")]
        public System.Nullable<GridNet.OneM2M.Types.ResourceType> ResourceType
        {
            get
            {
                return this.ResourceTypeValueSpecified ? this.ResourceTypeValue : default(GridNet.OneM2M.Types.ResourceType?);
            }
            set
            {
                this.ResourceTypeValue = value.GetValueOrDefault();
                this.ResourceTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pc")]
        [System.Xml.Serialization.XmlElementAttribute("pc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.PrimitiveContent PrimitiveContent { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("rids")]
        [System.Xml.Serialization.XmlElementAttribute("rids", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public System.Collections.Generic.ICollection<string> RoleIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RoleIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the RoleIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RoleIDsSpecified => (this.RoleIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ot", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="dateTime")]
        public System.DateTimeOffset OriginatingTimestampValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OriginatingTimestamp-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OriginatingTimestamp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool OriginatingTimestampValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: urn:builtin</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ot")]
        public System.Nullable<System.DateTimeOffset> OriginatingTimestamp
        {
            get
            {
                return this.OriginatingTimestampValueSpecified ? this.OriginatingTimestampValue : default(System.DateTimeOffset?);
            }
            set
            {
                this.OriginatingTimestampValue = value.GetValueOrDefault();
                this.OriginatingTimestampValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rqet")]
        [System.Xml.Serialization.XmlElementAttribute("rqet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string RequestExpirationTimestamp { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rset")]
        [System.Xml.Serialization.XmlElementAttribute("rset", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ResultExpirationTimestamp { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("oet")]
        [System.Xml.Serialization.XmlElementAttribute("oet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string OperationExecutionTime { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rt")]
        [System.Xml.Serialization.XmlElementAttribute("rt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResponseTypeInfo ResponseType { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rp")]
        [System.Xml.Serialization.XmlElementAttribute("rp", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ResultPersistence { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rcn", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.ResultContent ResultContentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ResultContent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ResultContent property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ResultContentValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rcn")]
        public System.Nullable<GridNet.OneM2M.Types.ResultContent> ResultContent
        {
            get
            {
                return this.ResultContentValueSpecified ? this.ResultContentValue : default(GridNet.OneM2M.Types.ResultContent?);
            }
            set
            {
                this.ResultContentValue = value.GetValueOrDefault();
                this.ResultContentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ec")]
        [System.Xml.Serialization.XmlElementAttribute("ec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string EventCategory { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("da", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool DeliveryAggregationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeliveryAggregation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeliveryAggregation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeliveryAggregationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("da")]
        public System.Nullable<bool> DeliveryAggregation
        {
            get
            {
                return this.DeliveryAggregationValueSpecified ? this.DeliveryAggregationValue : default(bool?);
            }
            set
            {
                this.DeliveryAggregationValue = value.GetValueOrDefault();
                this.DeliveryAggregationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gid")]
        [System.Xml.Serialization.XmlElementAttribute("gid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string GroupRequestIdentifier { get; set; }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fc")]
        [System.Xml.Serialization.XmlElementAttribute("fc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.FilterCriteria FilterCriteria { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("drt", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.DiscResType DiscoveryResultTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DiscoveryResultType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DiscoveryResultType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DiscoveryResultTypeValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("drt")]
        public System.Nullable<GridNet.OneM2M.Types.DiscResType> DiscoveryResultType
        {
            get
            {
                return this.DiscoveryResultTypeValueSpecified ? this.DiscoveryResultTypeValue : default(GridNet.OneM2M.Types.DiscResType?);
            }
            set
            {
                this.DiscoveryResultTypeValue = value.GetValueOrDefault();
                this.DiscoveryResultTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tkns")]
        [System.Xml.Serialization.XmlElementAttribute("tkns", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Tokens { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// <para xml:lang="en">Pattern: ([a-zA-Z0-9\.\-,_]*)@([A-Za-z0-9\-_]*)(\.([A-Za-z0-9\-_])*)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([a-zA-Z0-9\\.\\-,_]*)@([A-Za-z0-9\\-_]*)(\\.([A-Za-z0-9\\-_])*)*")]
        [Newtonsoft.Json.JsonPropertyAttribute("tids")]
        [System.Xml.Serialization.XmlElementAttribute("tids", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="string")]
        public string TokenIDs { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ltids")]
        [System.Xml.Serialization.XmlElementAttribute("ltids", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="NCName")]
        public System.Collections.Generic.ICollection<string> LocalTokenIDs { get; set; } = System.Array.Empty<System.String>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LocalTokenIDs-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LocalTokenIDs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool LocalTokenIDsSpecified => (this.LocalTokenIDs.Count != 0);
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("tokenReqIndicator", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="boolean")]
        public bool TokenReqIndicatorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TokenReqIndicator-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TokenReqIndicator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool TokenReqIndicatorValueSpecified { get; set; }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("tokenReqIndicator")]
        public System.Nullable<bool> TokenReqIndicator
        {
            get
            {
                return this.TokenReqIndicatorValueSpecified ? this.TokenReqIndicatorValue : default(bool?);
            }
            set
            {
                this.TokenReqIndicatorValue = value.GetValueOrDefault();
                this.TokenReqIndicatorValueSpecified = value.HasValue;
            }
        }
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-policyDeletionRules-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-policyDeletionRules-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pdr", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("pdr")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("policyDeletionRules", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class PolicyDeletionRules : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("dr")]
        [System.Xml.Serialization.XmlElementAttribute("dr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.DeletionContexts DeletionRules { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("drr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.LogicalOperator DeletionRulesRelationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DeletionRulesRelation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DeletionRulesRelation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool DeletionRulesRelationValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("drr")]
        public System.Nullable<GridNet.OneM2M.Types.LogicalOperator> DeletionRulesRelation
        {
            get
            {
                return this.DeletionRulesRelationValueSpecified ? this.DeletionRulesRelationValue : default(GridNet.OneM2M.Types.LogicalOperator?);
            }
            set
            {
                this.DeletionRulesRelationValue = value.GetValueOrDefault();
                this.DeletionRulesRelationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-notificationTargetPolicy-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-notificationTargetPolicy-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ntp", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ntp")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("notificationTargetPolicy", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class NotificationTargetPolicy : GridNet.OneM2M.Types.RegularResource
    {
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cr")]
        [System.Xml.Serialization.XmlElementAttribute("cr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")]
        public string Creator { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("can", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.NotificationTargetPolicyAction ActionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Action-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Action property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ActionValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("can")]
        public System.Nullable<GridNet.OneM2M.Types.NotificationTargetPolicyAction> Action
        {
            get
            {
                return this.ActionValueSpecified ? this.ActionValue : default(GridNet.OneM2M.Types.NotificationTargetPolicyAction?);
            }
            set
            {
                this.ActionValue = value.GetValueOrDefault();
                this.ActionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-commonTypes-v2_7_0.xsd</para>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("plbl")]
        [System.Xml.Serialization.XmlElementAttribute("plbl", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="token")]
        public string PolicyLabel { get; set; }
        
        /// <summary>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("rrs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public GridNet.OneM2M.Types.LogicalOperator RulesRelationshipValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RulesRelationship-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RulesRelationship property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool RulesRelationshipValueSpecified { get; set; }
        
        /// <summary>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("rrs")]
        public System.Nullable<GridNet.OneM2M.Types.LogicalOperator> RulesRelationship
        {
            get
            {
                return this.RulesRelationshipValueSpecified ? this.RulesRelationshipValue : default(GridNet.OneM2M.Types.LogicalOperator?);
            }
            set
            {
                this.RulesRelationshipValue = value.GetValueOrDefault();
                this.RulesRelationshipValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pdr")]
        [System.Xml.Serialization.XmlElementAttribute("pdr", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.PolicyDeletionRules> PolicyDeletionRules { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.PolicyDeletionRules>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PolicyDeletionRules-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PolicyDeletionRules collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool PolicyDeletionRulesSpecified => (this.PolicyDeletionRules.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-svcFwWrapper-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-svcFwWrapper-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajfw", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajfw")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("svcFwWrapper", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class SvcFwWrapper : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-svcFwWrapper-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-svcFwWrapper-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajfwa", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajfwa")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("svcFwWrapperAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class SvcFwWrapperAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-svcObjWrapper-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-svcObjWrapper-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajsw", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajsw")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("svcObjWrapper", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class SvcObjWrapper : GridNet.OneM2M.Types.FlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajap")]
        [System.Xml.Serialization.XmlElementAttribute("ajap", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynApp> AllJoynApp { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynApp>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynApp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynApp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynAppSpecified => (this.AllJoynApp.Count != 0);
    }
    
    /// <summary>
    /// <para>Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long/CDT-svcObjWrapper-v2_7_0.xsd</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Source: file:///C:/work/gridnet/XmlSchemaClassGenerator/XSDbundle/xsd_v2_7_0_long" +
        "/CDT-svcObjWrapper-v2_7_0.xsd")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ajswa", Namespace="http://www.onem2m.org/xml/protocols")]
    [Newtonsoft.Json.JsonObjectAttribute("ajswa")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("svcObjWrapperAnnc", Namespace="http://www.onem2m.org/xml/protocols")]
    public partial class SvcObjWrapperAnnc : GridNet.OneM2M.Types.AnnouncedFlexContainerResource
    {
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ch")]
        [System.Xml.Serialization.XmlElementAttribute("ch", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.ChildResourceRef> ChildResource { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.ChildResourceRef>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ChildResource-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ChildResource collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool ChildResourceSpecified => (this.ChildResource.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smd")]
        [System.Xml.Serialization.XmlElementAttribute("smd", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptor> SemanticDescriptor { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptor>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptor-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptor collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorSpecified => (this.SemanticDescriptor.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("smdA")]
        [System.Xml.Serialization.XmlElementAttribute("smdA", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.SemanticDescriptorAnnc> SemanticDescriptorAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.SemanticDescriptorAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SemanticDescriptorAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SemanticDescriptorAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SemanticDescriptorAnncSpecified => (this.SemanticDescriptorAnnc.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sub")]
        [System.Xml.Serialization.XmlElementAttribute("sub", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.Subscription> Subscription { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.Subscription>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Subscription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Subscription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool SubscriptionSpecified => (this.Subscription.Count != 0);
        
        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ajapa")]
        [System.Xml.Serialization.XmlElementAttribute("ajapa", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.Collections.Generic.ICollection<GridNet.OneM2M.Types.AllJoynAppAnnc> AllJoynAppAnnc { get; set; } = System.Array.Empty<GridNet.OneM2M.Types.AllJoynAppAnnc>();
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AllJoynAppAnnc-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AllJoynAppAnnc collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Diagnostics.DebuggerHiddenAttribute()]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public bool AllJoynAppAnncSpecified => (this.AllJoynAppAnnc.Count != 0);
    }
}
